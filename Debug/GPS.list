
GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e80  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800a020  0800a020  0000b020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a64c  0800a64c  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a64c  0800a64c  0000b64c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a654  0800a654  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a654  0800a654  0000b654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a658  0800a658  0000b658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a65c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001d4  0800a830  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007a0  0800a830  0000c7a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0bd  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002121  00000000  00000000  0001a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  0001c3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a80  00000000  00000000  0001d160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174e5  00000000  00000000  0001dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f511  00000000  00000000  000350c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff49  00000000  00000000  000445d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d451f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050a4  00000000  00000000  000d4564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d9608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a008 	.word	0x0800a008

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	0800a008 	.word	0x0800a008

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000ffe:	4b09      	ldr	r3, [pc, #36]	@ (8001024 <delay+0x30>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8001006:	bf00      	nop
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <delay+0x30>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	429a      	cmp	r2, r3
 8001012:	d3f9      	bcc.n	8001008 <delay+0x14>
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200001f0 	.word	0x200001f0

08001028 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs);  // rs = 1 for data, rs=0 for command
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	461a      	mov	r2, r3
 800103a:	2104      	movs	r1, #4
 800103c:	4820      	ldr	r0, [pc, #128]	@ (80010c0 <send_to_lcd+0x98>)
 800103e:	f001 fe97 	bl	8002d70 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data>>3)&0x01));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	08db      	lsrs	r3, r3, #3
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	2101      	movs	r1, #1
 8001052:	481c      	ldr	r0, [pc, #112]	@ (80010c4 <send_to_lcd+0x9c>)
 8001054:	f001 fe8c 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data>>2)&0x01));
 8001058:	79fb      	ldrb	r3, [r7, #7]
 800105a:	089b      	lsrs	r3, r3, #2
 800105c:	b2db      	uxtb	r3, r3
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	2110      	movs	r1, #16
 8001068:	4817      	ldr	r0, [pc, #92]	@ (80010c8 <send_to_lcd+0xa0>)
 800106a:	f001 fe81 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data>>1)&0x01));
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	085b      	lsrs	r3, r3, #1
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	461a      	mov	r2, r3
 800107c:	2102      	movs	r1, #2
 800107e:	4812      	ldr	r0, [pc, #72]	@ (80010c8 <send_to_lcd+0xa0>)
 8001080:	f001 fe76 	bl	8002d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data>>0)&0x01));
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	2101      	movs	r1, #1
 8001090:	480d      	ldr	r0, [pc, #52]	@ (80010c8 <send_to_lcd+0xa0>)
 8001092:	f001 fe6d 	bl	8002d70 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 8001096:	2201      	movs	r2, #1
 8001098:	2108      	movs	r1, #8
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <send_to_lcd+0x98>)
 800109c:	f001 fe68 	bl	8002d70 <HAL_GPIO_WritePin>
	delay (20);
 80010a0:	2014      	movs	r0, #20
 80010a2:	f7ff ffa7 	bl	8000ff4 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2108      	movs	r1, #8
 80010aa:	4805      	ldr	r0, [pc, #20]	@ (80010c0 <send_to_lcd+0x98>)
 80010ac:	f001 fe60 	bl	8002d70 <HAL_GPIO_WritePin>
	delay (20);
 80010b0:	2014      	movs	r0, #20
 80010b2:	f7ff ff9f 	bl	8000ff4 <delay>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020400 	.word	0x40020400
 80010c8:	40020000 	.word	0x40020000

080010cc <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	73fb      	strb	r3, [r7, #15]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ffa1 	bl	8001028 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2100      	movs	r1, #0
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff ff98 	bl	8001028 <send_to_lcd>
}
 80010f8:	bf00      	nop
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff87 	bl	8001028 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	2101      	movs	r1, #1
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff7e 	bl	8001028 <send_to_lcd>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <lcd_clear>:

void lcd_clear (void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ffc7 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(2);
 800113e:	2002      	movs	r0, #2
 8001140:	f000 ff42 	bl	8001fc8 <HAL_Delay>
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    switch (row)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <lcd_put_cur+0x18>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d005      	beq.n	800116a <lcd_put_cur+0x22>
 800115e:	e009      	b.n	8001174 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001166:	603b      	str	r3, [r7, #0]
            break;
 8001168:	e004      	b.n	8001174 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8001170:	603b      	str	r3, [r7, #0]
            break;
 8001172:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffa7 	bl	80010cc <lcd_send_cmd>
}
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <lcd_init>:


void lcd_init (void)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800118a:	2032      	movs	r0, #50	@ 0x32
 800118c:	f000 ff1c 	bl	8001fc8 <HAL_Delay>
	HAL_Delay(100);  // Increase from 50ms
 8001190:	2064      	movs	r0, #100	@ 0x64
 8001192:	f000 ff19 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001196:	2030      	movs	r0, #48	@ 0x30
 8001198:	f7ff ff98 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(10);  // Increase from 5ms
 800119c:	200a      	movs	r0, #10
 800119e:	f000 ff13 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011a2:	2030      	movs	r0, #48	@ 0x30
 80011a4:	f7ff ff92 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(10);  // Increase from 1ms
 80011a8:	200a      	movs	r0, #10
 80011aa:	f000 ff0d 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80011ae:	2030      	movs	r0, #48	@ 0x30
 80011b0:	f7ff ff8c 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(20);  // Increase from 10ms
 80011b4:	2014      	movs	r0, #20
 80011b6:	f000 ff07 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80011ba:	2020      	movs	r0, #32
 80011bc:	f7ff ff86 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(10);
 80011c0:	200a      	movs	r0, #10
 80011c2:	f000 ff01 	bl	8001fc8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80011c6:	2028      	movs	r0, #40	@ 0x28
 80011c8:	f7ff ff80 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(1);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 fefb 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80011d2:	2008      	movs	r0, #8
 80011d4:	f7ff ff7a 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(1);
 80011d8:	2001      	movs	r0, #1
 80011da:	f000 fef5 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff ff74 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(1);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f000 feef 	bl	8001fc8 <HAL_Delay>
	HAL_Delay(1);
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 feec 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80011f0:	2006      	movs	r0, #6
 80011f2:	f7ff ff6b 	bl	80010cc <lcd_send_cmd>
	HAL_Delay(1);
 80011f6:	2001      	movs	r0, #1
 80011f8:	f000 fee6 	bl	8001fc8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80011fc:	200c      	movs	r0, #12
 80011fe:	f7ff ff65 	bl	80010cc <lcd_send_cmd>
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}

08001206 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800120e:	e006      	b.n	800121e <lcd_send_string+0x18>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff71 	bl	8001100 <lcd_send_data>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1f4      	bne.n	8001210 <lcd_send_string+0xa>
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <send_message>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
void send_message(char *message) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff f821 	bl	8000280 <strlen>
 800123e:	4603      	mov	r3, r0
 8001240:	b29a      	uxth	r2, r3
 8001242:	f04f 33ff 	mov.w	r3, #4294967295
 8001246:	6879      	ldr	r1, [r7, #4]
 8001248:	4803      	ldr	r0, [pc, #12]	@ (8001258 <send_message+0x28>)
 800124a:	f002 fd59 	bl	8003d00 <HAL_UART_Transmit>
}
 800124e:	bf00      	nop
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000280 	.word	0x20000280

0800125c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fe40 	bl	8001ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f83c 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f000 f968 	bl	800153c <MX_GPIO_Init>
  MX_DMA_Init();
 800126c:	f000 f946 	bl	80014fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001270:	f000 f91a 	bl	80014a8 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001274:	f000 f8ee 	bl	8001454 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001278:	f000 f89c 	bl	80013b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, (uint8_t*)Rxdata, 700);
 800127c:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8001280:	4912      	ldr	r1, [pc, #72]	@ (80012cc <main+0x70>)
 8001282:	4813      	ldr	r0, [pc, #76]	@ (80012d0 <main+0x74>)
 8001284:	f002 fdc7 	bl	8003e16 <HAL_UART_Receive_DMA>
  HAL_TIM_Base_Start(&htim1);
 8001288:	4812      	ldr	r0, [pc, #72]	@ (80012d4 <main+0x78>)
 800128a:	f002 fa33 	bl	80036f4 <HAL_TIM_Base_Start>

  lcd_init();
 800128e:	f7ff ff7a 	bl	8001186 <lcd_init>
  lcd_put_cur(0, 0);
 8001292:	2100      	movs	r1, #0
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff57 	bl	8001148 <lcd_put_cur>
  lcd_send_string("GPS Initializing");
 800129a:	480f      	ldr	r0, [pc, #60]	@ (80012d8 <main+0x7c>)
 800129c:	f7ff ffb3 	bl	8001206 <lcd_send_string>
  lcd_put_cur(1, 0);
 80012a0:	2100      	movs	r1, #0
 80012a2:	2001      	movs	r0, #1
 80012a4:	f7ff ff50 	bl	8001148 <lcd_put_cur>
  lcd_send_string("Please wait...");
 80012a8:	480c      	ldr	r0, [pc, #48]	@ (80012dc <main+0x80>)
 80012aa:	f7ff ffac 	bl	8001206 <lcd_send_string>
  HAL_Delay(3000);
 80012ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80012b2:	f000 fe89 	bl	8001fc8 <HAL_Delay>
  lcd_clear();
 80012b6:	f7ff ff3d 	bl	8001134 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      get_location();
 80012ba:	f000 f9e5 	bl	8001688 <get_location>
      //HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
      HAL_Delay(1000);  // Update every second
 80012be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012c2:	f000 fe81 	bl	8001fc8 <HAL_Delay>
      get_location();
 80012c6:	bf00      	nop
 80012c8:	e7f7      	b.n	80012ba <main+0x5e>
 80012ca:	bf00      	nop
 80012cc:	20000328 	.word	0x20000328
 80012d0:	20000238 	.word	0x20000238
 80012d4:	200001f0 	.word	0x200001f0
 80012d8:	0800a020 	.word	0x0800a020
 80012dc:	0800a034 	.word	0x0800a034

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f004 fe8f 	bl	8006012 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b28      	ldr	r3, [pc, #160]	@ (80013ac <SystemClock_Config+0xcc>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a27      	ldr	r2, [pc, #156]	@ (80013ac <SystemClock_Config+0xcc>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <SystemClock_Config+0xcc>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b22      	ldr	r3, [pc, #136]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800132c:	4a20      	ldr	r2, [pc, #128]	@ (80013b0 <SystemClock_Config+0xd0>)
 800132e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b1e      	ldr	r3, [pc, #120]	@ (80013b0 <SystemClock_Config+0xd0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001340:	2302      	movs	r3, #2
 8001342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001344:	2301      	movs	r3, #1
 8001346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001348:	2310      	movs	r3, #16
 800134a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001350:	2300      	movs	r3, #0
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001354:	2308      	movs	r3, #8
 8001356:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001358:	2354      	movs	r3, #84	@ 0x54
 800135a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135c:	2302      	movs	r3, #2
 800135e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001360:	2304      	movs	r3, #4
 8001362:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f107 0320 	add.w	r3, r7, #32
 8001368:	4618      	mov	r0, r3
 800136a:	f001 fd1b 	bl	8002da4 <HAL_RCC_OscConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001374:	f000 fb68 	bl	8001a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001378:	230f      	movs	r3, #15
 800137a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137c:	2302      	movs	r3, #2
 800137e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001384:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001388:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	2102      	movs	r1, #2
 8001394:	4618      	mov	r0, r3
 8001396:	f001 ff7d 	bl	8003294 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013a0:	f000 fb52 	bl	8001a48 <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3750      	adds	r7, #80	@ 0x50
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40007000 	.word	0x40007000

080013b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0308 	add.w	r3, r7, #8
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013d0:	4b1e      	ldr	r3, [pc, #120]	@ (800144c <MX_TIM1_Init+0x98>)
 80013d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001450 <MX_TIM1_Init+0x9c>)
 80013d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013d6:	4b1d      	ldr	r3, [pc, #116]	@ (800144c <MX_TIM1_Init+0x98>)
 80013d8:	2247      	movs	r2, #71	@ 0x47
 80013da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <MX_TIM1_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <MX_TIM1_Init+0x98>)
 80013e4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80013e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <MX_TIM1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013f0:	4b16      	ldr	r3, [pc, #88]	@ (800144c <MX_TIM1_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <MX_TIM1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013fc:	4813      	ldr	r0, [pc, #76]	@ (800144c <MX_TIM1_Init+0x98>)
 80013fe:	f002 f929 	bl	8003654 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 fb1e 	bl	8001a48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001410:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	@ (800144c <MX_TIM1_Init+0x98>)
 800141a:	f002 f9c5 	bl	80037a8 <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001424:	f000 fb10 	bl	8001a48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	@ (800144c <MX_TIM1_Init+0x98>)
 8001436:	f002 fba5 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001440:	f000 fb02 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3718      	adds	r7, #24
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200001f0 	.word	0x200001f0
 8001450:	40010000 	.word	0x40010000

08001454 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <MX_USART1_UART_Init+0x50>)
 800145c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001460:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001464:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0c      	ldr	r3, [pc, #48]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b09      	ldr	r3, [pc, #36]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800148a:	4805      	ldr	r0, [pc, #20]	@ (80014a0 <MX_USART1_UART_Init+0x4c>)
 800148c:	f002 fbe8 	bl	8003c60 <HAL_UART_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001496:	f000 fad7 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000238 	.word	0x20000238
 80014a4:	40011000 	.word	0x40011000

080014a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ae:	4a12      	ldr	r2, [pc, #72]	@ (80014f8 <MX_USART2_UART_Init+0x50>)
 80014b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80014b2:	4b10      	ldr	r3, [pc, #64]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80014b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014ce:	220c      	movs	r2, #12
 80014d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d2:	4b08      	ldr	r3, [pc, #32]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014d8:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014de:	4805      	ldr	r0, [pc, #20]	@ (80014f4 <MX_USART2_UART_Init+0x4c>)
 80014e0:	f002 fbbe 	bl	8003c60 <HAL_UART_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ea:	f000 faad 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000280 	.word	0x20000280
 80014f8:	40004400 	.word	0x40004400

080014fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
 8001506:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <MX_DMA_Init+0x3c>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <MX_DMA_Init+0x3c>)
 800150c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b09      	ldr	r3, [pc, #36]	@ (8001538 <MX_DMA_Init+0x3c>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800151a:	607b      	str	r3, [r7, #4]
 800151c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	203a      	movs	r0, #58	@ 0x3a
 8001524:	f000 fe4f 	bl	80021c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001528:	203a      	movs	r0, #58	@ 0x3a
 800152a:	f000 fe68 	bl	80021fe <HAL_NVIC_EnableIRQ>

}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40023800 	.word	0x40023800

0800153c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08a      	sub	sp, #40	@ 0x28
 8001540:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001542:	f107 0314 	add.w	r3, r7, #20
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b40      	ldr	r3, [pc, #256]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a3f      	ldr	r2, [pc, #252]	@ (8001658 <MX_GPIO_Init+0x11c>)
 800155c:	f043 0304 	orr.w	r3, r3, #4
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0304 	and.w	r3, r3, #4
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b39      	ldr	r3, [pc, #228]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a38      	ldr	r2, [pc, #224]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001578:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b36      	ldr	r3, [pc, #216]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b32      	ldr	r3, [pc, #200]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a31      	ldr	r2, [pc, #196]	@ (8001658 <MX_GPIO_Init+0x11c>)
 8001594:	f043 0301 	orr.w	r3, r3, #1
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b2f      	ldr	r3, [pc, #188]	@ (8001658 <MX_GPIO_Init+0x11c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	4b2b      	ldr	r3, [pc, #172]	@ (8001658 <MX_GPIO_Init+0x11c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001658 <MX_GPIO_Init+0x11c>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_GPIO_Init+0x11c>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	218c      	movs	r1, #140	@ 0x8c
 80015c6:	4825      	ldr	r0, [pc, #148]	@ (800165c <MX_GPIO_Init+0x120>)
 80015c8:	f001 fbd2 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80015cc:	2200      	movs	r2, #0
 80015ce:	f248 0113 	movw	r1, #32787	@ 0x8013
 80015d2:	4823      	ldr	r0, [pc, #140]	@ (8001660 <MX_GPIO_Init+0x124>)
 80015d4:	f001 fbcc 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80015d8:	2200      	movs	r2, #0
 80015da:	2101      	movs	r1, #1
 80015dc:	4821      	ldr	r0, [pc, #132]	@ (8001664 <MX_GPIO_Init+0x128>)
 80015de:	f001 fbc7 	bl	8002d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 80015e2:	238c      	movs	r3, #140	@ 0x8c
 80015e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4818      	ldr	r0, [pc, #96]	@ (800165c <MX_GPIO_Init+0x120>)
 80015fa:	f001 fa1d 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_15;
 80015fe:	f248 0313 	movw	r3, #32787	@ 0x8013
 8001602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001604:	2301      	movs	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	4619      	mov	r1, r3
 8001616:	4812      	ldr	r0, [pc, #72]	@ (8001660 <MX_GPIO_Init+0x124>)
 8001618:	f001 fa0e 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800161c:	2301      	movs	r3, #1
 800161e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	2301      	movs	r3, #1
 8001622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <MX_GPIO_Init+0x128>)
 8001634:	f001 fa00 	bl	8002a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001638:	2320      	movs	r3, #32
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	@ (8001664 <MX_GPIO_Init+0x128>)
 800164c:	f001 f9f4 	bl	8002a38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020000 	.word	0x40020000
 8001664:	40020400 	.word	0x40020400

08001668 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	Flag = 1;
 8001670:	4b04      	ldr	r3, [pc, #16]	@ (8001684 <HAL_UART_RxCpltCallback+0x1c>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	20000616 	.word	0x20000616

08001688 <get_location>:
void get_location(void) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b096      	sub	sp, #88	@ 0x58
 800168c:	af02      	add	r7, sp, #8
    char *ptr = strstr((char*)Rxdata, "$GPRMC");
 800168e:	497c      	ldr	r1, [pc, #496]	@ (8001880 <get_location+0x1f8>)
 8001690:	487c      	ldr	r0, [pc, #496]	@ (8001884 <get_location+0x1fc>)
 8001692:	f004 fcd3 	bl	800603c <strstr>
 8001696:	6438      	str	r0, [r7, #64]	@ 0x40
    if (ptr) {
 8001698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 80e0 	beq.w	8001860 <get_location+0x1d8>
        char *end = strchr(ptr, '\n');
 80016a0:	210a      	movs	r1, #10
 80016a2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80016a4:	f004 fcbd 	bl	8006022 <strchr>
 80016a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        if (end) {
 80016aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80d7 	beq.w	8001860 <get_location+0x1d8>
            *end = '\0';
 80016b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016b4:	2200      	movs	r2, #0
 80016b6:	701a      	strb	r2, [r3, #0]
            sscanf(ptr, "$GPRMC,%f,A,%f,N,%f,", &Time, &Latitude, &Longitude);
 80016b8:	4b73      	ldr	r3, [pc, #460]	@ (8001888 <get_location+0x200>)
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	4b73      	ldr	r3, [pc, #460]	@ (800188c <get_location+0x204>)
 80016be:	4a74      	ldr	r2, [pc, #464]	@ (8001890 <get_location+0x208>)
 80016c0:	4974      	ldr	r1, [pc, #464]	@ (8001894 <get_location+0x20c>)
 80016c2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80016c4:	f004 fc36 	bl	8005f34 <siscanf>

            // Add new coordinates to the sliding window
            lat_window[window_index] = Latitude;
 80016c8:	4b73      	ldr	r3, [pc, #460]	@ (8001898 <get_location+0x210>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a6f      	ldr	r2, [pc, #444]	@ (800188c <get_location+0x204>)
 80016ce:	6812      	ldr	r2, [r2, #0]
 80016d0:	4972      	ldr	r1, [pc, #456]	@ (800189c <get_location+0x214>)
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	601a      	str	r2, [r3, #0]
            lon_window[window_index] = Longitude;
 80016d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001898 <get_location+0x210>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001888 <get_location+0x200>)
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	496f      	ldr	r1, [pc, #444]	@ (80018a0 <get_location+0x218>)
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	601a      	str	r2, [r3, #0]
            window_index = (window_index + 1) % WINDOW_SIZE;
 80016e8:	4b6b      	ldr	r3, [pc, #428]	@ (8001898 <get_location+0x210>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	3301      	adds	r3, #1
 80016ee:	425a      	negs	r2, r3
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	f002 0203 	and.w	r2, r2, #3
 80016f8:	bf58      	it	pl
 80016fa:	4253      	negpl	r3, r2
 80016fc:	4a66      	ldr	r2, [pc, #408]	@ (8001898 <get_location+0x210>)
 80016fe:	6013      	str	r3, [r2, #0]

            if (window_index == 0) {
 8001700:	4b65      	ldr	r3, [pc, #404]	@ (8001898 <get_location+0x210>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d102      	bne.n	800170e <get_location+0x86>
                window_filled = 1;
 8001708:	4b66      	ldr	r3, [pc, #408]	@ (80018a4 <get_location+0x21c>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
            }

            if (window_filled) {
 800170e:	4b65      	ldr	r3, [pc, #404]	@ (80018a4 <get_location+0x21c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8093 	beq.w	800183e <get_location+0x1b6>
                float lat_diff = 0, lon_diff = 0;
 8001718:	f04f 0300 	mov.w	r3, #0
 800171c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	64bb      	str	r3, [r7, #72]	@ 0x48
                for (int i = 0; i < WINDOW_SIZE - 1; i++) {
 8001724:	2300      	movs	r3, #0
 8001726:	647b      	str	r3, [r7, #68]	@ 0x44
 8001728:	e030      	b.n	800178c <get_location+0x104>
                    lat_diff += fabs(lat_window[i] - lat_window[i+1]);
 800172a:	4a5c      	ldr	r2, [pc, #368]	@ (800189c <get_location+0x214>)
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	ed93 7a00 	vldr	s14, [r3]
 8001736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001738:	3301      	adds	r3, #1
 800173a:	4a58      	ldr	r2, [pc, #352]	@ (800189c <get_location+0x214>)
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	edd3 7a00 	vldr	s15, [r3]
 8001744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001748:	eef0 7ae7 	vabs.f32	s15, s15
 800174c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001750:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001754:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
                    lon_diff += fabs(lon_window[i] - lon_window[i+1]);
 8001758:	4a51      	ldr	r2, [pc, #324]	@ (80018a0 <get_location+0x218>)
 800175a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	ed93 7a00 	vldr	s14, [r3]
 8001764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001766:	3301      	adds	r3, #1
 8001768:	4a4d      	ldr	r2, [pc, #308]	@ (80018a0 <get_location+0x218>)
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4413      	add	r3, r2
 800176e:	edd3 7a00 	vldr	s15, [r3]
 8001772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001776:	eef0 7ae7 	vabs.f32	s15, s15
 800177a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800177e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001782:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
                for (int i = 0; i < WINDOW_SIZE - 1; i++) {
 8001786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001788:	3301      	adds	r3, #1
 800178a:	647b      	str	r3, [r7, #68]	@ 0x44
 800178c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800178e:	2b02      	cmp	r3, #2
 8001790:	ddcb      	ble.n	800172a <get_location+0xa2>
                }

                float avg_movement = (lat_diff + lon_diff) / (2 * (WINDOW_SIZE - 1));
 8001792:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8001796:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800179a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179e:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
 80017a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
                GPIO_PinState pirState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80017aa:	2120      	movs	r1, #32
 80017ac:	483e      	ldr	r0, [pc, #248]	@ (80018a8 <get_location+0x220>)
 80017ae:	f001 fac7 	bl	8002d40 <HAL_GPIO_ReadPin>
 80017b2:	4603      	mov	r3, r0
 80017b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (avg_movement > MOTION_THRESHOLD && pirState == GPIO_PIN_SET) {
 80017b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80017ba:	f7fe fecd 	bl	8000558 <__aeabi_f2d>
 80017be:	a32e      	add	r3, pc, #184	@ (adr r3, 8001878 <get_location+0x1f0>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7ff f9b0 	bl	8000b28 <__aeabi_dcmpgt>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <get_location+0x180>
 80017ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d118      	bne.n	8001808 <get_location+0x180>
                    // Motion detected by both GPS and PIR sensor
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	2180      	movs	r1, #128	@ 0x80
 80017da:	4834      	ldr	r0, [pc, #208]	@ (80018ac <get_location+0x224>)
 80017dc:	f001 fac8 	bl	8002d70 <HAL_GPIO_WritePin>
                    char motion_msg[50];
                    snprintf(motion_msg, sizeof(motion_msg), "Motion detected: %.6f\r\n", avg_movement);
 80017e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80017e2:	f7fe feb9 	bl	8000558 <__aeabi_f2d>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	1d38      	adds	r0, r7, #4
 80017ec:	e9cd 2300 	strd	r2, r3, [sp]
 80017f0:	4a2f      	ldr	r2, [pc, #188]	@ (80018b0 <get_location+0x228>)
 80017f2:	2132      	movs	r1, #50	@ 0x32
 80017f4:	f004 fb4a 	bl	8005e8c <sniprintf>
                    send_message(motion_msg);
 80017f8:	1d3b      	adds	r3, r7, #4
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fd18 	bl	8001230 <send_message>
                    send_message("PIR sensor: Motion detected!\r\n");
 8001800:	482c      	ldr	r0, [pc, #176]	@ (80018b4 <get_location+0x22c>)
 8001802:	f7ff fd15 	bl	8001230 <send_message>
                if (avg_movement > MOTION_THRESHOLD && pirState == GPIO_PIN_SET) {
 8001806:	e01a      	b.n	800183e <get_location+0x1b6>
                } else {
                    // No motion or only partial detection
                    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	2180      	movs	r1, #128	@ 0x80
 800180c:	4827      	ldr	r0, [pc, #156]	@ (80018ac <get_location+0x224>)
 800180e:	f001 faaf 	bl	8002d70 <HAL_GPIO_WritePin>
                    if (avg_movement > MOTION_THRESHOLD) {
 8001812:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001814:	f7fe fea0 	bl	8000558 <__aeabi_f2d>
 8001818:	a317      	add	r3, pc, #92	@ (adr r3, 8001878 <get_location+0x1f0>)
 800181a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181e:	f7ff f983 	bl	8000b28 <__aeabi_dcmpgt>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <get_location+0x1a8>
                        send_message("GPS movement detected, but no PIR trigger.\r\n");
 8001828:	4823      	ldr	r0, [pc, #140]	@ (80018b8 <get_location+0x230>)
 800182a:	f7ff fd01 	bl	8001230 <send_message>
 800182e:	e006      	b.n	800183e <get_location+0x1b6>
                    } else if (pirState == GPIO_PIN_SET) {
 8001830:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001834:	2b01      	cmp	r3, #1
 8001836:	d102      	bne.n	800183e <get_location+0x1b6>
                        send_message("PIR triggered, but no significant GPS movement.\r\n");
 8001838:	4820      	ldr	r0, [pc, #128]	@ (80018bc <get_location+0x234>)
 800183a:	f7ff fcf9 	bl	8001230 <send_message>
                    }
                }
            }
            Format_data(Time, Latitude, Longitude);
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <get_location+0x208>)
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	4b11      	ldr	r3, [pc, #68]	@ (800188c <get_location+0x204>)
 8001846:	ed93 7a00 	vldr	s14, [r3]
 800184a:	4b0f      	ldr	r3, [pc, #60]	@ (8001888 <get_location+0x200>)
 800184c:	edd3 6a00 	vldr	s13, [r3]
 8001850:	eeb0 1a66 	vmov.f32	s2, s13
 8001854:	eef0 0a47 	vmov.f32	s1, s14
 8001858:	eeb0 0a67 	vmov.f32	s0, s15
 800185c:	f000 f832 	bl	80018c4 <Format_data>
        }
    }
    HAL_UART_Receive_DMA(&huart1, (uint8_t*)Rxdata, sizeof(Rxdata));
 8001860:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <get_location+0x1fc>)
 8001866:	4816      	ldr	r0, [pc, #88]	@ (80018c0 <get_location+0x238>)
 8001868:	f002 fad5 	bl	8003e16 <HAL_UART_Receive_DMA>
}
 800186c:	bf00      	nop
 800186e:	3750      	adds	r7, #80	@ 0x50
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	f3af 8000 	nop.w
 8001878:	47ae147b 	.word	0x47ae147b
 800187c:	3f747ae1 	.word	0x3f747ae1
 8001880:	0800a044 	.word	0x0800a044
 8001884:	20000328 	.word	0x20000328
 8001888:	20000620 	.word	0x20000620
 800188c:	2000061c 	.word	0x2000061c
 8001890:	20000618 	.word	0x20000618
 8001894:	0800a04c 	.word	0x0800a04c
 8001898:	20000644 	.word	0x20000644
 800189c:	20000624 	.word	0x20000624
 80018a0:	20000634 	.word	0x20000634
 80018a4:	20000648 	.word	0x20000648
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	0800a064 	.word	0x0800a064
 80018b4:	0800a07c 	.word	0x0800a07c
 80018b8:	0800a09c 	.word	0x0800a09c
 80018bc:	0800a0cc 	.word	0x0800a0cc
 80018c0:	20000238 	.word	0x20000238

080018c4 <Format_data>:
void Format_data(float Time, float Latitude, float Longitude) {
 80018c4:	b5b0      	push	{r4, r5, r7, lr}
 80018c6:	b0be      	sub	sp, #248	@ 0xf8
 80018c8:	af06      	add	r7, sp, #24
 80018ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80018ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80018d2:	ed87 1a01 	vstr	s2, [r7, #4]
    int hours, minutes, seconds;
    hours = ((int)Time / 10000) % 100;
 80018d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018de:	ee17 1a90 	vmov	r1, s15
 80018e2:	4b53      	ldr	r3, [pc, #332]	@ (8001a30 <Format_data+0x16c>)
 80018e4:	fb83 2301 	smull	r2, r3, r3, r1
 80018e8:	131a      	asrs	r2, r3, #12
 80018ea:	17cb      	asrs	r3, r1, #31
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4a51      	ldr	r2, [pc, #324]	@ (8001a34 <Format_data+0x170>)
 80018f0:	fb82 1203 	smull	r1, r2, r2, r3
 80018f4:	1151      	asrs	r1, r2, #5
 80018f6:	17da      	asrs	r2, r3, #31
 80018f8:	1a8a      	subs	r2, r1, r2
 80018fa:	2164      	movs	r1, #100	@ 0x64
 80018fc:	fb01 f202 	mul.w	r2, r1, r2
 8001900:	1a9b      	subs	r3, r3, r2
 8001902:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    minutes = ((int)Time % 10000) / 100;
 8001906:	edd7 7a03 	vldr	s15, [r7, #12]
 800190a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800190e:	ee17 2a90 	vmov	r2, s15
 8001912:	4b47      	ldr	r3, [pc, #284]	@ (8001a30 <Format_data+0x16c>)
 8001914:	fb83 1302 	smull	r1, r3, r3, r2
 8001918:	1319      	asrs	r1, r3, #12
 800191a:	17d3      	asrs	r3, r2, #31
 800191c:	1acb      	subs	r3, r1, r3
 800191e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001922:	fb01 f303 	mul.w	r3, r1, r3
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a42      	ldr	r2, [pc, #264]	@ (8001a34 <Format_data+0x170>)
 800192a:	fb82 1203 	smull	r1, r2, r2, r3
 800192e:	1152      	asrs	r2, r2, #5
 8001930:	17db      	asrs	r3, r3, #31
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    seconds = (int)Time % 100;
 8001938:	edd7 7a03 	vldr	s15, [r7, #12]
 800193c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001940:	ee17 3a90 	vmov	r3, s15
 8001944:	4a3b      	ldr	r2, [pc, #236]	@ (8001a34 <Format_data+0x170>)
 8001946:	fb82 1203 	smull	r1, r2, r2, r3
 800194a:	1151      	asrs	r1, r2, #5
 800194c:	17da      	asrs	r2, r3, #31
 800194e:	1a8a      	subs	r2, r1, r2
 8001950:	2164      	movs	r1, #100	@ 0x64
 8001952:	fb01 f202 	mul.w	r2, r1, r2
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

    int adjusted_hours = hours - 5;
 800195c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001960:	3b05      	subs	r3, #5
 8001962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    if (adjusted_hours < 0) {
 8001966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800196a:	2b00      	cmp	r3, #0
 800196c:	da04      	bge.n	8001978 <Format_data+0xb4>
        adjusted_hours += 24;
 800196e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001972:	3318      	adds	r3, #24
 8001974:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    }

    char data[150];
    sprintf(data, "\r\n=============================\n"
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f7fe fded 	bl	8000558 <__aeabi_f2d>
 800197e:	4604      	mov	r4, r0
 8001980:	460d      	mov	r5, r1
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fde8 	bl	8000558 <__aeabi_f2d>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8001990:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001994:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001998:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019a2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019a6:	4924      	ldr	r1, [pc, #144]	@ (8001a38 <Format_data+0x174>)
 80019a8:	f004 faa4 	bl	8005ef4 <siprintf>
                  "Latitude: %.6f\n"
                  "Longitude: %.6f\n"
                  "=============================\n",
            adjusted_hours, minutes, seconds, Latitude, Longitude);

    send_message(data);
 80019ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc3d 	bl	8001230 <send_message>
    send_message("\r\n");
 80019b6:	4821      	ldr	r0, [pc, #132]	@ (8001a3c <Format_data+0x178>)
 80019b8:	f7ff fc3a 	bl	8001230 <send_message>

    lcd_clear();
 80019bc:	f7ff fbba 	bl	8001134 <lcd_clear>
    lcd_put_cur(0, 0);
 80019c0:	2100      	movs	r1, #0
 80019c2:	2000      	movs	r0, #0
 80019c4:	f7ff fbc0 	bl	8001148 <lcd_put_cur>
    char time_str[17];
    snprintf(time_str, sizeof(time_str), "Time: %02d:%02d:%02d", adjusted_hours, minutes, seconds);
 80019c8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019cc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80019dc:	4a18      	ldr	r2, [pc, #96]	@ (8001a40 <Format_data+0x17c>)
 80019de:	2111      	movs	r1, #17
 80019e0:	f004 fa54 	bl	8005e8c <sniprintf>
    lcd_send_string(time_str);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc0c 	bl	8001206 <lcd_send_string>

    lcd_put_cur(1, 0);
 80019ee:	2100      	movs	r1, #0
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fba9 	bl	8001148 <lcd_put_cur>
    char coord_str[17];
    snprintf(coord_str, sizeof(coord_str), "La:%.0f Lo:%.0f", Latitude, Longitude);
 80019f6:	68b8      	ldr	r0, [r7, #8]
 80019f8:	f7fe fdae 	bl	8000558 <__aeabi_f2d>
 80019fc:	4604      	mov	r4, r0
 80019fe:	460d      	mov	r5, r1
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7fe fda9 	bl	8000558 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	f107 0010 	add.w	r0, r7, #16
 8001a0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a12:	e9cd 4500 	strd	r4, r5, [sp]
 8001a16:	4a0b      	ldr	r2, [pc, #44]	@ (8001a44 <Format_data+0x180>)
 8001a18:	2111      	movs	r1, #17
 8001a1a:	f004 fa37 	bl	8005e8c <sniprintf>
    lcd_send_string(coord_str);
 8001a1e:	f107 0310 	add.w	r3, r7, #16
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fbef 	bl	8001206 <lcd_send_string>
}
 8001a28:	bf00      	nop
 8001a2a:	37e0      	adds	r7, #224	@ 0xe0
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a30:	68db8bad 	.word	0x68db8bad
 8001a34:	51eb851f 	.word	0x51eb851f
 8001a38:	0800a100 	.word	0x0800a100
 8001a3c:	0800a17c 	.word	0x0800a17c
 8001a40:	0800a180 	.word	0x0800a180
 8001a44:	0800a198 	.word	0x0800a198

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a4c:	b672      	cpsid	i
}
 8001a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <Error_Handler+0x8>

08001a54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a62:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	603b      	str	r3, [r7, #0]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_MspInit+0x4c>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8e:	603b      	str	r3, [r7, #0]
 8001a90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ae0 <HAL_TIM_Base_MspInit+0x3c>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d10d      	bne.n	8001ad2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abe:	4a09      	ldr	r2, [pc, #36]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac6:	4b07      	ldr	r3, [pc, #28]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x40>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001ad2:	bf00      	nop
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40010000 	.word	0x40010000
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08c      	sub	sp, #48	@ 0x30
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af0:	f107 031c 	add.w	r3, r7, #28
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
 8001afa:	609a      	str	r2, [r3, #8]
 8001afc:	60da      	str	r2, [r3, #12]
 8001afe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a4e      	ldr	r2, [pc, #312]	@ (8001c40 <HAL_UART_MspInit+0x158>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d15c      	bne.n	8001bc4 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b12:	4a4c      	ldr	r2, [pc, #304]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b14:	f043 0310 	orr.w	r3, r3, #16
 8001b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	f003 0310 	and.w	r3, r3, #16
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	617b      	str	r3, [r7, #20]
 8001b2a:	4b46      	ldr	r3, [pc, #280]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a45      	ldr	r2, [pc, #276]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b43      	ldr	r3, [pc, #268]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b42:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b50:	2303      	movs	r3, #3
 8001b52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b54:	2307      	movs	r3, #7
 8001b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	483a      	ldr	r0, [pc, #232]	@ (8001c48 <HAL_UART_MspInit+0x160>)
 8001b60:	f000 ff6a 	bl	8002a38 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001b64:	4b39      	ldr	r3, [pc, #228]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b66:	4a3a      	ldr	r2, [pc, #232]	@ (8001c50 <HAL_UART_MspInit+0x168>)
 8001b68:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b6c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b70:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b72:	4b36      	ldr	r3, [pc, #216]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b78:	4b34      	ldr	r3, [pc, #208]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b7e:	4b33      	ldr	r3, [pc, #204]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b84:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b86:	4b31      	ldr	r3, [pc, #196]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001b92:	4b2e      	ldr	r3, [pc, #184]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b94:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b98:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b9a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001ba6:	4829      	ldr	r0, [pc, #164]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001ba8:	f000 fb44 	bl	8002234 <HAL_DMA_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001bb2:	f7ff ff49 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a24      	ldr	r2, [pc, #144]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001bba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bbc:	4a23      	ldr	r2, [pc, #140]	@ (8001c4c <HAL_UART_MspInit+0x164>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bc2:	e038      	b.n	8001c36 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a22      	ldr	r2, [pc, #136]	@ (8001c54 <HAL_UART_MspInit+0x16c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d133      	bne.n	8001c36 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b15      	ldr	r3, [pc, #84]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a14      	ldr	r2, [pc, #80]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_UART_MspInit+0x15c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c06:	230c      	movs	r3, #12
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c16:	2307      	movs	r3, #7
 8001c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4809      	ldr	r0, [pc, #36]	@ (8001c48 <HAL_UART_MspInit+0x160>)
 8001c22:	f000 ff09 	bl	8002a38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	2026      	movs	r0, #38	@ 0x26
 8001c2c:	f000 facb 	bl	80021c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c30:	2026      	movs	r0, #38	@ 0x26
 8001c32:	f000 fae4 	bl	80021fe <HAL_NVIC_EnableIRQ>
}
 8001c36:	bf00      	nop
 8001c38:	3730      	adds	r7, #48	@ 0x30
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40011000 	.word	0x40011000
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000
 8001c4c:	200002c8 	.word	0x200002c8
 8001c50:	40026440 	.word	0x40026440
 8001c54:	40004400 	.word	0x40004400

08001c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c5c:	bf00      	nop
 8001c5e:	e7fd      	b.n	8001c5c <NMI_Handler+0x4>

08001c60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <HardFault_Handler+0x4>

08001c68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	bf00      	nop
 8001c6e:	e7fd      	b.n	8001c6c <MemManage_Handler+0x4>

08001c70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c74:	bf00      	nop
 8001c76:	e7fd      	b.n	8001c74 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	bf00      	nop
 8001c7e:	e7fd      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cae:	f000 f96b 	bl	8001f88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cbc:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <USART2_IRQHandler+0x10>)
 8001cbe:	f002 f8cf 	bl	8003e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	20000280 	.word	0x20000280

08001ccc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cd0:	4802      	ldr	r0, [pc, #8]	@ (8001cdc <DMA2_Stream2_IRQHandler+0x10>)
 8001cd2:	f000 fc47 	bl	8002564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	200002c8 	.word	0x200002c8

08001ce0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return 1;
 8001ce4:	2301      	movs	r3, #1
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <_kill>:

int _kill(int pid, int sig)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cfa:	f004 f9ff 	bl	80060fc <__errno>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2216      	movs	r2, #22
 8001d02:	601a      	str	r2, [r3, #0]
  return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_exit>:

void _exit (int status)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d18:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ffe7 	bl	8001cf0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d22:	bf00      	nop
 8001d24:	e7fd      	b.n	8001d22 <_exit+0x12>

08001d26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e00a      	b.n	8001d4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d38:	f3af 8000 	nop.w
 8001d3c:	4601      	mov	r1, r0
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	1c5a      	adds	r2, r3, #1
 8001d42:	60ba      	str	r2, [r7, #8]
 8001d44:	b2ca      	uxtb	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbf0      	blt.n	8001d38 <_read+0x12>
  }

  return len;
 8001d56:	687b      	ldr	r3, [r7, #4]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
 8001d70:	e009      	b.n	8001d86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	60ba      	str	r2, [r7, #8]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3301      	adds	r3, #1
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	697a      	ldr	r2, [r7, #20]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	dbf1      	blt.n	8001d72 <_write+0x12>
  }
  return len;
 8001d8e:	687b      	ldr	r3, [r7, #4]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_close>:

int _close(int file)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001da0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001dc2:	2300      	movs	r3, #0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <_isatty>:

int _isatty(int file)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e08:	4a14      	ldr	r2, [pc, #80]	@ (8001e5c <_sbrk+0x5c>)
 8001e0a:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <_sbrk+0x60>)
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e14:	4b13      	ldr	r3, [pc, #76]	@ (8001e64 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d102      	bne.n	8001e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e1c:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <_sbrk+0x64>)
 8001e1e:	4a12      	ldr	r2, [pc, #72]	@ (8001e68 <_sbrk+0x68>)
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e22:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <_sbrk+0x64>)
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4413      	add	r3, r2
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d207      	bcs.n	8001e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e30:	f004 f964 	bl	80060fc <__errno>
 8001e34:	4603      	mov	r3, r0
 8001e36:	220c      	movs	r2, #12
 8001e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	e009      	b.n	8001e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e40:	4b08      	ldr	r3, [pc, #32]	@ (8001e64 <_sbrk+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e46:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <_sbrk+0x64>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	4a05      	ldr	r2, [pc, #20]	@ (8001e64 <_sbrk+0x64>)
 8001e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20018000 	.word	0x20018000
 8001e60:	00000400 	.word	0x00000400
 8001e64:	2000064c 	.word	0x2000064c
 8001e68:	200007a0 	.word	0x200007a0

08001e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e70:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <SystemInit+0x20>)
 8001e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e76:	4a05      	ldr	r2, [pc, #20]	@ (8001e8c <SystemInit+0x20>)
 8001e78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e94:	f7ff ffea 	bl	8001e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e98:	480c      	ldr	r0, [pc, #48]	@ (8001ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9a:	490d      	ldr	r1, [pc, #52]	@ (8001ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea0:	e002      	b.n	8001ea8 <LoopCopyDataInit>

08001ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ea6:	3304      	adds	r3, #4

08001ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eac:	d3f9      	bcc.n	8001ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eae:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8001edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb4:	e001      	b.n	8001eba <LoopFillZerobss>

08001eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb8:	3204      	adds	r2, #4

08001eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ebc:	d3fb      	bcc.n	8001eb6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f004 f923 	bl	8006108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff f9cb 	bl	800125c <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001ed4:	0800a65c 	.word	0x0800a65c
  ldr r2, =_sbss
 8001ed8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001edc:	200007a0 	.word	0x200007a0

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0d      	ldr	r2, [pc, #52]	@ (8001f24 <HAL_Init+0x40>)
 8001eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <HAL_Init+0x40>)
 8001efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a07      	ldr	r2, [pc, #28]	@ (8001f24 <HAL_Init+0x40>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f000 f94f 	bl	80021b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f12:	200f      	movs	r0, #15
 8001f14:	f000 f808 	bl	8001f28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f18:	f7ff fd9c 	bl	8001a54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023c00 	.word	0x40023c00

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x54>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b12      	ldr	r3, [pc, #72]	@ (8001f80 <HAL_InitTick+0x58>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f967 	bl	800221a <HAL_SYSTICK_Config>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e00e      	b.n	8001f74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b0f      	cmp	r3, #15
 8001f5a:	d80a      	bhi.n	8001f72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	6879      	ldr	r1, [r7, #4]
 8001f60:	f04f 30ff 	mov.w	r0, #4294967295
 8001f64:	f000 f92f 	bl	80021c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f68:	4a06      	ldr	r2, [pc, #24]	@ (8001f84 <HAL_InitTick+0x5c>)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20000000 	.word	0x20000000
 8001f80:	20000008 	.word	0x20000008
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <HAL_IncTick+0x20>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_IncTick+0x24>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4413      	add	r3, r2
 8001f98:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <HAL_IncTick+0x24>)
 8001f9a:	6013      	str	r3, [r2, #0]
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	20000650 	.word	0x20000650

08001fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fb4:	4b03      	ldr	r3, [pc, #12]	@ (8001fc4 <HAL_GetTick+0x14>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	20000650 	.word	0x20000650

08001fc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe0:	d005      	beq.n	8001fee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800200c <HAL_Delay+0x44>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4413      	add	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fee:	bf00      	nop
 8001ff0:	f7ff ffde 	bl	8001fb0 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d8f7      	bhi.n	8001ff0 <HAL_Delay+0x28>
  {
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000008 	.word	0x20000008

08002010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002020:	4b0c      	ldr	r3, [pc, #48]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002026:	68ba      	ldr	r2, [r7, #8]
 8002028:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800202c:	4013      	ands	r3, r2
 800202e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002038:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800203c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <__NVIC_SetPriorityGrouping+0x44>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	60d3      	str	r3, [r2, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000ed00 	.word	0xe000ed00

08002058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800205c:	4b04      	ldr	r3, [pc, #16]	@ (8002070 <__NVIC_GetPriorityGrouping+0x18>)
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0307 	and.w	r3, r3, #7
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	e000ed00 	.word	0xe000ed00

08002074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	2b00      	cmp	r3, #0
 8002084:	db0b      	blt.n	800209e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	4907      	ldr	r1, [pc, #28]	@ (80020ac <__NVIC_EnableIRQ+0x38>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	095b      	lsrs	r3, r3, #5
 8002094:	2001      	movs	r0, #1
 8002096:	fa00 f202 	lsl.w	r2, r0, r2
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800217c:	d301      	bcc.n	8002182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217e:	2301      	movs	r3, #1
 8002180:	e00f      	b.n	80021a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002182:	4a0a      	ldr	r2, [pc, #40]	@ (80021ac <SysTick_Config+0x40>)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3b01      	subs	r3, #1
 8002188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800218a:	210f      	movs	r1, #15
 800218c:	f04f 30ff 	mov.w	r0, #4294967295
 8002190:	f7ff ff8e 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002194:	4b05      	ldr	r3, [pc, #20]	@ (80021ac <SysTick_Config+0x40>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800219a:	4b04      	ldr	r3, [pc, #16]	@ (80021ac <SysTick_Config+0x40>)
 800219c:	2207      	movs	r2, #7
 800219e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	e000e010 	.word	0xe000e010

080021b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff ff29 	bl	8002010 <__NVIC_SetPriorityGrouping>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b086      	sub	sp, #24
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	4603      	mov	r3, r0
 80021ce:	60b9      	str	r1, [r7, #8]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d8:	f7ff ff3e 	bl	8002058 <__NVIC_GetPriorityGrouping>
 80021dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	68b9      	ldr	r1, [r7, #8]
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff ff8e 	bl	8002104 <NVIC_EncodePriority>
 80021e8:	4602      	mov	r2, r0
 80021ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ee:	4611      	mov	r1, r2
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff ff5d 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b082      	sub	sp, #8
 8002202:	af00      	add	r7, sp, #0
 8002204:	4603      	mov	r3, r0
 8002206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff31 	bl	8002074 <__NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff ffa2 	bl	800216c <SysTick_Config>
 8002228:	4603      	mov	r3, r0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002240:	f7ff feb6 	bl	8001fb0 <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e099      	b.n	8002384 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2202      	movs	r2, #2
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0201 	bic.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002270:	e00f      	b.n	8002292 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002272:	f7ff fe9d 	bl	8001fb0 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b05      	cmp	r3, #5
 800227e:	d908      	bls.n	8002292 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2220      	movs	r2, #32
 8002284:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2203      	movs	r2, #3
 800228a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e078      	b.n	8002384 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e8      	bne.n	8002272 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022a8:	697a      	ldr	r2, [r7, #20]
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_DMA_Init+0x158>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	4313      	orrs	r3, r2
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	697a      	ldr	r2, [r7, #20]
 8002302:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f023 0307 	bic.w	r3, r3, #7
 8002312:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	4313      	orrs	r3, r2
 800231c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	2b04      	cmp	r3, #4
 8002324:	d117      	bne.n	8002356 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4313      	orrs	r3, r2
 800232e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 fb01 	bl	8002940 <DMA_CheckFifoParam>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2240      	movs	r2, #64	@ 0x40
 8002348:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002352:	2301      	movs	r3, #1
 8002354:	e016      	b.n	8002384 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fab8 	bl	80028d4 <DMA_CalcBaseAndBitshift>
 8002364:	4603      	mov	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800236c:	223f      	movs	r2, #63	@ 0x3f
 800236e:	409a      	lsls	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	f010803f 	.word	0xf010803f

08002390 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_DMA_Start_IT+0x26>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e040      	b.n	8002438 <HAL_DMA_Start_IT+0xa8>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d12f      	bne.n	800242a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2202      	movs	r2, #2
 80023ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 fa4a 	bl	8002878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e8:	223f      	movs	r2, #63	@ 0x3f
 80023ea:	409a      	lsls	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0216 	orr.w	r2, r2, #22
 80023fe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0208 	orr.w	r2, r2, #8
 8002416:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e005      	b.n	8002436 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002432:	2302      	movs	r3, #2
 8002434:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002436:	7dfb      	ldrb	r3, [r7, #23]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800244e:	f7ff fdaf 	bl	8001fb0 <HAL_GetTick>
 8002452:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d008      	beq.n	8002472 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2280      	movs	r2, #128	@ 0x80
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e052      	b.n	8002518 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 0216 	bic.w	r2, r2, #22
 8002480:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002490:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d103      	bne.n	80024a2 <HAL_DMA_Abort+0x62>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d007      	beq.n	80024b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0208 	bic.w	r2, r2, #8
 80024b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c2:	e013      	b.n	80024ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024c4:	f7ff fd74 	bl	8001fb0 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b05      	cmp	r3, #5
 80024d0:	d90c      	bls.n	80024ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2220      	movs	r2, #32
 80024d6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2203      	movs	r2, #3
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e015      	b.n	8002518 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1e4      	bne.n	80024c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024fe:	223f      	movs	r2, #63	@ 0x3f
 8002500:	409a      	lsls	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d004      	beq.n	800253e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2280      	movs	r2, #128	@ 0x80
 8002538:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00c      	b.n	8002558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2205      	movs	r2, #5
 8002542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0201 	bic.w	r2, r2, #1
 8002554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002570:	4b8e      	ldr	r3, [pc, #568]	@ (80027ac <HAL_DMA_IRQHandler+0x248>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a8e      	ldr	r2, [pc, #568]	@ (80027b0 <HAL_DMA_IRQHandler+0x24c>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0a9b      	lsrs	r3, r3, #10
 800257c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258e:	2208      	movs	r2, #8
 8002590:	409a      	lsls	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	4013      	ands	r3, r2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d01a      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d013      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0204 	bic.w	r2, r2, #4
 80025b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025bc:	2208      	movs	r2, #8
 80025be:	409a      	lsls	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025c8:	f043 0201 	orr.w	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	2201      	movs	r2, #1
 80025d6:	409a      	lsls	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d012      	beq.n	8002606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00b      	beq.n	8002606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800260a:	2204      	movs	r2, #4
 800260c:	409a      	lsls	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d012      	beq.n	800263c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	2204      	movs	r2, #4
 800262a:	409a      	lsls	r2, r3
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002634:	f043 0204 	orr.w	r2, r3, #4
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	2210      	movs	r2, #16
 8002642:	409a      	lsls	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	4013      	ands	r3, r2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d043      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	2b00      	cmp	r3, #0
 8002658:	d03c      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	2210      	movs	r2, #16
 8002660:	409a      	lsls	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d018      	beq.n	80026a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d108      	bne.n	8002694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d024      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	4798      	blx	r3
 8002692:	e01f      	b.n	80026d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01b      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	4798      	blx	r3
 80026a4:	e016      	b.n	80026d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d107      	bne.n	80026c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 0208 	bic.w	r2, r2, #8
 80026c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d8:	2220      	movs	r2, #32
 80026da:	409a      	lsls	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4013      	ands	r3, r2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 808f 	beq.w	8002804 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0310 	and.w	r3, r3, #16
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 8087 	beq.w	8002804 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	2220      	movs	r2, #32
 80026fc:	409a      	lsls	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b05      	cmp	r3, #5
 800270c:	d136      	bne.n	800277c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0216 	bic.w	r2, r2, #22
 800271c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800272c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	2b00      	cmp	r3, #0
 8002734:	d103      	bne.n	800273e <HAL_DMA_IRQHandler+0x1da>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0208 	bic.w	r2, r2, #8
 800274c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002752:	223f      	movs	r2, #63	@ 0x3f
 8002754:	409a      	lsls	r2, r3
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800276e:	2b00      	cmp	r3, #0
 8002770:	d07e      	beq.n	8002870 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	4798      	blx	r3
        }
        return;
 800277a:	e079      	b.n	8002870 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01d      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10d      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	2b00      	cmp	r3, #0
 800279e:	d031      	beq.n	8002804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	4798      	blx	r3
 80027a8:	e02c      	b.n	8002804 <HAL_DMA_IRQHandler+0x2a0>
 80027aa:	bf00      	nop
 80027ac:	20000000 	.word	0x20000000
 80027b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d023      	beq.n	8002804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	4798      	blx	r3
 80027c4:	e01e      	b.n	8002804 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10f      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 0210 	bic.w	r2, r2, #16
 80027e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002808:	2b00      	cmp	r3, #0
 800280a:	d032      	beq.n	8002872 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d022      	beq.n	800285e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2205      	movs	r2, #5
 800281c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	3301      	adds	r3, #1
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	429a      	cmp	r2, r3
 800283a:	d307      	bcc.n	800284c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f2      	bne.n	8002830 <HAL_DMA_IRQHandler+0x2cc>
 800284a:	e000      	b.n	800284e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800284c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
 800286e:	e000      	b.n	8002872 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002870:	bf00      	nop
    }
  }
}
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
 8002884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2b40      	cmp	r3, #64	@ 0x40
 80028a4:	d108      	bne.n	80028b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028b6:	e007      	b.n	80028c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68ba      	ldr	r2, [r7, #8]
 80028be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	60da      	str	r2, [r3, #12]
}
 80028c8:	bf00      	nop
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	3b10      	subs	r3, #16
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <DMA_CalcBaseAndBitshift+0x64>)
 80028e6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ea:	091b      	lsrs	r3, r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ee:	4a13      	ldr	r2, [pc, #76]	@ (800293c <DMA_CalcBaseAndBitshift+0x68>)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d909      	bls.n	8002916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800290a:	f023 0303 	bic.w	r3, r3, #3
 800290e:	1d1a      	adds	r2, r3, #4
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	659a      	str	r2, [r3, #88]	@ 0x58
 8002914:	e007      	b.n	8002926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800291e:	f023 0303 	bic.w	r3, r3, #3
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800292a:	4618      	mov	r0, r3
 800292c:	3714      	adds	r7, #20
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	aaaaaaab 	.word	0xaaaaaaab
 800293c:	0800a1f8 	.word	0x0800a1f8

08002940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b085      	sub	sp, #20
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d11f      	bne.n	800299a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b03      	cmp	r3, #3
 800295e:	d856      	bhi.n	8002a0e <DMA_CheckFifoParam+0xce>
 8002960:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <DMA_CheckFifoParam+0x28>)
 8002962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002966:	bf00      	nop
 8002968:	08002979 	.word	0x08002979
 800296c:	0800298b 	.word	0x0800298b
 8002970:	08002979 	.word	0x08002979
 8002974:	08002a0f 	.word	0x08002a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d046      	beq.n	8002a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e043      	b.n	8002a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002992:	d140      	bne.n	8002a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002998:	e03d      	b.n	8002a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80029a2:	d121      	bne.n	80029e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d837      	bhi.n	8002a1a <DMA_CheckFifoParam+0xda>
 80029aa:	a201      	add	r2, pc, #4	@ (adr r2, 80029b0 <DMA_CheckFifoParam+0x70>)
 80029ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b0:	080029c1 	.word	0x080029c1
 80029b4:	080029c7 	.word	0x080029c7
 80029b8:	080029c1 	.word	0x080029c1
 80029bc:	080029d9 	.word	0x080029d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	73fb      	strb	r3, [r7, #15]
      break;
 80029c4:	e030      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d025      	beq.n	8002a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d6:	e022      	b.n	8002a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029dc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029e0:	d11f      	bne.n	8002a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029e6:	e01c      	b.n	8002a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d903      	bls.n	80029f6 <DMA_CheckFifoParam+0xb6>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d003      	beq.n	80029fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029f4:	e018      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      break;
 80029fa:	e015      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00e      	beq.n	8002a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a0c:	e00b      	b.n	8002a26 <DMA_CheckFifoParam+0xe6>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e00a      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e008      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e006      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1a:	bf00      	nop
 8002a1c:	e004      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
 8002a20:	e002      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a22:	bf00      	nop
 8002a24:	e000      	b.n	8002a28 <DMA_CheckFifoParam+0xe8>
      break;
 8002a26:	bf00      	nop
    }
  } 
  
  return status; 
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop

08002a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	@ 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61fb      	str	r3, [r7, #28]
 8002a52:	e159      	b.n	8002d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a54:	2201      	movs	r2, #1
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4013      	ands	r3, r2
 8002a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f040 8148 	bne.w	8002d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d005      	beq.n	8002a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d130      	bne.n	8002aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	091b      	lsrs	r3, r3, #4
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	69b9      	ldr	r1, [r7, #24]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80a2 	beq.w	8002d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	4b57      	ldr	r3, [pc, #348]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc6:	4a56      	ldr	r2, [pc, #344]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bce:	4b54      	ldr	r3, [pc, #336]	@ (8002d20 <HAL_GPIO_Init+0x2e8>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd6:	60fb      	str	r3, [r7, #12]
 8002bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bda:	4a52      	ldr	r2, [pc, #328]	@ (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a49      	ldr	r2, [pc, #292]	@ (8002d28 <HAL_GPIO_Init+0x2f0>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d019      	beq.n	8002c3a <HAL_GPIO_Init+0x202>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a48      	ldr	r2, [pc, #288]	@ (8002d2c <HAL_GPIO_Init+0x2f4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0x1fe>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a47      	ldr	r2, [pc, #284]	@ (8002d30 <HAL_GPIO_Init+0x2f8>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d00d      	beq.n	8002c32 <HAL_GPIO_Init+0x1fa>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a46      	ldr	r2, [pc, #280]	@ (8002d34 <HAL_GPIO_Init+0x2fc>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d007      	beq.n	8002c2e <HAL_GPIO_Init+0x1f6>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a45      	ldr	r2, [pc, #276]	@ (8002d38 <HAL_GPIO_Init+0x300>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d101      	bne.n	8002c2a <HAL_GPIO_Init+0x1f2>
 8002c26:	2304      	movs	r3, #4
 8002c28:	e008      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c2a:	2307      	movs	r3, #7
 8002c2c:	e006      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e004      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c32:	2302      	movs	r3, #2
 8002c34:	e002      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <HAL_GPIO_Init+0x204>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	69fa      	ldr	r2, [r7, #28]
 8002c3e:	f002 0203 	and.w	r2, r2, #3
 8002c42:	0092      	lsls	r2, r2, #2
 8002c44:	4093      	lsls	r3, r2
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c4c:	4935      	ldr	r1, [pc, #212]	@ (8002d24 <HAL_GPIO_Init+0x2ec>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	089b      	lsrs	r3, r3, #2
 8002c52:	3302      	adds	r3, #2
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5a:	4b38      	ldr	r3, [pc, #224]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	43db      	mvns	r3, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4013      	ands	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c7e:	4a2f      	ldr	r2, [pc, #188]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c84:	4b2d      	ldr	r3, [pc, #180]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca8:	4a24      	ldr	r2, [pc, #144]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cae:	4b23      	ldr	r3, [pc, #140]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd8:	4b18      	ldr	r3, [pc, #96]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8002d3c <HAL_GPIO_Init+0x304>)
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	3301      	adds	r3, #1
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	2b0f      	cmp	r3, #15
 8002d0c:	f67f aea2 	bls.w	8002a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d10:	bf00      	nop
 8002d12:	bf00      	nop
 8002d14:	3724      	adds	r7, #36	@ 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40013800 	.word	0x40013800
 8002d28:	40020000 	.word	0x40020000
 8002d2c:	40020400 	.word	0x40020400
 8002d30:	40020800 	.word	0x40020800
 8002d34:	40020c00 	.word	0x40020c00
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	40013c00 	.word	0x40013c00

08002d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b085      	sub	sp, #20
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691a      	ldr	r2, [r3, #16]
 8002d50:	887b      	ldrh	r3, [r7, #2]
 8002d52:	4013      	ands	r3, r2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
 8002d5c:	e001      	b.n	8002d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3714      	adds	r7, #20
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	807b      	strh	r3, [r7, #2]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d80:	787b      	ldrb	r3, [r7, #1]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d86:	887a      	ldrh	r2, [r7, #2]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d8c:	e003      	b.n	8002d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d8e:	887b      	ldrh	r3, [r7, #2]
 8002d90:	041a      	lsls	r2, r3, #16
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	619a      	str	r2, [r3, #24]
}
 8002d96:	bf00      	nop
 8002d98:	370c      	adds	r7, #12
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e267      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0301 	and.w	r3, r3, #1
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d075      	beq.n	8002eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dc2:	4b88      	ldr	r3, [pc, #544]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 030c 	and.w	r3, r3, #12
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	d00c      	beq.n	8002de8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dce:	4b85      	ldr	r3, [pc, #532]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dd6:	2b08      	cmp	r3, #8
 8002dd8:	d112      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dda:	4b82      	ldr	r3, [pc, #520]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002de6:	d10b      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002de8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d05b      	beq.n	8002eac <HAL_RCC_OscConfig+0x108>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d157      	bne.n	8002eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e242      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d106      	bne.n	8002e18 <HAL_RCC_OscConfig+0x74>
 8002e0a:	4b76      	ldr	r3, [pc, #472]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a75      	ldr	r2, [pc, #468]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e01d      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x98>
 8002e22:	4b70      	ldr	r3, [pc, #448]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a6f      	ldr	r2, [pc, #444]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a6c      	ldr	r2, [pc, #432]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0xb0>
 8002e3c:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a68      	ldr	r2, [pc, #416]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b66      	ldr	r3, [pc, #408]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d013      	beq.n	8002e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5c:	f7ff f8a8 	bl	8001fb0 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e64:	f7ff f8a4 	bl	8001fb0 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e207      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	4b5b      	ldr	r3, [pc, #364]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0xc0>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e84:	f7ff f894 	bl	8001fb0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7ff f890 	bl	8001fb0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e1f3      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	4b51      	ldr	r3, [pc, #324]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1f0      	bne.n	8002e8c <HAL_RCC_OscConfig+0xe8>
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d063      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eba:	4b4a      	ldr	r3, [pc, #296]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	f003 030c 	and.w	r3, r3, #12
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00b      	beq.n	8002ede <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ec6:	4b47      	ldr	r3, [pc, #284]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d11c      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed2:	4b44      	ldr	r3, [pc, #272]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d116      	bne.n	8002f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ede:	4b41      	ldr	r3, [pc, #260]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d001      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e1c7      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4937      	ldr	r1, [pc, #220]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	e03a      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d020      	beq.n	8002f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f14:	4b34      	ldr	r3, [pc, #208]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1a:	f7ff f849 	bl	8001fb0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f22:	f7ff f845 	bl	8001fb0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e1a8      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	4b2b      	ldr	r3, [pc, #172]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f40:	4b28      	ldr	r3, [pc, #160]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4925      	ldr	r1, [pc, #148]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	600b      	str	r3, [r1, #0]
 8002f54:	e015      	b.n	8002f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f56:	4b24      	ldr	r3, [pc, #144]	@ (8002fe8 <HAL_RCC_OscConfig+0x244>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f828 	bl	8001fb0 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7ff f824 	bl	8001fb0 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e187      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	4b1b      	ldr	r3, [pc, #108]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d036      	beq.n	8002ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f96:	4b15      	ldr	r3, [pc, #84]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002f98:	2201      	movs	r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9c:	f7ff f808 	bl	8001fb0 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fa4:	f7ff f804 	bl	8001fb0 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e167      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x200>
 8002fc2:	e01b      	b.n	8002ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fc4:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <HAL_RCC_OscConfig+0x248>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fff1 	bl	8001fb0 <HAL_GetTick>
 8002fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	e00e      	b.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd2:	f7fe ffed 	bl	8001fb0 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d907      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e150      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8002fe4:	40023800 	.word	0x40023800
 8002fe8:	42470000 	.word	0x42470000
 8002fec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff0:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1ea      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0304 	and.w	r3, r3, #4
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 8097 	beq.w	8003138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800300e:	4b81      	ldr	r3, [pc, #516]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800301a:	2300      	movs	r3, #0
 800301c:	60bb      	str	r3, [r7, #8]
 800301e:	4b7d      	ldr	r3, [pc, #500]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003022:	4a7c      	ldr	r2, [pc, #496]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003028:	6413      	str	r3, [r2, #64]	@ 0x40
 800302a:	4b7a      	ldr	r3, [pc, #488]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003032:	60bb      	str	r3, [r7, #8]
 8003034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003036:	2301      	movs	r3, #1
 8003038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800303a:	4b77      	ldr	r3, [pc, #476]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d118      	bne.n	8003078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003046:	4b74      	ldr	r3, [pc, #464]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a73      	ldr	r2, [pc, #460]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800304c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003052:	f7fe ffad 	bl	8001fb0 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003058:	e008      	b.n	800306c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800305a:	f7fe ffa9 	bl	8001fb0 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b02      	cmp	r3, #2
 8003066:	d901      	bls.n	800306c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	e10c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	4b6a      	ldr	r3, [pc, #424]	@ (8003218 <HAL_RCC_OscConfig+0x474>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0f0      	beq.n	800305a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x2ea>
 8003080:	4b64      	ldr	r3, [pc, #400]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003084:	4a63      	ldr	r2, [pc, #396]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003086:	f043 0301 	orr.w	r3, r3, #1
 800308a:	6713      	str	r3, [r2, #112]	@ 0x70
 800308c:	e01c      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	2b05      	cmp	r3, #5
 8003094:	d10c      	bne.n	80030b0 <HAL_RCC_OscConfig+0x30c>
 8003096:	4b5f      	ldr	r3, [pc, #380]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800309a:	4a5e      	ldr	r2, [pc, #376]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800309c:	f043 0304 	orr.w	r3, r3, #4
 80030a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80030a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ae:	e00b      	b.n	80030c8 <HAL_RCC_OscConfig+0x324>
 80030b0:	4b58      	ldr	r3, [pc, #352]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b4:	4a57      	ldr	r2, [pc, #348]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030b6:	f023 0301 	bic.w	r3, r3, #1
 80030ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80030bc:	4b55      	ldr	r3, [pc, #340]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c0:	4a54      	ldr	r2, [pc, #336]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030c2:	f023 0304 	bic.w	r3, r3, #4
 80030c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d015      	beq.n	80030fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030d0:	f7fe ff6e 	bl	8001fb0 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030d8:	f7fe ff6a 	bl	8001fb0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e0cb      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ee:	4b49      	ldr	r3, [pc, #292]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80030f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d0ee      	beq.n	80030d8 <HAL_RCC_OscConfig+0x334>
 80030fa:	e014      	b.n	8003126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7fe ff58 	bl	8001fb0 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe ff54 	bl	8001fb0 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0b5      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311a:	4b3e      	ldr	r3, [pc, #248]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1ee      	bne.n	8003104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003126:	7dfb      	ldrb	r3, [r7, #23]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d105      	bne.n	8003138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312c:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 800312e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003130:	4a38      	ldr	r2, [pc, #224]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80a1 	beq.w	8003284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b08      	cmp	r3, #8
 800314c:	d05c      	beq.n	8003208 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d141      	bne.n	80031da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe ff28 	bl	8001fb0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe ff24 	bl	8001fb0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e087      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	4b27      	ldr	r3, [pc, #156]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69da      	ldr	r2, [r3, #28]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	019b      	lsls	r3, r3, #6
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	3b01      	subs	r3, #1
 800319c:	041b      	lsls	r3, r3, #16
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a4:	061b      	lsls	r3, r3, #24
 80031a6:	491b      	ldr	r1, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031ac:	4b1b      	ldr	r3, [pc, #108]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b2:	f7fe fefd 	bl	8001fb0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031ba:	f7fe fef9 	bl	8001fb0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e05c      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	4b11      	ldr	r3, [pc, #68]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d0f0      	beq.n	80031ba <HAL_RCC_OscConfig+0x416>
 80031d8:	e054      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031da:	4b10      	ldr	r3, [pc, #64]	@ (800321c <HAL_RCC_OscConfig+0x478>)
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e0:	f7fe fee6 	bl	8001fb0 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fee2 	bl	8001fb0 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e045      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCC_OscConfig+0x470>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x444>
 8003206:	e03d      	b.n	8003284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	699b      	ldr	r3, [r3, #24]
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e038      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
 8003214:	40023800 	.word	0x40023800
 8003218:	40007000 	.word	0x40007000
 800321c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x4ec>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d028      	beq.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d121      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003266:	085b      	lsrs	r3, r3, #1
 8003268:	3b01      	subs	r3, #1
 800326a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e000      	b.n	8003286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3718      	adds	r7, #24
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cc      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a8:	4b68      	ldr	r3, [pc, #416]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0307 	and.w	r3, r3, #7
 80032b0:	683a      	ldr	r2, [r7, #0]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	d90c      	bls.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b6:	4b65      	ldr	r3, [pc, #404]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032be:	4b63      	ldr	r3, [pc, #396]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d001      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e0b8      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d020      	beq.n	800331e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032e8:	4b59      	ldr	r3, [pc, #356]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	4a58      	ldr	r2, [pc, #352]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003300:	4b53      	ldr	r3, [pc, #332]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800330a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800330c:	4b50      	ldr	r3, [pc, #320]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	494d      	ldr	r1, [pc, #308]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	4313      	orrs	r3, r2
 800331c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d044      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003332:	4b47      	ldr	r3, [pc, #284]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d119      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e07f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800334e:	2b03      	cmp	r3, #3
 8003350:	d107      	bne.n	8003362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003352:	4b3f      	ldr	r3, [pc, #252]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003362:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e067      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f023 0203 	bic.w	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4934      	ldr	r1, [pc, #208]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	4313      	orrs	r3, r2
 8003382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003384:	f7fe fe14 	bl	8001fb0 <HAL_GetTick>
 8003388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800338a:	e00a      	b.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fe10 	bl	8001fb0 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339a:	4293      	cmp	r3, r2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e04f      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	f003 020c 	and.w	r2, r3, #12
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d1eb      	bne.n	800338c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b4:	4b25      	ldr	r3, [pc, #148]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d20c      	bcs.n	80033dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b22      	ldr	r3, [pc, #136]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	683a      	ldr	r2, [r7, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e032      	b.n	8003442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d008      	beq.n	80033fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033e8:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4916      	ldr	r1, [pc, #88]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	2b00      	cmp	r3, #0
 8003404:	d009      	beq.n	800341a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	00db      	lsls	r3, r3, #3
 8003414:	490e      	ldr	r1, [pc, #56]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	4313      	orrs	r3, r2
 8003418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341a:	f000 f821 	bl	8003460 <HAL_RCC_GetSysClockFreq>
 800341e:	4602      	mov	r2, r0
 8003420:	4b0b      	ldr	r3, [pc, #44]	@ (8003450 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	490a      	ldr	r1, [pc, #40]	@ (8003454 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	5ccb      	ldrb	r3, [r1, r3]
 800342e:	fa22 f303 	lsr.w	r3, r2, r3
 8003432:	4a09      	ldr	r2, [pc, #36]	@ (8003458 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003436:	4b09      	ldr	r3, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fe fd74 	bl	8001f28 <HAL_InitTick>

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023c00 	.word	0x40023c00
 8003450:	40023800 	.word	0x40023800
 8003454:	0800a1e0 	.word	0x0800a1e0
 8003458:	20000000 	.word	0x20000000
 800345c:	20000004 	.word	0x20000004

08003460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003464:	b090      	sub	sp, #64	@ 0x40
 8003466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800346c:	2300      	movs	r3, #0
 800346e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003474:	2300      	movs	r3, #0
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003478:	4b59      	ldr	r3, [pc, #356]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b08      	cmp	r3, #8
 8003482:	d00d      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003484:	2b08      	cmp	r3, #8
 8003486:	f200 80a1 	bhi.w	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
 800348a:	2b00      	cmp	r3, #0
 800348c:	d002      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x34>
 800348e:	2b04      	cmp	r3, #4
 8003490:	d003      	beq.n	800349a <HAL_RCC_GetSysClockFreq+0x3a>
 8003492:	e09b      	b.n	80035cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003494:	4b53      	ldr	r3, [pc, #332]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003496:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003498:	e09b      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800349a:	4b53      	ldr	r3, [pc, #332]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800349c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800349e:	e098      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034a0:	4b4f      	ldr	r3, [pc, #316]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034aa:	4b4d      	ldr	r3, [pc, #308]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d028      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034b6:	4b4a      	ldr	r3, [pc, #296]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	099b      	lsrs	r3, r3, #6
 80034bc:	2200      	movs	r2, #0
 80034be:	623b      	str	r3, [r7, #32]
 80034c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034c8:	2100      	movs	r1, #0
 80034ca:	4b47      	ldr	r3, [pc, #284]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034cc:	fb03 f201 	mul.w	r2, r3, r1
 80034d0:	2300      	movs	r3, #0
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	4a43      	ldr	r2, [pc, #268]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034da:	fba0 1202 	umull	r1, r2, r0, r2
 80034de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034e0:	460a      	mov	r2, r1
 80034e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034e6:	4413      	add	r3, r2
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ec:	2200      	movs	r2, #0
 80034ee:	61bb      	str	r3, [r7, #24]
 80034f0:	61fa      	str	r2, [r7, #28]
 80034f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034fa:	f7fd fbcd 	bl	8000c98 <__aeabi_uldivmod>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4613      	mov	r3, r2
 8003504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003506:	e053      	b.n	80035b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003508:	4b35      	ldr	r3, [pc, #212]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	099b      	lsrs	r3, r3, #6
 800350e:	2200      	movs	r2, #0
 8003510:	613b      	str	r3, [r7, #16]
 8003512:	617a      	str	r2, [r7, #20]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800351a:	f04f 0b00 	mov.w	fp, #0
 800351e:	4652      	mov	r2, sl
 8003520:	465b      	mov	r3, fp
 8003522:	f04f 0000 	mov.w	r0, #0
 8003526:	f04f 0100 	mov.w	r1, #0
 800352a:	0159      	lsls	r1, r3, #5
 800352c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003530:	0150      	lsls	r0, r2, #5
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	ebb2 080a 	subs.w	r8, r2, sl
 800353a:	eb63 090b 	sbc.w	r9, r3, fp
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800354a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800354e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003552:	ebb2 0408 	subs.w	r4, r2, r8
 8003556:	eb63 0509 	sbc.w	r5, r3, r9
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	00eb      	lsls	r3, r5, #3
 8003564:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003568:	00e2      	lsls	r2, r4, #3
 800356a:	4614      	mov	r4, r2
 800356c:	461d      	mov	r5, r3
 800356e:	eb14 030a 	adds.w	r3, r4, sl
 8003572:	603b      	str	r3, [r7, #0]
 8003574:	eb45 030b 	adc.w	r3, r5, fp
 8003578:	607b      	str	r3, [r7, #4]
 800357a:	f04f 0200 	mov.w	r2, #0
 800357e:	f04f 0300 	mov.w	r3, #0
 8003582:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003586:	4629      	mov	r1, r5
 8003588:	028b      	lsls	r3, r1, #10
 800358a:	4621      	mov	r1, r4
 800358c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003590:	4621      	mov	r1, r4
 8003592:	028a      	lsls	r2, r1, #10
 8003594:	4610      	mov	r0, r2
 8003596:	4619      	mov	r1, r3
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	2200      	movs	r2, #0
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	60fa      	str	r2, [r7, #12]
 80035a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035a4:	f7fd fb78 	bl	8000c98 <__aeabi_uldivmod>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4613      	mov	r3, r2
 80035ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035b0:	4b0b      	ldr	r3, [pc, #44]	@ (80035e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	3301      	adds	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035ca:	e002      	b.n	80035d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035cc:	4b05      	ldr	r3, [pc, #20]	@ (80035e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3740      	adds	r7, #64	@ 0x40
 80035d8:	46bd      	mov	sp, r7
 80035da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	00f42400 	.word	0x00f42400
 80035e8:	017d7840 	.word	0x017d7840

080035ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f0:	4b03      	ldr	r3, [pc, #12]	@ (8003600 <HAL_RCC_GetHCLKFreq+0x14>)
 80035f2:	681b      	ldr	r3, [r3, #0]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000000 	.word	0x20000000

08003604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003608:	f7ff fff0 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 800360c:	4602      	mov	r2, r0
 800360e:	4b05      	ldr	r3, [pc, #20]	@ (8003624 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	0a9b      	lsrs	r3, r3, #10
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	4903      	ldr	r1, [pc, #12]	@ (8003628 <HAL_RCC_GetPCLK1Freq+0x24>)
 800361a:	5ccb      	ldrb	r3, [r1, r3]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003620:	4618      	mov	r0, r3
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40023800 	.word	0x40023800
 8003628:	0800a1f0 	.word	0x0800a1f0

0800362c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003630:	f7ff ffdc 	bl	80035ec <HAL_RCC_GetHCLKFreq>
 8003634:	4602      	mov	r2, r0
 8003636:	4b05      	ldr	r3, [pc, #20]	@ (800364c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	0b5b      	lsrs	r3, r3, #13
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	4903      	ldr	r1, [pc, #12]	@ (8003650 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003642:	5ccb      	ldrb	r3, [r1, r3]
 8003644:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003648:	4618      	mov	r0, r3
 800364a:	bd80      	pop	{r7, pc}
 800364c:	40023800 	.word	0x40023800
 8003650:	0800a1f0 	.word	0x0800a1f0

08003654 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e041      	b.n	80036ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fe fa12 	bl	8001aa4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	4619      	mov	r1, r3
 8003692:	4610      	mov	r0, r2
 8003694:	f000 f950 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
	...

080036f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b01      	cmp	r3, #1
 8003706:	d001      	beq.n	800370c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e03c      	b.n	8003786 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1e      	ldr	r2, [pc, #120]	@ (8003794 <HAL_TIM_Base_Start+0xa0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d018      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003726:	d013      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a1a      	ldr	r2, [pc, #104]	@ (8003798 <HAL_TIM_Base_Start+0xa4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00e      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a19      	ldr	r2, [pc, #100]	@ (800379c <HAL_TIM_Base_Start+0xa8>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d009      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_TIM_Base_Start+0xac>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d004      	beq.n	8003750 <HAL_TIM_Base_Start+0x5c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a16      	ldr	r2, [pc, #88]	@ (80037a4 <HAL_TIM_Base_Start+0xb0>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d111      	bne.n	8003774 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	f003 0307 	and.w	r3, r3, #7
 800375a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b06      	cmp	r3, #6
 8003760:	d010      	beq.n	8003784 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 0201 	orr.w	r2, r2, #1
 8003770:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003772:	e007      	b.n	8003784 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40010000 	.word	0x40010000
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800
 80037a0:	40000c00 	.word	0x40000c00
 80037a4:	40014000 	.word	0x40014000

080037a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d101      	bne.n	80037c4 <HAL_TIM_ConfigClockSource+0x1c>
 80037c0:	2302      	movs	r3, #2
 80037c2:	e0b4      	b.n	800392e <HAL_TIM_ConfigClockSource+0x186>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80037e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037fc:	d03e      	beq.n	800387c <HAL_TIM_ConfigClockSource+0xd4>
 80037fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003802:	f200 8087 	bhi.w	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 8003806:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800380a:	f000 8086 	beq.w	800391a <HAL_TIM_ConfigClockSource+0x172>
 800380e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003812:	d87f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 8003814:	2b70      	cmp	r3, #112	@ 0x70
 8003816:	d01a      	beq.n	800384e <HAL_TIM_ConfigClockSource+0xa6>
 8003818:	2b70      	cmp	r3, #112	@ 0x70
 800381a:	d87b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 800381c:	2b60      	cmp	r3, #96	@ 0x60
 800381e:	d050      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003820:	2b60      	cmp	r3, #96	@ 0x60
 8003822:	d877      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 8003824:	2b50      	cmp	r3, #80	@ 0x50
 8003826:	d03c      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003828:	2b50      	cmp	r3, #80	@ 0x50
 800382a:	d873      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b40      	cmp	r3, #64	@ 0x40
 800382e:	d058      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003830:	2b40      	cmp	r3, #64	@ 0x40
 8003832:	d86f      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b30      	cmp	r3, #48	@ 0x30
 8003836:	d064      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x15a>
 8003838:	2b30      	cmp	r3, #48	@ 0x30
 800383a:	d86b      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b20      	cmp	r3, #32
 800383e:	d060      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x15a>
 8003840:	2b20      	cmp	r3, #32
 8003842:	d867      	bhi.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b00      	cmp	r3, #0
 8003846:	d05c      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x15a>
 8003848:	2b10      	cmp	r3, #16
 800384a:	d05a      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	e062      	b.n	8003914 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800385e:	f000 f971 	bl	8003b44 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003870:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	609a      	str	r2, [r3, #8]
      break;
 800387a:	e04f      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800388c:	f000 f95a 	bl	8003b44 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689a      	ldr	r2, [r3, #8]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800389e:	609a      	str	r2, [r3, #8]
      break;
 80038a0:	e03c      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	461a      	mov	r2, r3
 80038b0:	f000 f8ce 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2150      	movs	r1, #80	@ 0x50
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 f927 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80038c0:	e02c      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 f8ed 	bl	8003aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2160      	movs	r1, #96	@ 0x60
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 f917 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 80038e0:	e01c      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 f8ae 	bl	8003a50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2140      	movs	r1, #64	@ 0x40
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 f907 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003900:	e00c      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4619      	mov	r1, r3
 800390c:	4610      	mov	r0, r2
 800390e:	f000 f8fe 	bl	8003b0e <TIM_ITRx_SetConfig>
      break;
 8003912:	e003      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	73fb      	strb	r3, [r7, #15]
      break;
 8003918:	e000      	b.n	800391c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800391a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800392c:	7bfb      	ldrb	r3, [r7, #15]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
	...

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a3a      	ldr	r2, [pc, #232]	@ (8003a34 <TIM_Base_SetConfig+0xfc>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d00f      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d00b      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a37      	ldr	r2, [pc, #220]	@ (8003a38 <TIM_Base_SetConfig+0x100>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a36      	ldr	r2, [pc, #216]	@ (8003a3c <TIM_Base_SetConfig+0x104>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x38>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a35      	ldr	r2, [pc, #212]	@ (8003a40 <TIM_Base_SetConfig+0x108>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a2b      	ldr	r2, [pc, #172]	@ (8003a34 <TIM_Base_SetConfig+0xfc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01b      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003990:	d017      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a28      	ldr	r2, [pc, #160]	@ (8003a38 <TIM_Base_SetConfig+0x100>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <TIM_Base_SetConfig+0x104>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00f      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a26      	ldr	r2, [pc, #152]	@ (8003a40 <TIM_Base_SetConfig+0x108>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d00b      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a25      	ldr	r2, [pc, #148]	@ (8003a44 <TIM_Base_SetConfig+0x10c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d007      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a24      	ldr	r2, [pc, #144]	@ (8003a48 <TIM_Base_SetConfig+0x110>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d003      	beq.n	80039c2 <TIM_Base_SetConfig+0x8a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a23      	ldr	r2, [pc, #140]	@ (8003a4c <TIM_Base_SetConfig+0x114>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d108      	bne.n	80039d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	689a      	ldr	r2, [r3, #8]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003a34 <TIM_Base_SetConfig+0xfc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d103      	bne.n	8003a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	691a      	ldr	r2, [r3, #16]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d105      	bne.n	8003a26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	f023 0201 	bic.w	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	611a      	str	r2, [r3, #16]
  }
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40000400 	.word	0x40000400
 8003a3c:	40000800 	.word	0x40000800
 8003a40:	40000c00 	.word	0x40000c00
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	f023 030a 	bic.w	r3, r3, #10
 8003a8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	697a      	ldr	r2, [r7, #20]
 8003aa0:	621a      	str	r2, [r3, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	371c      	adds	r7, #28
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b087      	sub	sp, #28
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	60f8      	str	r0, [r7, #12]
 8003ab6:	60b9      	str	r1, [r7, #8]
 8003ab8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0210 	bic.w	r2, r3, #16
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ad8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	031b      	lsls	r3, r3, #12
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	621a      	str	r2, [r3, #32]
}
 8003b02:	bf00      	nop
 8003b04:	371c      	adds	r7, #28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	f043 0307 	orr.w	r3, r3, #7
 8003b30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
}
 8003b38:	bf00      	nop
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b087      	sub	sp, #28
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	021a      	lsls	r2, r3, #8
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	431a      	orrs	r2, r3
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	609a      	str	r2, [r3, #8]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e050      	b.n	8003c3e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a1c      	ldr	r2, [pc, #112]	@ (8003c4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d018      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d013      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a18      	ldr	r2, [pc, #96]	@ (8003c50 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d00e      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d004      	beq.n	8003c12 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a13      	ldr	r2, [pc, #76]	@ (8003c5c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10c      	bne.n	8003c2c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3714      	adds	r7, #20
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40000400 	.word	0x40000400
 8003c54:	40000800 	.word	0x40000800
 8003c58:	40000c00 	.word	0x40000c00
 8003c5c:	40014000 	.word	0x40014000

08003c60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e042      	b.n	8003cf8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fd ff2e 	bl	8001ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2224      	movs	r2, #36	@ 0x24
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 ff4f 	bl	8004b48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695a      	ldr	r2, [r3, #20]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08a      	sub	sp, #40	@ 0x28
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d175      	bne.n	8003e0c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <HAL_UART_Transmit+0x2c>
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e06e      	b.n	8003e0e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2221      	movs	r2, #33	@ 0x21
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d3e:	f7fe f937 	bl	8001fb0 <HAL_GetTick>
 8003d42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	88fa      	ldrh	r2, [r7, #6]
 8003d48:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	88fa      	ldrh	r2, [r7, #6]
 8003d4e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d58:	d108      	bne.n	8003d6c <HAL_UART_Transmit+0x6c>
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d104      	bne.n	8003d6c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	61bb      	str	r3, [r7, #24]
 8003d6a:	e003      	b.n	8003d74 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d70:	2300      	movs	r3, #0
 8003d72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d74:	e02e      	b.n	8003dd4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	@ 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc27 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e03a      	b.n	8003e0e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10b      	bne.n	8003db6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	3302      	adds	r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]
 8003db4:	e007      	b.n	8003dc6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	781a      	ldrb	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1cb      	bne.n	8003d76 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	2200      	movs	r2, #0
 8003de6:	2140      	movs	r1, #64	@ 0x40
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 fbf3 	bl	80045d4 <UART_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e006      	b.n	8003e0e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e000      	b.n	8003e0e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
  }
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3720      	adds	r7, #32
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	4613      	mov	r3, r2
 8003e22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	2b20      	cmp	r3, #32
 8003e2e:	d112      	bne.n	8003e56 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d002      	beq.n	8003e3c <HAL_UART_Receive_DMA+0x26>
 8003e36:	88fb      	ldrh	r3, [r7, #6]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e00b      	b.n	8003e58 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003e46:	88fb      	ldrh	r3, [r7, #6]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	68b9      	ldr	r1, [r7, #8]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fc1b 	bl	8004688 <UART_Start_Receive_DMA>
 8003e52:	4603      	mov	r3, r0
 8003e54:	e000      	b.n	8003e58 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e56:	2302      	movs	r3, #2
  }
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b0ba      	sub	sp, #232	@ 0xe8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x66>
 8003eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fd83 	bl	80049ca <UART_Receive_IT>
      return;
 8003ec4:	e25b      	b.n	800437e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 80de 	beq.w	800408c <HAL_UART_IRQHandler+0x22c>
 8003ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80d1 	beq.w	800408c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <HAL_UART_IRQHandler+0xae>
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d005      	beq.n	8003f0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f06:	f043 0201 	orr.w	r2, r3, #1
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00b      	beq.n	8003f32 <HAL_UART_IRQHandler+0xd2>
 8003f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0202 	orr.w	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <HAL_UART_IRQHandler+0xf6>
 8003f3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d011      	beq.n	8003f86 <HAL_UART_IRQHandler+0x126>
 8003f62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d105      	bne.n	8003f7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d005      	beq.n	8003f86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7e:	f043 0208 	orr.w	r2, r3, #8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f000 81f2 	beq.w	8004374 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f94:	f003 0320 	and.w	r3, r3, #32
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d008      	beq.n	8003fae <HAL_UART_IRQHandler+0x14e>
 8003f9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa0:	f003 0320 	and.w	r3, r3, #32
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f000 fd0e 	bl	80049ca <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb8:	2b40      	cmp	r3, #64	@ 0x40
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_UART_IRQHandler+0x17a>
 8003fd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d04f      	beq.n	800407a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fc16 	bl	800480c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fea:	2b40      	cmp	r3, #64	@ 0x40
 8003fec:	d141      	bne.n	8004072 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3314      	adds	r3, #20
 8003ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800400c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800401a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800401e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1d9      	bne.n	8003fee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403e:	2b00      	cmp	r3, #0
 8004040:	d013      	beq.n	800406a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004046:	4a7e      	ldr	r2, [pc, #504]	@ (8004240 <HAL_UART_IRQHandler+0x3e0>)
 8004048:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe fa66 	bl	8002520 <HAL_DMA_Abort_IT>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d016      	beq.n	8004088 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800405e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004064:	4610      	mov	r0, r2
 8004066:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	e00e      	b.n	8004088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f99e 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004070:	e00a      	b.n	8004088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f99a 	bl	80043ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004078:	e006      	b.n	8004088 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f996 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004086:	e175      	b.n	8004374 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004088:	bf00      	nop
    return;
 800408a:	e173      	b.n	8004374 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 814f 	bne.w	8004334 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 8148 	beq.w	8004334 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040a8:	f003 0310 	and.w	r3, r3, #16
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 8141 	beq.w	8004334 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	60bb      	str	r3, [r7, #8]
 80040c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d2:	2b40      	cmp	r3, #64	@ 0x40
 80040d4:	f040 80b6 	bne.w	8004244 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80040e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8145 	beq.w	8004378 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80040f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040f6:	429a      	cmp	r2, r3
 80040f8:	f080 813e 	bcs.w	8004378 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004102:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410e:	f000 8088 	beq.w	8004222 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	330c      	adds	r3, #12
 8004118:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004128:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800412c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004130:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800413e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004142:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800414a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800414e:	e841 2300 	strex	r3, r2, [r1]
 8004152:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004156:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1d9      	bne.n	8004112 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	3314      	adds	r3, #20
 8004164:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004166:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004168:	e853 3f00 	ldrex	r3, [r3]
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800416e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004170:	f023 0301 	bic.w	r3, r3, #1
 8004174:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	3314      	adds	r3, #20
 800417e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004182:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800418a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800418e:	e841 2300 	strex	r3, r2, [r1]
 8004192:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1e1      	bne.n	800415e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3314      	adds	r3, #20
 80041a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3314      	adds	r3, #20
 80041ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e3      	bne.n	800419a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	330c      	adds	r3, #12
 80041e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f2:	f023 0310 	bic.w	r3, r3, #16
 80041f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	330c      	adds	r3, #12
 8004200:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004204:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004206:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004208:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800420a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004212:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e3      	bne.n	80041e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe f90f 	bl	8002440 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2202      	movs	r2, #2
 8004226:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004230:	b29b      	uxth	r3, r3
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	b29b      	uxth	r3, r3
 8004236:	4619      	mov	r1, r3
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f8c1 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800423e:	e09b      	b.n	8004378 <HAL_UART_IRQHandler+0x518>
 8004240:	080048d3 	.word	0x080048d3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800424c:	b29b      	uxth	r3, r3
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004258:	b29b      	uxth	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 808e 	beq.w	800437c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004260:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 8089 	beq.w	800437c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	330c      	adds	r3, #12
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800427a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800427c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004280:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800428e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004290:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004294:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800429c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e3      	bne.n	800426a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	3314      	adds	r3, #20
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	623b      	str	r3, [r7, #32]
   return(result);
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	f023 0301 	bic.w	r3, r3, #1
 80042b8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	3314      	adds	r3, #20
 80042c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80042c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042ce:	e841 2300 	strex	r3, r2, [r1]
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80042d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d1e3      	bne.n	80042a2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	330c      	adds	r3, #12
 80042ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0310 	bic.w	r3, r3, #16
 80042fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	330c      	adds	r3, #12
 8004308:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800430c:	61fa      	str	r2, [r7, #28]
 800430e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	69b9      	ldr	r1, [r7, #24]
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	617b      	str	r3, [r7, #20]
   return(result);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e3      	bne.n	80042e8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004326:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800432a:	4619      	mov	r1, r3
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f847 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004332:	e023      	b.n	800437c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_UART_IRQHandler+0x4f4>
 8004340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004344:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fad4 	bl	80048fa <UART_Transmit_IT>
    return;
 8004352:	e014      	b.n	800437e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00e      	beq.n	800437e <HAL_UART_IRQHandler+0x51e>
 8004360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d008      	beq.n	800437e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f000 fb14 	bl	800499a <UART_EndTransmit_IT>
    return;
 8004372:	e004      	b.n	800437e <HAL_UART_IRQHandler+0x51e>
    return;
 8004374:	bf00      	nop
 8004376:	e002      	b.n	800437e <HAL_UART_IRQHandler+0x51e>
      return;
 8004378:	bf00      	nop
 800437a:	e000      	b.n	800437e <HAL_UART_IRQHandler+0x51e>
      return;
 800437c:	bf00      	nop
  }
}
 800437e:	37e8      	adds	r7, #232	@ 0xe8
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}

08004384 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b09c      	sub	sp, #112	@ 0x70
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d172      	bne.n	80044da <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80043f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043f6:	2200      	movs	r2, #0
 80043f8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004404:	e853 3f00 	ldrex	r3, [r3]
 8004408:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800440a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800440c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	330c      	adds	r3, #12
 8004418:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800441a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800441c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e5      	bne.n	80043fa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	667b      	str	r3, [r7, #100]	@ 0x64
 8004446:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3314      	adds	r3, #20
 800444c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800444e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004450:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1e5      	bne.n	800442e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446c:	e853 3f00 	ldrex	r3, [r3]
 8004470:	623b      	str	r3, [r7, #32]
   return(result);
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004478:	663b      	str	r3, [r7, #96]	@ 0x60
 800447a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004482:	633a      	str	r2, [r7, #48]	@ 0x30
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004488:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e5      	bne.n	8004462 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004496:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d119      	bne.n	80044da <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	330c      	adds	r3, #12
 80044ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	e853 3f00 	ldrex	r3, [r3]
 80044b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f023 0310 	bic.w	r3, r3, #16
 80044bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80044c6:	61fa      	str	r2, [r7, #28]
 80044c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	69b9      	ldr	r1, [r7, #24]
 80044cc:	69fa      	ldr	r2, [r7, #28]
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	617b      	str	r3, [r7, #20]
   return(result);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e5      	bne.n	80044a6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044dc:	2200      	movs	r2, #0
 80044de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d106      	bne.n	80044f6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80044ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044ec:	4619      	mov	r1, r3
 80044ee:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044f0:	f7ff ff66 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80044f4:	e002      	b.n	80044fc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80044f6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80044f8:	f7fd f8b6 	bl	8001668 <HAL_UART_RxCpltCallback>
}
 80044fc:	bf00      	nop
 80044fe:	3770      	adds	r7, #112	@ 0x70
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004510:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2201      	movs	r2, #1
 8004516:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	2b01      	cmp	r3, #1
 800451e:	d108      	bne.n	8004532 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004524:	085b      	lsrs	r3, r3, #1
 8004526:	b29b      	uxth	r3, r3
 8004528:	4619      	mov	r1, r3
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f7ff ff48 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004530:	e002      	b.n	8004538 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ff30 	bl	8004398 <HAL_UART_RxHalfCpltCallback>
}
 8004538:	bf00      	nop
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004548:	2300      	movs	r3, #0
 800454a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004550:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	bf0c      	ite	eq
 8004560:	2301      	moveq	r3, #1
 8004562:	2300      	movne	r3, #0
 8004564:	b2db      	uxtb	r3, r3
 8004566:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b21      	cmp	r3, #33	@ 0x21
 8004572:	d108      	bne.n	8004586 <UART_DMAError+0x46>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d005      	beq.n	8004586 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	2200      	movs	r2, #0
 800457e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f000 f91b 	bl	80047bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004590:	2b40      	cmp	r3, #64	@ 0x40
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b22      	cmp	r3, #34	@ 0x22
 80045a6:	d108      	bne.n	80045ba <UART_DMAError+0x7a>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2200      	movs	r2, #0
 80045b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80045b4:	68b8      	ldr	r0, [r7, #8]
 80045b6:	f000 f929 	bl	800480c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045be:	f043 0210 	orr.w	r2, r3, #16
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f7ff fef0 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b086      	sub	sp, #24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	603b      	str	r3, [r7, #0]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e4:	e03b      	b.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d037      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ee:	f7fd fcdf 	bl	8001fb0 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	6a3a      	ldr	r2, [r7, #32]
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d302      	bcc.n	8004604 <UART_WaitOnFlagUntilTimeout+0x30>
 80045fe:	6a3b      	ldr	r3, [r7, #32]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e03a      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0304 	and.w	r3, r3, #4
 8004612:	2b00      	cmp	r3, #0
 8004614:	d023      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b80      	cmp	r3, #128	@ 0x80
 800461a:	d020      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b40      	cmp	r3, #64	@ 0x40
 8004620:	d01d      	beq.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b08      	cmp	r3, #8
 800462e:	d116      	bne.n	800465e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	617b      	str	r3, [r7, #20]
 8004644:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f8e0 	bl	800480c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2208      	movs	r2, #8
 8004650:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e00f      	b.n	800467e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4013      	ands	r3, r2
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	bf0c      	ite	eq
 800466e:	2301      	moveq	r3, #1
 8004670:	2300      	movne	r3, #0
 8004672:	b2db      	uxtb	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	79fb      	ldrb	r3, [r7, #7]
 8004678:	429a      	cmp	r2, r3
 800467a:	d0b4      	beq.n	80045e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b098      	sub	sp, #96	@ 0x60
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	4613      	mov	r3, r2
 8004694:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	2200      	movs	r2, #0
 80046a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2222      	movs	r2, #34	@ 0x22
 80046ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	4a3e      	ldr	r2, [pc, #248]	@ (80047b0 <UART_Start_Receive_DMA+0x128>)
 80046b6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046bc:	4a3d      	ldr	r2, [pc, #244]	@ (80047b4 <UART_Start_Receive_DMA+0x12c>)
 80046be:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046c4:	4a3c      	ldr	r2, [pc, #240]	@ (80047b8 <UART_Start_Receive_DMA+0x130>)
 80046c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046cc:	2200      	movs	r2, #0
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80046d0:	f107 0308 	add.w	r3, r7, #8
 80046d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	88fb      	ldrh	r3, [r7, #6]
 80046e8:	f7fd fe52 	bl	8002390 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80046ec:	2300      	movs	r3, #0
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	613b      	str	r3, [r7, #16]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d019      	beq.n	800473e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	330c      	adds	r3, #12
 8004710:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800471a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800471c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004720:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800472a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800472c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004730:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e5      	bne.n	800470a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3314      	adds	r3, #20
 8004744:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800474e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	657b      	str	r3, [r7, #84]	@ 0x54
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800475e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004764:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800476c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	3314      	adds	r3, #20
 8004778:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	e853 3f00 	ldrex	r3, [r3]
 8004780:	617b      	str	r3, [r7, #20]
   return(result);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004788:	653b      	str	r3, [r7, #80]	@ 0x50
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3314      	adds	r3, #20
 8004790:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004792:	627a      	str	r2, [r7, #36]	@ 0x24
 8004794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6a39      	ldr	r1, [r7, #32]
 8004798:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	61fb      	str	r3, [r7, #28]
   return(result);
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e5      	bne.n	8004772 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3760      	adds	r7, #96	@ 0x60
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}
 80047b0:	080043d9 	.word	0x080043d9
 80047b4:	08004505 	.word	0x08004505
 80047b8:	08004541 	.word	0x08004541

080047bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	@ 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	330c      	adds	r3, #12
 80047ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	e853 3f00 	ldrex	r3, [r3]
 80047d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80047da:	61fb      	str	r3, [r7, #28]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	330c      	adds	r3, #12
 80047e2:	69fa      	ldr	r2, [r7, #28]
 80047e4:	61ba      	str	r2, [r7, #24]
 80047e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	6979      	ldr	r1, [r7, #20]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	e841 2300 	strex	r3, r2, [r1]
 80047f0:	613b      	str	r3, [r7, #16]
   return(result);
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e5      	bne.n	80047c4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004800:	bf00      	nop
 8004802:	3724      	adds	r7, #36	@ 0x24
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800480c:	b480      	push	{r7}
 800480e:	b095      	sub	sp, #84	@ 0x54
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004826:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800482a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004834:	643a      	str	r2, [r7, #64]	@ 0x40
 8004836:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800483a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e5      	bne.n	8004814 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3314      	adds	r3, #20
 800484e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	e853 3f00 	ldrex	r3, [r3]
 8004856:	61fb      	str	r3, [r7, #28]
   return(result);
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3314      	adds	r3, #20
 8004866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004868:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800486e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004870:	e841 2300 	strex	r3, r2, [r1]
 8004874:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1e5      	bne.n	8004848 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004880:	2b01      	cmp	r3, #1
 8004882:	d119      	bne.n	80048b8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	330c      	adds	r3, #12
 800488a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	e853 3f00 	ldrex	r3, [r3]
 8004892:	60bb      	str	r3, [r7, #8]
   return(result);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0310 	bic.w	r3, r3, #16
 800489a:	647b      	str	r3, [r7, #68]	@ 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048a4:	61ba      	str	r2, [r7, #24]
 80048a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a8:	6979      	ldr	r1, [r7, #20]
 80048aa:	69ba      	ldr	r2, [r7, #24]
 80048ac:	e841 2300 	strex	r3, r2, [r1]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1e5      	bne.n	8004884 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048c6:	bf00      	nop
 80048c8:	3754      	adds	r7, #84	@ 0x54
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b084      	sub	sp, #16
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff fd5d 	bl	80043ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b085      	sub	sp, #20
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b21      	cmp	r3, #33	@ 0x21
 800490c:	d13e      	bne.n	800498c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004916:	d114      	bne.n	8004942 <UART_Transmit_IT+0x48>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d110      	bne.n	8004942 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	881b      	ldrh	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004934:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	1c9a      	adds	r2, r3, #2
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	621a      	str	r2, [r3, #32]
 8004940:	e008      	b.n	8004954 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	1c59      	adds	r1, r3, #1
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6211      	str	r1, [r2, #32]
 800494c:	781a      	ldrb	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004958:	b29b      	uxth	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	b29b      	uxth	r3, r3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	4619      	mov	r1, r3
 8004962:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10f      	bne.n	8004988 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004976:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004986:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	e000      	b.n	800498e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800498c:	2302      	movs	r3, #2
  }
}
 800498e:	4618      	mov	r0, r3
 8004990:	3714      	adds	r7, #20
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049b0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f7ff fce2 	bl	8004384 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b08c      	sub	sp, #48	@ 0x30
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b22      	cmp	r3, #34	@ 0x22
 80049dc:	f040 80ae 	bne.w	8004b3c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049e8:	d117      	bne.n	8004a1a <UART_Receive_IT+0x50>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d113      	bne.n	8004a1a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049f2:	2300      	movs	r3, #0
 80049f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	1c9a      	adds	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a18:	e026      	b.n	8004a68 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a2c:	d007      	beq.n	8004a3e <UART_Receive_IT+0x74>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <UART_Receive_IT+0x82>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d106      	bne.n	8004a4c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e008      	b.n	8004a5e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a5c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4619      	mov	r1, r3
 8004a76:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d15d      	bne.n	8004b38 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0220 	bic.w	r2, r2, #32
 8004a8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d135      	bne.n	8004b2e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae8:	623a      	str	r2, [r7, #32]
 8004aea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	6a3a      	ldr	r2, [r7, #32]
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004af6:	69bb      	ldr	r3, [r7, #24]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e5      	bne.n	8004ac8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b10      	cmp	r3, #16
 8004b08:	d10a      	bne.n	8004b20 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b24:	4619      	mov	r1, r3
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7ff fc4a 	bl	80043c0 <HAL_UARTEx_RxEventCallback>
 8004b2c:	e002      	b.n	8004b34 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fd9a 	bl	8001668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e002      	b.n	8004b3e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3730      	adds	r7, #48	@ 0x30
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b0c0      	sub	sp, #256	@ 0x100
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b64:	68d9      	ldr	r1, [r3, #12]
 8004b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	ea40 0301 	orr.w	r3, r0, r1
 8004b70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b76:	689a      	ldr	r2, [r3, #8]
 8004b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	695b      	ldr	r3, [r3, #20]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ba0:	f021 010c 	bic.w	r1, r1, #12
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bae:	430b      	orrs	r3, r1
 8004bb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	6999      	ldr	r1, [r3, #24]
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	ea40 0301 	orr.w	r3, r0, r1
 8004bce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e14 <UART_SetConfig+0x2cc>)
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d005      	beq.n	8004be8 <UART_SetConfig+0xa0>
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4b8d      	ldr	r3, [pc, #564]	@ (8004e18 <UART_SetConfig+0x2d0>)
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d104      	bne.n	8004bf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe fd20 	bl	800362c <HAL_RCC_GetPCLK2Freq>
 8004bec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bf0:	e003      	b.n	8004bfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bf2:	f7fe fd07 	bl	8003604 <HAL_RCC_GetPCLK1Freq>
 8004bf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	69db      	ldr	r3, [r3, #28]
 8004c00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c04:	f040 810c 	bne.w	8004e20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	1891      	adds	r1, r2, r2
 8004c20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c22:	415b      	adcs	r3, r3
 8004c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	eb12 0801 	adds.w	r8, r2, r1
 8004c30:	4629      	mov	r1, r5
 8004c32:	eb43 0901 	adc.w	r9, r3, r1
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	4623      	mov	r3, r4
 8004c50:	eb18 0303 	adds.w	r3, r8, r3
 8004c54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c58:	462b      	mov	r3, r5
 8004c5a:	eb49 0303 	adc.w	r3, r9, r3
 8004c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c76:	460b      	mov	r3, r1
 8004c78:	18db      	adds	r3, r3, r3
 8004c7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	eb42 0303 	adc.w	r3, r2, r3
 8004c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c8c:	f7fc f804 	bl	8000c98 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4b61      	ldr	r3, [pc, #388]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004c96:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	011c      	lsls	r4, r3, #4
 8004c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cb0:	4642      	mov	r2, r8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cc0:	4641      	mov	r1, r8
 8004cc2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cc6:	4649      	mov	r1, r9
 8004cc8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cdc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ce0:	4692      	mov	sl, r2
 8004ce2:	469b      	mov	fp, r3
 8004ce4:	4643      	mov	r3, r8
 8004ce6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cee:	464b      	mov	r3, r9
 8004cf0:	eb4b 0303 	adc.w	r3, fp, r3
 8004cf4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004cf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	18db      	adds	r3, r3, r3
 8004d10:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d12:	4613      	mov	r3, r2
 8004d14:	eb42 0303 	adc.w	r3, r2, r3
 8004d18:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d22:	f7fb ffb9 	bl	8000c98 <__aeabi_uldivmod>
 8004d26:	4602      	mov	r2, r0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004d2e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d32:	095b      	lsrs	r3, r3, #5
 8004d34:	2264      	movs	r2, #100	@ 0x64
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	1acb      	subs	r3, r1, r3
 8004d3c:	00db      	lsls	r3, r3, #3
 8004d3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d42:	4b36      	ldr	r3, [pc, #216]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004d44:	fba3 2302 	umull	r2, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d50:	441c      	add	r4, r3
 8004d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d64:	4642      	mov	r2, r8
 8004d66:	464b      	mov	r3, r9
 8004d68:	1891      	adds	r1, r2, r2
 8004d6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d6c:	415b      	adcs	r3, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d74:	4641      	mov	r1, r8
 8004d76:	1851      	adds	r1, r2, r1
 8004d78:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d7a:	4649      	mov	r1, r9
 8004d7c:	414b      	adcs	r3, r1
 8004d7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d80:	f04f 0200 	mov.w	r2, #0
 8004d84:	f04f 0300 	mov.w	r3, #0
 8004d88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	00cb      	lsls	r3, r1, #3
 8004d90:	4651      	mov	r1, sl
 8004d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d96:	4651      	mov	r1, sl
 8004d98:	00ca      	lsls	r2, r1, #3
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	4603      	mov	r3, r0
 8004da0:	4642      	mov	r2, r8
 8004da2:	189b      	adds	r3, r3, r2
 8004da4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004da8:	464b      	mov	r3, r9
 8004daa:	460a      	mov	r2, r1
 8004dac:	eb42 0303 	adc.w	r3, r2, r3
 8004db0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dc0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dc4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dc8:	460b      	mov	r3, r1
 8004dca:	18db      	adds	r3, r3, r3
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dce:	4613      	mov	r3, r2
 8004dd0:	eb42 0303 	adc.w	r3, r2, r3
 8004dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dd6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dde:	f7fb ff5b 	bl	8000c98 <__aeabi_uldivmod>
 8004de2:	4602      	mov	r2, r0
 8004de4:	460b      	mov	r3, r1
 8004de6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004de8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	2164      	movs	r1, #100	@ 0x64
 8004df0:	fb01 f303 	mul.w	r3, r1, r3
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	3332      	adds	r3, #50	@ 0x32
 8004dfa:	4a08      	ldr	r2, [pc, #32]	@ (8004e1c <UART_SetConfig+0x2d4>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	095b      	lsrs	r3, r3, #5
 8004e02:	f003 0207 	and.w	r2, r3, #7
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4422      	add	r2, r4
 8004e0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e10:	e106      	b.n	8005020 <UART_SetConfig+0x4d8>
 8004e12:	bf00      	nop
 8004e14:	40011000 	.word	0x40011000
 8004e18:	40011400 	.word	0x40011400
 8004e1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e24:	2200      	movs	r2, #0
 8004e26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	1891      	adds	r1, r2, r2
 8004e38:	6239      	str	r1, [r7, #32]
 8004e3a:	415b      	adcs	r3, r3
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e42:	4641      	mov	r1, r8
 8004e44:	1854      	adds	r4, r2, r1
 8004e46:	4649      	mov	r1, r9
 8004e48:	eb43 0501 	adc.w	r5, r3, r1
 8004e4c:	f04f 0200 	mov.w	r2, #0
 8004e50:	f04f 0300 	mov.w	r3, #0
 8004e54:	00eb      	lsls	r3, r5, #3
 8004e56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e5a:	00e2      	lsls	r2, r4, #3
 8004e5c:	4614      	mov	r4, r2
 8004e5e:	461d      	mov	r5, r3
 8004e60:	4643      	mov	r3, r8
 8004e62:	18e3      	adds	r3, r4, r3
 8004e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e68:	464b      	mov	r3, r9
 8004e6a:	eb45 0303 	adc.w	r3, r5, r3
 8004e6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e8e:	4629      	mov	r1, r5
 8004e90:	008b      	lsls	r3, r1, #2
 8004e92:	4621      	mov	r1, r4
 8004e94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e98:	4621      	mov	r1, r4
 8004e9a:	008a      	lsls	r2, r1, #2
 8004e9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004ea0:	f7fb fefa 	bl	8000c98 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4b60      	ldr	r3, [pc, #384]	@ (800502c <UART_SetConfig+0x4e4>)
 8004eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	011c      	lsls	r4, r3, #4
 8004eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ebc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ec0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	61b9      	str	r1, [r7, #24]
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	61fb      	str	r3, [r7, #28]
 8004ed0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ed4:	4641      	mov	r1, r8
 8004ed6:	1851      	adds	r1, r2, r1
 8004ed8:	6139      	str	r1, [r7, #16]
 8004eda:	4649      	mov	r1, r9
 8004edc:	414b      	adcs	r3, r1
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	f04f 0200 	mov.w	r2, #0
 8004ee4:	f04f 0300 	mov.w	r3, #0
 8004ee8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eec:	4659      	mov	r1, fp
 8004eee:	00cb      	lsls	r3, r1, #3
 8004ef0:	4651      	mov	r1, sl
 8004ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ef6:	4651      	mov	r1, sl
 8004ef8:	00ca      	lsls	r2, r1, #3
 8004efa:	4610      	mov	r0, r2
 8004efc:	4619      	mov	r1, r3
 8004efe:	4603      	mov	r3, r0
 8004f00:	4642      	mov	r2, r8
 8004f02:	189b      	adds	r3, r3, r2
 8004f04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f08:	464b      	mov	r3, r9
 8004f0a:	460a      	mov	r2, r1
 8004f0c:	eb42 0303 	adc.w	r3, r2, r3
 8004f10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f2c:	4649      	mov	r1, r9
 8004f2e:	008b      	lsls	r3, r1, #2
 8004f30:	4641      	mov	r1, r8
 8004f32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f36:	4641      	mov	r1, r8
 8004f38:	008a      	lsls	r2, r1, #2
 8004f3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f3e:	f7fb feab 	bl	8000c98 <__aeabi_uldivmod>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	4b38      	ldr	r3, [pc, #224]	@ (800502c <UART_SetConfig+0x4e4>)
 8004f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	2264      	movs	r2, #100	@ 0x64
 8004f52:	fb02 f303 	mul.w	r3, r2, r3
 8004f56:	1acb      	subs	r3, r1, r3
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	3332      	adds	r3, #50	@ 0x32
 8004f5c:	4a33      	ldr	r2, [pc, #204]	@ (800502c <UART_SetConfig+0x4e4>)
 8004f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f62:	095b      	lsrs	r3, r3, #5
 8004f64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f68:	441c      	add	r4, r3
 8004f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f6e:	2200      	movs	r2, #0
 8004f70:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f72:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f78:	4642      	mov	r2, r8
 8004f7a:	464b      	mov	r3, r9
 8004f7c:	1891      	adds	r1, r2, r2
 8004f7e:	60b9      	str	r1, [r7, #8]
 8004f80:	415b      	adcs	r3, r3
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f88:	4641      	mov	r1, r8
 8004f8a:	1851      	adds	r1, r2, r1
 8004f8c:	6039      	str	r1, [r7, #0]
 8004f8e:	4649      	mov	r1, r9
 8004f90:	414b      	adcs	r3, r1
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fa0:	4659      	mov	r1, fp
 8004fa2:	00cb      	lsls	r3, r1, #3
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004faa:	4651      	mov	r1, sl
 8004fac:	00ca      	lsls	r2, r1, #3
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	189b      	adds	r3, r3, r2
 8004fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fba:	464b      	mov	r3, r9
 8004fbc:	460a      	mov	r2, r1
 8004fbe:	eb42 0303 	adc.w	r3, r2, r3
 8004fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fce:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fdc:	4649      	mov	r1, r9
 8004fde:	008b      	lsls	r3, r1, #2
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fe6:	4641      	mov	r1, r8
 8004fe8:	008a      	lsls	r2, r1, #2
 8004fea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fee:	f7fb fe53 	bl	8000c98 <__aeabi_uldivmod>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <UART_SetConfig+0x4e4>)
 8004ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	2164      	movs	r1, #100	@ 0x64
 8005000:	fb01 f303 	mul.w	r3, r1, r3
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	011b      	lsls	r3, r3, #4
 8005008:	3332      	adds	r3, #50	@ 0x32
 800500a:	4a08      	ldr	r2, [pc, #32]	@ (800502c <UART_SetConfig+0x4e4>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	095b      	lsrs	r3, r3, #5
 8005012:	f003 020f 	and.w	r2, r3, #15
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4422      	add	r2, r4
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005026:	46bd      	mov	sp, r7
 8005028:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800502c:	51eb851f 	.word	0x51eb851f

08005030 <__cvt>:
 8005030:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	ec57 6b10 	vmov	r6, r7, d0
 8005038:	2f00      	cmp	r7, #0
 800503a:	460c      	mov	r4, r1
 800503c:	4619      	mov	r1, r3
 800503e:	463b      	mov	r3, r7
 8005040:	bfbb      	ittet	lt
 8005042:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005046:	461f      	movlt	r7, r3
 8005048:	2300      	movge	r3, #0
 800504a:	232d      	movlt	r3, #45	@ 0x2d
 800504c:	700b      	strb	r3, [r1, #0]
 800504e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005050:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005054:	4691      	mov	r9, r2
 8005056:	f023 0820 	bic.w	r8, r3, #32
 800505a:	bfbc      	itt	lt
 800505c:	4632      	movlt	r2, r6
 800505e:	4616      	movlt	r6, r2
 8005060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005064:	d005      	beq.n	8005072 <__cvt+0x42>
 8005066:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800506a:	d100      	bne.n	800506e <__cvt+0x3e>
 800506c:	3401      	adds	r4, #1
 800506e:	2102      	movs	r1, #2
 8005070:	e000      	b.n	8005074 <__cvt+0x44>
 8005072:	2103      	movs	r1, #3
 8005074:	ab03      	add	r3, sp, #12
 8005076:	9301      	str	r3, [sp, #4]
 8005078:	ab02      	add	r3, sp, #8
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	ec47 6b10 	vmov	d0, r6, r7
 8005080:	4653      	mov	r3, sl
 8005082:	4622      	mov	r2, r4
 8005084:	f001 f8f8 	bl	8006278 <_dtoa_r>
 8005088:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800508c:	4605      	mov	r5, r0
 800508e:	d119      	bne.n	80050c4 <__cvt+0x94>
 8005090:	f019 0f01 	tst.w	r9, #1
 8005094:	d00e      	beq.n	80050b4 <__cvt+0x84>
 8005096:	eb00 0904 	add.w	r9, r0, r4
 800509a:	2200      	movs	r2, #0
 800509c:	2300      	movs	r3, #0
 800509e:	4630      	mov	r0, r6
 80050a0:	4639      	mov	r1, r7
 80050a2:	f7fb fd19 	bl	8000ad8 <__aeabi_dcmpeq>
 80050a6:	b108      	cbz	r0, 80050ac <__cvt+0x7c>
 80050a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80050ac:	2230      	movs	r2, #48	@ 0x30
 80050ae:	9b03      	ldr	r3, [sp, #12]
 80050b0:	454b      	cmp	r3, r9
 80050b2:	d31e      	bcc.n	80050f2 <__cvt+0xc2>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80050b8:	1b5b      	subs	r3, r3, r5
 80050ba:	4628      	mov	r0, r5
 80050bc:	6013      	str	r3, [r2, #0]
 80050be:	b004      	add	sp, #16
 80050c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80050c8:	eb00 0904 	add.w	r9, r0, r4
 80050cc:	d1e5      	bne.n	800509a <__cvt+0x6a>
 80050ce:	7803      	ldrb	r3, [r0, #0]
 80050d0:	2b30      	cmp	r3, #48	@ 0x30
 80050d2:	d10a      	bne.n	80050ea <__cvt+0xba>
 80050d4:	2200      	movs	r2, #0
 80050d6:	2300      	movs	r3, #0
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb fcfc 	bl	8000ad8 <__aeabi_dcmpeq>
 80050e0:	b918      	cbnz	r0, 80050ea <__cvt+0xba>
 80050e2:	f1c4 0401 	rsb	r4, r4, #1
 80050e6:	f8ca 4000 	str.w	r4, [sl]
 80050ea:	f8da 3000 	ldr.w	r3, [sl]
 80050ee:	4499      	add	r9, r3
 80050f0:	e7d3      	b.n	800509a <__cvt+0x6a>
 80050f2:	1c59      	adds	r1, r3, #1
 80050f4:	9103      	str	r1, [sp, #12]
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	e7d9      	b.n	80050ae <__cvt+0x7e>

080050fa <__exponent>:
 80050fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fc:	2900      	cmp	r1, #0
 80050fe:	bfba      	itte	lt
 8005100:	4249      	neglt	r1, r1
 8005102:	232d      	movlt	r3, #45	@ 0x2d
 8005104:	232b      	movge	r3, #43	@ 0x2b
 8005106:	2909      	cmp	r1, #9
 8005108:	7002      	strb	r2, [r0, #0]
 800510a:	7043      	strb	r3, [r0, #1]
 800510c:	dd29      	ble.n	8005162 <__exponent+0x68>
 800510e:	f10d 0307 	add.w	r3, sp, #7
 8005112:	461d      	mov	r5, r3
 8005114:	270a      	movs	r7, #10
 8005116:	461a      	mov	r2, r3
 8005118:	fbb1 f6f7 	udiv	r6, r1, r7
 800511c:	fb07 1416 	mls	r4, r7, r6, r1
 8005120:	3430      	adds	r4, #48	@ 0x30
 8005122:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005126:	460c      	mov	r4, r1
 8005128:	2c63      	cmp	r4, #99	@ 0x63
 800512a:	f103 33ff 	add.w	r3, r3, #4294967295
 800512e:	4631      	mov	r1, r6
 8005130:	dcf1      	bgt.n	8005116 <__exponent+0x1c>
 8005132:	3130      	adds	r1, #48	@ 0x30
 8005134:	1e94      	subs	r4, r2, #2
 8005136:	f803 1c01 	strb.w	r1, [r3, #-1]
 800513a:	1c41      	adds	r1, r0, #1
 800513c:	4623      	mov	r3, r4
 800513e:	42ab      	cmp	r3, r5
 8005140:	d30a      	bcc.n	8005158 <__exponent+0x5e>
 8005142:	f10d 0309 	add.w	r3, sp, #9
 8005146:	1a9b      	subs	r3, r3, r2
 8005148:	42ac      	cmp	r4, r5
 800514a:	bf88      	it	hi
 800514c:	2300      	movhi	r3, #0
 800514e:	3302      	adds	r3, #2
 8005150:	4403      	add	r3, r0
 8005152:	1a18      	subs	r0, r3, r0
 8005154:	b003      	add	sp, #12
 8005156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005158:	f813 6b01 	ldrb.w	r6, [r3], #1
 800515c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005160:	e7ed      	b.n	800513e <__exponent+0x44>
 8005162:	2330      	movs	r3, #48	@ 0x30
 8005164:	3130      	adds	r1, #48	@ 0x30
 8005166:	7083      	strb	r3, [r0, #2]
 8005168:	70c1      	strb	r1, [r0, #3]
 800516a:	1d03      	adds	r3, r0, #4
 800516c:	e7f1      	b.n	8005152 <__exponent+0x58>
	...

08005170 <_printf_float>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	b08d      	sub	sp, #52	@ 0x34
 8005176:	460c      	mov	r4, r1
 8005178:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800517c:	4616      	mov	r6, r2
 800517e:	461f      	mov	r7, r3
 8005180:	4605      	mov	r5, r0
 8005182:	f000 ff71 	bl	8006068 <_localeconv_r>
 8005186:	6803      	ldr	r3, [r0, #0]
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	4618      	mov	r0, r3
 800518c:	f7fb f878 	bl	8000280 <strlen>
 8005190:	2300      	movs	r3, #0
 8005192:	930a      	str	r3, [sp, #40]	@ 0x28
 8005194:	f8d8 3000 	ldr.w	r3, [r8]
 8005198:	9005      	str	r0, [sp, #20]
 800519a:	3307      	adds	r3, #7
 800519c:	f023 0307 	bic.w	r3, r3, #7
 80051a0:	f103 0208 	add.w	r2, r3, #8
 80051a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80051a8:	f8d4 b000 	ldr.w	fp, [r4]
 80051ac:	f8c8 2000 	str.w	r2, [r8]
 80051b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80051b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80051b8:	9307      	str	r3, [sp, #28]
 80051ba:	f8cd 8018 	str.w	r8, [sp, #24]
 80051be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80051c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051c6:	4b9c      	ldr	r3, [pc, #624]	@ (8005438 <_printf_float+0x2c8>)
 80051c8:	f04f 32ff 	mov.w	r2, #4294967295
 80051cc:	f7fb fcb6 	bl	8000b3c <__aeabi_dcmpun>
 80051d0:	bb70      	cbnz	r0, 8005230 <_printf_float+0xc0>
 80051d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051d6:	4b98      	ldr	r3, [pc, #608]	@ (8005438 <_printf_float+0x2c8>)
 80051d8:	f04f 32ff 	mov.w	r2, #4294967295
 80051dc:	f7fb fc90 	bl	8000b00 <__aeabi_dcmple>
 80051e0:	bb30      	cbnz	r0, 8005230 <_printf_float+0xc0>
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4640      	mov	r0, r8
 80051e8:	4649      	mov	r1, r9
 80051ea:	f7fb fc7f 	bl	8000aec <__aeabi_dcmplt>
 80051ee:	b110      	cbz	r0, 80051f6 <_printf_float+0x86>
 80051f0:	232d      	movs	r3, #45	@ 0x2d
 80051f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051f6:	4a91      	ldr	r2, [pc, #580]	@ (800543c <_printf_float+0x2cc>)
 80051f8:	4b91      	ldr	r3, [pc, #580]	@ (8005440 <_printf_float+0x2d0>)
 80051fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051fe:	bf94      	ite	ls
 8005200:	4690      	movls	r8, r2
 8005202:	4698      	movhi	r8, r3
 8005204:	2303      	movs	r3, #3
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	f02b 0304 	bic.w	r3, fp, #4
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	f04f 0900 	mov.w	r9, #0
 8005212:	9700      	str	r7, [sp, #0]
 8005214:	4633      	mov	r3, r6
 8005216:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005218:	4621      	mov	r1, r4
 800521a:	4628      	mov	r0, r5
 800521c:	f000 f9d2 	bl	80055c4 <_printf_common>
 8005220:	3001      	adds	r0, #1
 8005222:	f040 808d 	bne.w	8005340 <_printf_float+0x1d0>
 8005226:	f04f 30ff 	mov.w	r0, #4294967295
 800522a:	b00d      	add	sp, #52	@ 0x34
 800522c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005230:	4642      	mov	r2, r8
 8005232:	464b      	mov	r3, r9
 8005234:	4640      	mov	r0, r8
 8005236:	4649      	mov	r1, r9
 8005238:	f7fb fc80 	bl	8000b3c <__aeabi_dcmpun>
 800523c:	b140      	cbz	r0, 8005250 <_printf_float+0xe0>
 800523e:	464b      	mov	r3, r9
 8005240:	2b00      	cmp	r3, #0
 8005242:	bfbc      	itt	lt
 8005244:	232d      	movlt	r3, #45	@ 0x2d
 8005246:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800524a:	4a7e      	ldr	r2, [pc, #504]	@ (8005444 <_printf_float+0x2d4>)
 800524c:	4b7e      	ldr	r3, [pc, #504]	@ (8005448 <_printf_float+0x2d8>)
 800524e:	e7d4      	b.n	80051fa <_printf_float+0x8a>
 8005250:	6863      	ldr	r3, [r4, #4]
 8005252:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005256:	9206      	str	r2, [sp, #24]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	d13b      	bne.n	80052d4 <_printf_float+0x164>
 800525c:	2306      	movs	r3, #6
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005264:	2300      	movs	r3, #0
 8005266:	6022      	str	r2, [r4, #0]
 8005268:	9303      	str	r3, [sp, #12]
 800526a:	ab0a      	add	r3, sp, #40	@ 0x28
 800526c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005270:	ab09      	add	r3, sp, #36	@ 0x24
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	6861      	ldr	r1, [r4, #4]
 8005276:	ec49 8b10 	vmov	d0, r8, r9
 800527a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800527e:	4628      	mov	r0, r5
 8005280:	f7ff fed6 	bl	8005030 <__cvt>
 8005284:	9b06      	ldr	r3, [sp, #24]
 8005286:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005288:	2b47      	cmp	r3, #71	@ 0x47
 800528a:	4680      	mov	r8, r0
 800528c:	d129      	bne.n	80052e2 <_printf_float+0x172>
 800528e:	1cc8      	adds	r0, r1, #3
 8005290:	db02      	blt.n	8005298 <_printf_float+0x128>
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	4299      	cmp	r1, r3
 8005296:	dd41      	ble.n	800531c <_printf_float+0x1ac>
 8005298:	f1aa 0a02 	sub.w	sl, sl, #2
 800529c:	fa5f fa8a 	uxtb.w	sl, sl
 80052a0:	3901      	subs	r1, #1
 80052a2:	4652      	mov	r2, sl
 80052a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80052a8:	9109      	str	r1, [sp, #36]	@ 0x24
 80052aa:	f7ff ff26 	bl	80050fa <__exponent>
 80052ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80052b0:	1813      	adds	r3, r2, r0
 80052b2:	2a01      	cmp	r2, #1
 80052b4:	4681      	mov	r9, r0
 80052b6:	6123      	str	r3, [r4, #16]
 80052b8:	dc02      	bgt.n	80052c0 <_printf_float+0x150>
 80052ba:	6822      	ldr	r2, [r4, #0]
 80052bc:	07d2      	lsls	r2, r2, #31
 80052be:	d501      	bpl.n	80052c4 <_printf_float+0x154>
 80052c0:	3301      	adds	r3, #1
 80052c2:	6123      	str	r3, [r4, #16]
 80052c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0a2      	beq.n	8005212 <_printf_float+0xa2>
 80052cc:	232d      	movs	r3, #45	@ 0x2d
 80052ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052d2:	e79e      	b.n	8005212 <_printf_float+0xa2>
 80052d4:	9a06      	ldr	r2, [sp, #24]
 80052d6:	2a47      	cmp	r2, #71	@ 0x47
 80052d8:	d1c2      	bne.n	8005260 <_printf_float+0xf0>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1c0      	bne.n	8005260 <_printf_float+0xf0>
 80052de:	2301      	movs	r3, #1
 80052e0:	e7bd      	b.n	800525e <_printf_float+0xee>
 80052e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80052e6:	d9db      	bls.n	80052a0 <_printf_float+0x130>
 80052e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80052ec:	d118      	bne.n	8005320 <_printf_float+0x1b0>
 80052ee:	2900      	cmp	r1, #0
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	dd0b      	ble.n	800530c <_printf_float+0x19c>
 80052f4:	6121      	str	r1, [r4, #16]
 80052f6:	b913      	cbnz	r3, 80052fe <_printf_float+0x18e>
 80052f8:	6822      	ldr	r2, [r4, #0]
 80052fa:	07d0      	lsls	r0, r2, #31
 80052fc:	d502      	bpl.n	8005304 <_printf_float+0x194>
 80052fe:	3301      	adds	r3, #1
 8005300:	440b      	add	r3, r1
 8005302:	6123      	str	r3, [r4, #16]
 8005304:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005306:	f04f 0900 	mov.w	r9, #0
 800530a:	e7db      	b.n	80052c4 <_printf_float+0x154>
 800530c:	b913      	cbnz	r3, 8005314 <_printf_float+0x1a4>
 800530e:	6822      	ldr	r2, [r4, #0]
 8005310:	07d2      	lsls	r2, r2, #31
 8005312:	d501      	bpl.n	8005318 <_printf_float+0x1a8>
 8005314:	3302      	adds	r3, #2
 8005316:	e7f4      	b.n	8005302 <_printf_float+0x192>
 8005318:	2301      	movs	r3, #1
 800531a:	e7f2      	b.n	8005302 <_printf_float+0x192>
 800531c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005320:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005322:	4299      	cmp	r1, r3
 8005324:	db05      	blt.n	8005332 <_printf_float+0x1c2>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6121      	str	r1, [r4, #16]
 800532a:	07d8      	lsls	r0, r3, #31
 800532c:	d5ea      	bpl.n	8005304 <_printf_float+0x194>
 800532e:	1c4b      	adds	r3, r1, #1
 8005330:	e7e7      	b.n	8005302 <_printf_float+0x192>
 8005332:	2900      	cmp	r1, #0
 8005334:	bfd4      	ite	le
 8005336:	f1c1 0202 	rsble	r2, r1, #2
 800533a:	2201      	movgt	r2, #1
 800533c:	4413      	add	r3, r2
 800533e:	e7e0      	b.n	8005302 <_printf_float+0x192>
 8005340:	6823      	ldr	r3, [r4, #0]
 8005342:	055a      	lsls	r2, r3, #21
 8005344:	d407      	bmi.n	8005356 <_printf_float+0x1e6>
 8005346:	6923      	ldr	r3, [r4, #16]
 8005348:	4642      	mov	r2, r8
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	d12b      	bne.n	80053ac <_printf_float+0x23c>
 8005354:	e767      	b.n	8005226 <_printf_float+0xb6>
 8005356:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800535a:	f240 80dd 	bls.w	8005518 <_printf_float+0x3a8>
 800535e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005362:	2200      	movs	r2, #0
 8005364:	2300      	movs	r3, #0
 8005366:	f7fb fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800536a:	2800      	cmp	r0, #0
 800536c:	d033      	beq.n	80053d6 <_printf_float+0x266>
 800536e:	4a37      	ldr	r2, [pc, #220]	@ (800544c <_printf_float+0x2dc>)
 8005370:	2301      	movs	r3, #1
 8005372:	4631      	mov	r1, r6
 8005374:	4628      	mov	r0, r5
 8005376:	47b8      	blx	r7
 8005378:	3001      	adds	r0, #1
 800537a:	f43f af54 	beq.w	8005226 <_printf_float+0xb6>
 800537e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005382:	4543      	cmp	r3, r8
 8005384:	db02      	blt.n	800538c <_printf_float+0x21c>
 8005386:	6823      	ldr	r3, [r4, #0]
 8005388:	07d8      	lsls	r0, r3, #31
 800538a:	d50f      	bpl.n	80053ac <_printf_float+0x23c>
 800538c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005390:	4631      	mov	r1, r6
 8005392:	4628      	mov	r0, r5
 8005394:	47b8      	blx	r7
 8005396:	3001      	adds	r0, #1
 8005398:	f43f af45 	beq.w	8005226 <_printf_float+0xb6>
 800539c:	f04f 0900 	mov.w	r9, #0
 80053a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80053a4:	f104 0a1a 	add.w	sl, r4, #26
 80053a8:	45c8      	cmp	r8, r9
 80053aa:	dc09      	bgt.n	80053c0 <_printf_float+0x250>
 80053ac:	6823      	ldr	r3, [r4, #0]
 80053ae:	079b      	lsls	r3, r3, #30
 80053b0:	f100 8103 	bmi.w	80055ba <_printf_float+0x44a>
 80053b4:	68e0      	ldr	r0, [r4, #12]
 80053b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053b8:	4298      	cmp	r0, r3
 80053ba:	bfb8      	it	lt
 80053bc:	4618      	movlt	r0, r3
 80053be:	e734      	b.n	800522a <_printf_float+0xba>
 80053c0:	2301      	movs	r3, #1
 80053c2:	4652      	mov	r2, sl
 80053c4:	4631      	mov	r1, r6
 80053c6:	4628      	mov	r0, r5
 80053c8:	47b8      	blx	r7
 80053ca:	3001      	adds	r0, #1
 80053cc:	f43f af2b 	beq.w	8005226 <_printf_float+0xb6>
 80053d0:	f109 0901 	add.w	r9, r9, #1
 80053d4:	e7e8      	b.n	80053a8 <_printf_float+0x238>
 80053d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	dc39      	bgt.n	8005450 <_printf_float+0x2e0>
 80053dc:	4a1b      	ldr	r2, [pc, #108]	@ (800544c <_printf_float+0x2dc>)
 80053de:	2301      	movs	r3, #1
 80053e0:	4631      	mov	r1, r6
 80053e2:	4628      	mov	r0, r5
 80053e4:	47b8      	blx	r7
 80053e6:	3001      	adds	r0, #1
 80053e8:	f43f af1d 	beq.w	8005226 <_printf_float+0xb6>
 80053ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80053f0:	ea59 0303 	orrs.w	r3, r9, r3
 80053f4:	d102      	bne.n	80053fc <_printf_float+0x28c>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	07d9      	lsls	r1, r3, #31
 80053fa:	d5d7      	bpl.n	80053ac <_printf_float+0x23c>
 80053fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005400:	4631      	mov	r1, r6
 8005402:	4628      	mov	r0, r5
 8005404:	47b8      	blx	r7
 8005406:	3001      	adds	r0, #1
 8005408:	f43f af0d 	beq.w	8005226 <_printf_float+0xb6>
 800540c:	f04f 0a00 	mov.w	sl, #0
 8005410:	f104 0b1a 	add.w	fp, r4, #26
 8005414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005416:	425b      	negs	r3, r3
 8005418:	4553      	cmp	r3, sl
 800541a:	dc01      	bgt.n	8005420 <_printf_float+0x2b0>
 800541c:	464b      	mov	r3, r9
 800541e:	e793      	b.n	8005348 <_printf_float+0x1d8>
 8005420:	2301      	movs	r3, #1
 8005422:	465a      	mov	r2, fp
 8005424:	4631      	mov	r1, r6
 8005426:	4628      	mov	r0, r5
 8005428:	47b8      	blx	r7
 800542a:	3001      	adds	r0, #1
 800542c:	f43f aefb 	beq.w	8005226 <_printf_float+0xb6>
 8005430:	f10a 0a01 	add.w	sl, sl, #1
 8005434:	e7ee      	b.n	8005414 <_printf_float+0x2a4>
 8005436:	bf00      	nop
 8005438:	7fefffff 	.word	0x7fefffff
 800543c:	0800a200 	.word	0x0800a200
 8005440:	0800a204 	.word	0x0800a204
 8005444:	0800a208 	.word	0x0800a208
 8005448:	0800a20c 	.word	0x0800a20c
 800544c:	0800a5a0 	.word	0x0800a5a0
 8005450:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005452:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005456:	4553      	cmp	r3, sl
 8005458:	bfa8      	it	ge
 800545a:	4653      	movge	r3, sl
 800545c:	2b00      	cmp	r3, #0
 800545e:	4699      	mov	r9, r3
 8005460:	dc36      	bgt.n	80054d0 <_printf_float+0x360>
 8005462:	f04f 0b00 	mov.w	fp, #0
 8005466:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800546a:	f104 021a 	add.w	r2, r4, #26
 800546e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005470:	9306      	str	r3, [sp, #24]
 8005472:	eba3 0309 	sub.w	r3, r3, r9
 8005476:	455b      	cmp	r3, fp
 8005478:	dc31      	bgt.n	80054de <_printf_float+0x36e>
 800547a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800547c:	459a      	cmp	sl, r3
 800547e:	dc3a      	bgt.n	80054f6 <_printf_float+0x386>
 8005480:	6823      	ldr	r3, [r4, #0]
 8005482:	07da      	lsls	r2, r3, #31
 8005484:	d437      	bmi.n	80054f6 <_printf_float+0x386>
 8005486:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005488:	ebaa 0903 	sub.w	r9, sl, r3
 800548c:	9b06      	ldr	r3, [sp, #24]
 800548e:	ebaa 0303 	sub.w	r3, sl, r3
 8005492:	4599      	cmp	r9, r3
 8005494:	bfa8      	it	ge
 8005496:	4699      	movge	r9, r3
 8005498:	f1b9 0f00 	cmp.w	r9, #0
 800549c:	dc33      	bgt.n	8005506 <_printf_float+0x396>
 800549e:	f04f 0800 	mov.w	r8, #0
 80054a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80054a6:	f104 0b1a 	add.w	fp, r4, #26
 80054aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ac:	ebaa 0303 	sub.w	r3, sl, r3
 80054b0:	eba3 0309 	sub.w	r3, r3, r9
 80054b4:	4543      	cmp	r3, r8
 80054b6:	f77f af79 	ble.w	80053ac <_printf_float+0x23c>
 80054ba:	2301      	movs	r3, #1
 80054bc:	465a      	mov	r2, fp
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f aeae 	beq.w	8005226 <_printf_float+0xb6>
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	e7ec      	b.n	80054aa <_printf_float+0x33a>
 80054d0:	4642      	mov	r2, r8
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	d1c2      	bne.n	8005462 <_printf_float+0x2f2>
 80054dc:	e6a3      	b.n	8005226 <_printf_float+0xb6>
 80054de:	2301      	movs	r3, #1
 80054e0:	4631      	mov	r1, r6
 80054e2:	4628      	mov	r0, r5
 80054e4:	9206      	str	r2, [sp, #24]
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae9c 	beq.w	8005226 <_printf_float+0xb6>
 80054ee:	9a06      	ldr	r2, [sp, #24]
 80054f0:	f10b 0b01 	add.w	fp, fp, #1
 80054f4:	e7bb      	b.n	800546e <_printf_float+0x2fe>
 80054f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	d1c0      	bne.n	8005486 <_printf_float+0x316>
 8005504:	e68f      	b.n	8005226 <_printf_float+0xb6>
 8005506:	9a06      	ldr	r2, [sp, #24]
 8005508:	464b      	mov	r3, r9
 800550a:	4442      	add	r2, r8
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	47b8      	blx	r7
 8005512:	3001      	adds	r0, #1
 8005514:	d1c3      	bne.n	800549e <_printf_float+0x32e>
 8005516:	e686      	b.n	8005226 <_printf_float+0xb6>
 8005518:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800551c:	f1ba 0f01 	cmp.w	sl, #1
 8005520:	dc01      	bgt.n	8005526 <_printf_float+0x3b6>
 8005522:	07db      	lsls	r3, r3, #31
 8005524:	d536      	bpl.n	8005594 <_printf_float+0x424>
 8005526:	2301      	movs	r3, #1
 8005528:	4642      	mov	r2, r8
 800552a:	4631      	mov	r1, r6
 800552c:	4628      	mov	r0, r5
 800552e:	47b8      	blx	r7
 8005530:	3001      	adds	r0, #1
 8005532:	f43f ae78 	beq.w	8005226 <_printf_float+0xb6>
 8005536:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	47b8      	blx	r7
 8005540:	3001      	adds	r0, #1
 8005542:	f43f ae70 	beq.w	8005226 <_printf_float+0xb6>
 8005546:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005552:	f7fb fac1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005556:	b9c0      	cbnz	r0, 800558a <_printf_float+0x41a>
 8005558:	4653      	mov	r3, sl
 800555a:	f108 0201 	add.w	r2, r8, #1
 800555e:	4631      	mov	r1, r6
 8005560:	4628      	mov	r0, r5
 8005562:	47b8      	blx	r7
 8005564:	3001      	adds	r0, #1
 8005566:	d10c      	bne.n	8005582 <_printf_float+0x412>
 8005568:	e65d      	b.n	8005226 <_printf_float+0xb6>
 800556a:	2301      	movs	r3, #1
 800556c:	465a      	mov	r2, fp
 800556e:	4631      	mov	r1, r6
 8005570:	4628      	mov	r0, r5
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f ae56 	beq.w	8005226 <_printf_float+0xb6>
 800557a:	f108 0801 	add.w	r8, r8, #1
 800557e:	45d0      	cmp	r8, sl
 8005580:	dbf3      	blt.n	800556a <_printf_float+0x3fa>
 8005582:	464b      	mov	r3, r9
 8005584:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005588:	e6df      	b.n	800534a <_printf_float+0x1da>
 800558a:	f04f 0800 	mov.w	r8, #0
 800558e:	f104 0b1a 	add.w	fp, r4, #26
 8005592:	e7f4      	b.n	800557e <_printf_float+0x40e>
 8005594:	2301      	movs	r3, #1
 8005596:	4642      	mov	r2, r8
 8005598:	e7e1      	b.n	800555e <_printf_float+0x3ee>
 800559a:	2301      	movs	r3, #1
 800559c:	464a      	mov	r2, r9
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f ae3e 	beq.w	8005226 <_printf_float+0xb6>
 80055aa:	f108 0801 	add.w	r8, r8, #1
 80055ae:	68e3      	ldr	r3, [r4, #12]
 80055b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80055b2:	1a5b      	subs	r3, r3, r1
 80055b4:	4543      	cmp	r3, r8
 80055b6:	dcf0      	bgt.n	800559a <_printf_float+0x42a>
 80055b8:	e6fc      	b.n	80053b4 <_printf_float+0x244>
 80055ba:	f04f 0800 	mov.w	r8, #0
 80055be:	f104 0919 	add.w	r9, r4, #25
 80055c2:	e7f4      	b.n	80055ae <_printf_float+0x43e>

080055c4 <_printf_common>:
 80055c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c8:	4616      	mov	r6, r2
 80055ca:	4698      	mov	r8, r3
 80055cc:	688a      	ldr	r2, [r1, #8]
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055d4:	4293      	cmp	r3, r2
 80055d6:	bfb8      	it	lt
 80055d8:	4613      	movlt	r3, r2
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80055e0:	4607      	mov	r7, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b10a      	cbz	r2, 80055ea <_printf_common+0x26>
 80055e6:	3301      	adds	r3, #1
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	0699      	lsls	r1, r3, #26
 80055ee:	bf42      	ittt	mi
 80055f0:	6833      	ldrmi	r3, [r6, #0]
 80055f2:	3302      	addmi	r3, #2
 80055f4:	6033      	strmi	r3, [r6, #0]
 80055f6:	6825      	ldr	r5, [r4, #0]
 80055f8:	f015 0506 	ands.w	r5, r5, #6
 80055fc:	d106      	bne.n	800560c <_printf_common+0x48>
 80055fe:	f104 0a19 	add.w	sl, r4, #25
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	6832      	ldr	r2, [r6, #0]
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	42ab      	cmp	r3, r5
 800560a:	dc26      	bgt.n	800565a <_printf_common+0x96>
 800560c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005610:	6822      	ldr	r2, [r4, #0]
 8005612:	3b00      	subs	r3, #0
 8005614:	bf18      	it	ne
 8005616:	2301      	movne	r3, #1
 8005618:	0692      	lsls	r2, r2, #26
 800561a:	d42b      	bmi.n	8005674 <_printf_common+0xb0>
 800561c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005620:	4641      	mov	r1, r8
 8005622:	4638      	mov	r0, r7
 8005624:	47c8      	blx	r9
 8005626:	3001      	adds	r0, #1
 8005628:	d01e      	beq.n	8005668 <_printf_common+0xa4>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	6922      	ldr	r2, [r4, #16]
 800562e:	f003 0306 	and.w	r3, r3, #6
 8005632:	2b04      	cmp	r3, #4
 8005634:	bf02      	ittt	eq
 8005636:	68e5      	ldreq	r5, [r4, #12]
 8005638:	6833      	ldreq	r3, [r6, #0]
 800563a:	1aed      	subeq	r5, r5, r3
 800563c:	68a3      	ldr	r3, [r4, #8]
 800563e:	bf0c      	ite	eq
 8005640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005644:	2500      	movne	r5, #0
 8005646:	4293      	cmp	r3, r2
 8005648:	bfc4      	itt	gt
 800564a:	1a9b      	subgt	r3, r3, r2
 800564c:	18ed      	addgt	r5, r5, r3
 800564e:	2600      	movs	r6, #0
 8005650:	341a      	adds	r4, #26
 8005652:	42b5      	cmp	r5, r6
 8005654:	d11a      	bne.n	800568c <_printf_common+0xc8>
 8005656:	2000      	movs	r0, #0
 8005658:	e008      	b.n	800566c <_printf_common+0xa8>
 800565a:	2301      	movs	r3, #1
 800565c:	4652      	mov	r2, sl
 800565e:	4641      	mov	r1, r8
 8005660:	4638      	mov	r0, r7
 8005662:	47c8      	blx	r9
 8005664:	3001      	adds	r0, #1
 8005666:	d103      	bne.n	8005670 <_printf_common+0xac>
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005670:	3501      	adds	r5, #1
 8005672:	e7c6      	b.n	8005602 <_printf_common+0x3e>
 8005674:	18e1      	adds	r1, r4, r3
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	2030      	movs	r0, #48	@ 0x30
 800567a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800567e:	4422      	add	r2, r4
 8005680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005688:	3302      	adds	r3, #2
 800568a:	e7c7      	b.n	800561c <_printf_common+0x58>
 800568c:	2301      	movs	r3, #1
 800568e:	4622      	mov	r2, r4
 8005690:	4641      	mov	r1, r8
 8005692:	4638      	mov	r0, r7
 8005694:	47c8      	blx	r9
 8005696:	3001      	adds	r0, #1
 8005698:	d0e6      	beq.n	8005668 <_printf_common+0xa4>
 800569a:	3601      	adds	r6, #1
 800569c:	e7d9      	b.n	8005652 <_printf_common+0x8e>
	...

080056a0 <_printf_i>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	7e0f      	ldrb	r7, [r1, #24]
 80056a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80056a8:	2f78      	cmp	r7, #120	@ 0x78
 80056aa:	4691      	mov	r9, r2
 80056ac:	4680      	mov	r8, r0
 80056ae:	460c      	mov	r4, r1
 80056b0:	469a      	mov	sl, r3
 80056b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80056b6:	d807      	bhi.n	80056c8 <_printf_i+0x28>
 80056b8:	2f62      	cmp	r7, #98	@ 0x62
 80056ba:	d80a      	bhi.n	80056d2 <_printf_i+0x32>
 80056bc:	2f00      	cmp	r7, #0
 80056be:	f000 80d2 	beq.w	8005866 <_printf_i+0x1c6>
 80056c2:	2f58      	cmp	r7, #88	@ 0x58
 80056c4:	f000 80b9 	beq.w	800583a <_printf_i+0x19a>
 80056c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80056d0:	e03a      	b.n	8005748 <_printf_i+0xa8>
 80056d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80056d6:	2b15      	cmp	r3, #21
 80056d8:	d8f6      	bhi.n	80056c8 <_printf_i+0x28>
 80056da:	a101      	add	r1, pc, #4	@ (adr r1, 80056e0 <_printf_i+0x40>)
 80056dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80056e0:	08005739 	.word	0x08005739
 80056e4:	0800574d 	.word	0x0800574d
 80056e8:	080056c9 	.word	0x080056c9
 80056ec:	080056c9 	.word	0x080056c9
 80056f0:	080056c9 	.word	0x080056c9
 80056f4:	080056c9 	.word	0x080056c9
 80056f8:	0800574d 	.word	0x0800574d
 80056fc:	080056c9 	.word	0x080056c9
 8005700:	080056c9 	.word	0x080056c9
 8005704:	080056c9 	.word	0x080056c9
 8005708:	080056c9 	.word	0x080056c9
 800570c:	0800584d 	.word	0x0800584d
 8005710:	08005777 	.word	0x08005777
 8005714:	08005807 	.word	0x08005807
 8005718:	080056c9 	.word	0x080056c9
 800571c:	080056c9 	.word	0x080056c9
 8005720:	0800586f 	.word	0x0800586f
 8005724:	080056c9 	.word	0x080056c9
 8005728:	08005777 	.word	0x08005777
 800572c:	080056c9 	.word	0x080056c9
 8005730:	080056c9 	.word	0x080056c9
 8005734:	0800580f 	.word	0x0800580f
 8005738:	6833      	ldr	r3, [r6, #0]
 800573a:	1d1a      	adds	r2, r3, #4
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6032      	str	r2, [r6, #0]
 8005740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005748:	2301      	movs	r3, #1
 800574a:	e09d      	b.n	8005888 <_printf_i+0x1e8>
 800574c:	6833      	ldr	r3, [r6, #0]
 800574e:	6820      	ldr	r0, [r4, #0]
 8005750:	1d19      	adds	r1, r3, #4
 8005752:	6031      	str	r1, [r6, #0]
 8005754:	0606      	lsls	r6, r0, #24
 8005756:	d501      	bpl.n	800575c <_printf_i+0xbc>
 8005758:	681d      	ldr	r5, [r3, #0]
 800575a:	e003      	b.n	8005764 <_printf_i+0xc4>
 800575c:	0645      	lsls	r5, r0, #25
 800575e:	d5fb      	bpl.n	8005758 <_printf_i+0xb8>
 8005760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005764:	2d00      	cmp	r5, #0
 8005766:	da03      	bge.n	8005770 <_printf_i+0xd0>
 8005768:	232d      	movs	r3, #45	@ 0x2d
 800576a:	426d      	negs	r5, r5
 800576c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005770:	4859      	ldr	r0, [pc, #356]	@ (80058d8 <_printf_i+0x238>)
 8005772:	230a      	movs	r3, #10
 8005774:	e011      	b.n	800579a <_printf_i+0xfa>
 8005776:	6821      	ldr	r1, [r4, #0]
 8005778:	6833      	ldr	r3, [r6, #0]
 800577a:	0608      	lsls	r0, r1, #24
 800577c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005780:	d402      	bmi.n	8005788 <_printf_i+0xe8>
 8005782:	0649      	lsls	r1, r1, #25
 8005784:	bf48      	it	mi
 8005786:	b2ad      	uxthmi	r5, r5
 8005788:	2f6f      	cmp	r7, #111	@ 0x6f
 800578a:	4853      	ldr	r0, [pc, #332]	@ (80058d8 <_printf_i+0x238>)
 800578c:	6033      	str	r3, [r6, #0]
 800578e:	bf14      	ite	ne
 8005790:	230a      	movne	r3, #10
 8005792:	2308      	moveq	r3, #8
 8005794:	2100      	movs	r1, #0
 8005796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800579a:	6866      	ldr	r6, [r4, #4]
 800579c:	60a6      	str	r6, [r4, #8]
 800579e:	2e00      	cmp	r6, #0
 80057a0:	bfa2      	ittt	ge
 80057a2:	6821      	ldrge	r1, [r4, #0]
 80057a4:	f021 0104 	bicge.w	r1, r1, #4
 80057a8:	6021      	strge	r1, [r4, #0]
 80057aa:	b90d      	cbnz	r5, 80057b0 <_printf_i+0x110>
 80057ac:	2e00      	cmp	r6, #0
 80057ae:	d04b      	beq.n	8005848 <_printf_i+0x1a8>
 80057b0:	4616      	mov	r6, r2
 80057b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80057b6:	fb03 5711 	mls	r7, r3, r1, r5
 80057ba:	5dc7      	ldrb	r7, [r0, r7]
 80057bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057c0:	462f      	mov	r7, r5
 80057c2:	42bb      	cmp	r3, r7
 80057c4:	460d      	mov	r5, r1
 80057c6:	d9f4      	bls.n	80057b2 <_printf_i+0x112>
 80057c8:	2b08      	cmp	r3, #8
 80057ca:	d10b      	bne.n	80057e4 <_printf_i+0x144>
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	07df      	lsls	r7, r3, #31
 80057d0:	d508      	bpl.n	80057e4 <_printf_i+0x144>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	6861      	ldr	r1, [r4, #4]
 80057d6:	4299      	cmp	r1, r3
 80057d8:	bfde      	ittt	le
 80057da:	2330      	movle	r3, #48	@ 0x30
 80057dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057e4:	1b92      	subs	r2, r2, r6
 80057e6:	6122      	str	r2, [r4, #16]
 80057e8:	f8cd a000 	str.w	sl, [sp]
 80057ec:	464b      	mov	r3, r9
 80057ee:	aa03      	add	r2, sp, #12
 80057f0:	4621      	mov	r1, r4
 80057f2:	4640      	mov	r0, r8
 80057f4:	f7ff fee6 	bl	80055c4 <_printf_common>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d14a      	bne.n	8005892 <_printf_i+0x1f2>
 80057fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005800:	b004      	add	sp, #16
 8005802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	f043 0320 	orr.w	r3, r3, #32
 800580c:	6023      	str	r3, [r4, #0]
 800580e:	4833      	ldr	r0, [pc, #204]	@ (80058dc <_printf_i+0x23c>)
 8005810:	2778      	movs	r7, #120	@ 0x78
 8005812:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	6831      	ldr	r1, [r6, #0]
 800581a:	061f      	lsls	r7, r3, #24
 800581c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005820:	d402      	bmi.n	8005828 <_printf_i+0x188>
 8005822:	065f      	lsls	r7, r3, #25
 8005824:	bf48      	it	mi
 8005826:	b2ad      	uxthmi	r5, r5
 8005828:	6031      	str	r1, [r6, #0]
 800582a:	07d9      	lsls	r1, r3, #31
 800582c:	bf44      	itt	mi
 800582e:	f043 0320 	orrmi.w	r3, r3, #32
 8005832:	6023      	strmi	r3, [r4, #0]
 8005834:	b11d      	cbz	r5, 800583e <_printf_i+0x19e>
 8005836:	2310      	movs	r3, #16
 8005838:	e7ac      	b.n	8005794 <_printf_i+0xf4>
 800583a:	4827      	ldr	r0, [pc, #156]	@ (80058d8 <_printf_i+0x238>)
 800583c:	e7e9      	b.n	8005812 <_printf_i+0x172>
 800583e:	6823      	ldr	r3, [r4, #0]
 8005840:	f023 0320 	bic.w	r3, r3, #32
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	e7f6      	b.n	8005836 <_printf_i+0x196>
 8005848:	4616      	mov	r6, r2
 800584a:	e7bd      	b.n	80057c8 <_printf_i+0x128>
 800584c:	6833      	ldr	r3, [r6, #0]
 800584e:	6825      	ldr	r5, [r4, #0]
 8005850:	6961      	ldr	r1, [r4, #20]
 8005852:	1d18      	adds	r0, r3, #4
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	062e      	lsls	r6, r5, #24
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	d501      	bpl.n	8005860 <_printf_i+0x1c0>
 800585c:	6019      	str	r1, [r3, #0]
 800585e:	e002      	b.n	8005866 <_printf_i+0x1c6>
 8005860:	0668      	lsls	r0, r5, #25
 8005862:	d5fb      	bpl.n	800585c <_printf_i+0x1bc>
 8005864:	8019      	strh	r1, [r3, #0]
 8005866:	2300      	movs	r3, #0
 8005868:	6123      	str	r3, [r4, #16]
 800586a:	4616      	mov	r6, r2
 800586c:	e7bc      	b.n	80057e8 <_printf_i+0x148>
 800586e:	6833      	ldr	r3, [r6, #0]
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	6032      	str	r2, [r6, #0]
 8005874:	681e      	ldr	r6, [r3, #0]
 8005876:	6862      	ldr	r2, [r4, #4]
 8005878:	2100      	movs	r1, #0
 800587a:	4630      	mov	r0, r6
 800587c:	f7fa fcb0 	bl	80001e0 <memchr>
 8005880:	b108      	cbz	r0, 8005886 <_printf_i+0x1e6>
 8005882:	1b80      	subs	r0, r0, r6
 8005884:	6060      	str	r0, [r4, #4]
 8005886:	6863      	ldr	r3, [r4, #4]
 8005888:	6123      	str	r3, [r4, #16]
 800588a:	2300      	movs	r3, #0
 800588c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005890:	e7aa      	b.n	80057e8 <_printf_i+0x148>
 8005892:	6923      	ldr	r3, [r4, #16]
 8005894:	4632      	mov	r2, r6
 8005896:	4649      	mov	r1, r9
 8005898:	4640      	mov	r0, r8
 800589a:	47d0      	blx	sl
 800589c:	3001      	adds	r0, #1
 800589e:	d0ad      	beq.n	80057fc <_printf_i+0x15c>
 80058a0:	6823      	ldr	r3, [r4, #0]
 80058a2:	079b      	lsls	r3, r3, #30
 80058a4:	d413      	bmi.n	80058ce <_printf_i+0x22e>
 80058a6:	68e0      	ldr	r0, [r4, #12]
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	4298      	cmp	r0, r3
 80058ac:	bfb8      	it	lt
 80058ae:	4618      	movlt	r0, r3
 80058b0:	e7a6      	b.n	8005800 <_printf_i+0x160>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4632      	mov	r2, r6
 80058b6:	4649      	mov	r1, r9
 80058b8:	4640      	mov	r0, r8
 80058ba:	47d0      	blx	sl
 80058bc:	3001      	adds	r0, #1
 80058be:	d09d      	beq.n	80057fc <_printf_i+0x15c>
 80058c0:	3501      	adds	r5, #1
 80058c2:	68e3      	ldr	r3, [r4, #12]
 80058c4:	9903      	ldr	r1, [sp, #12]
 80058c6:	1a5b      	subs	r3, r3, r1
 80058c8:	42ab      	cmp	r3, r5
 80058ca:	dcf2      	bgt.n	80058b2 <_printf_i+0x212>
 80058cc:	e7eb      	b.n	80058a6 <_printf_i+0x206>
 80058ce:	2500      	movs	r5, #0
 80058d0:	f104 0619 	add.w	r6, r4, #25
 80058d4:	e7f5      	b.n	80058c2 <_printf_i+0x222>
 80058d6:	bf00      	nop
 80058d8:	0800a210 	.word	0x0800a210
 80058dc:	0800a221 	.word	0x0800a221

080058e0 <_scanf_float>:
 80058e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b087      	sub	sp, #28
 80058e6:	4617      	mov	r7, r2
 80058e8:	9303      	str	r3, [sp, #12]
 80058ea:	688b      	ldr	r3, [r1, #8]
 80058ec:	1e5a      	subs	r2, r3, #1
 80058ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80058f2:	bf81      	itttt	hi
 80058f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058f8:	eb03 0b05 	addhi.w	fp, r3, r5
 80058fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005900:	608b      	strhi	r3, [r1, #8]
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	460a      	mov	r2, r1
 8005906:	f04f 0500 	mov.w	r5, #0
 800590a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800590e:	f842 3b1c 	str.w	r3, [r2], #28
 8005912:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005916:	4680      	mov	r8, r0
 8005918:	460c      	mov	r4, r1
 800591a:	bf98      	it	ls
 800591c:	f04f 0b00 	movls.w	fp, #0
 8005920:	9201      	str	r2, [sp, #4]
 8005922:	4616      	mov	r6, r2
 8005924:	46aa      	mov	sl, r5
 8005926:	46a9      	mov	r9, r5
 8005928:	9502      	str	r5, [sp, #8]
 800592a:	68a2      	ldr	r2, [r4, #8]
 800592c:	b152      	cbz	r2, 8005944 <_scanf_float+0x64>
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	2b4e      	cmp	r3, #78	@ 0x4e
 8005934:	d864      	bhi.n	8005a00 <_scanf_float+0x120>
 8005936:	2b40      	cmp	r3, #64	@ 0x40
 8005938:	d83c      	bhi.n	80059b4 <_scanf_float+0xd4>
 800593a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800593e:	b2c8      	uxtb	r0, r1
 8005940:	280e      	cmp	r0, #14
 8005942:	d93a      	bls.n	80059ba <_scanf_float+0xda>
 8005944:	f1b9 0f00 	cmp.w	r9, #0
 8005948:	d003      	beq.n	8005952 <_scanf_float+0x72>
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005956:	f1ba 0f01 	cmp.w	sl, #1
 800595a:	f200 8117 	bhi.w	8005b8c <_scanf_float+0x2ac>
 800595e:	9b01      	ldr	r3, [sp, #4]
 8005960:	429e      	cmp	r6, r3
 8005962:	f200 8108 	bhi.w	8005b76 <_scanf_float+0x296>
 8005966:	2001      	movs	r0, #1
 8005968:	b007      	add	sp, #28
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800596e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005972:	2a0d      	cmp	r2, #13
 8005974:	d8e6      	bhi.n	8005944 <_scanf_float+0x64>
 8005976:	a101      	add	r1, pc, #4	@ (adr r1, 800597c <_scanf_float+0x9c>)
 8005978:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800597c:	08005ac3 	.word	0x08005ac3
 8005980:	08005945 	.word	0x08005945
 8005984:	08005945 	.word	0x08005945
 8005988:	08005945 	.word	0x08005945
 800598c:	08005b23 	.word	0x08005b23
 8005990:	08005afb 	.word	0x08005afb
 8005994:	08005945 	.word	0x08005945
 8005998:	08005945 	.word	0x08005945
 800599c:	08005ad1 	.word	0x08005ad1
 80059a0:	08005945 	.word	0x08005945
 80059a4:	08005945 	.word	0x08005945
 80059a8:	08005945 	.word	0x08005945
 80059ac:	08005945 	.word	0x08005945
 80059b0:	08005a89 	.word	0x08005a89
 80059b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80059b8:	e7db      	b.n	8005972 <_scanf_float+0x92>
 80059ba:	290e      	cmp	r1, #14
 80059bc:	d8c2      	bhi.n	8005944 <_scanf_float+0x64>
 80059be:	a001      	add	r0, pc, #4	@ (adr r0, 80059c4 <_scanf_float+0xe4>)
 80059c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80059c4:	08005a79 	.word	0x08005a79
 80059c8:	08005945 	.word	0x08005945
 80059cc:	08005a79 	.word	0x08005a79
 80059d0:	08005b0f 	.word	0x08005b0f
 80059d4:	08005945 	.word	0x08005945
 80059d8:	08005a21 	.word	0x08005a21
 80059dc:	08005a5f 	.word	0x08005a5f
 80059e0:	08005a5f 	.word	0x08005a5f
 80059e4:	08005a5f 	.word	0x08005a5f
 80059e8:	08005a5f 	.word	0x08005a5f
 80059ec:	08005a5f 	.word	0x08005a5f
 80059f0:	08005a5f 	.word	0x08005a5f
 80059f4:	08005a5f 	.word	0x08005a5f
 80059f8:	08005a5f 	.word	0x08005a5f
 80059fc:	08005a5f 	.word	0x08005a5f
 8005a00:	2b6e      	cmp	r3, #110	@ 0x6e
 8005a02:	d809      	bhi.n	8005a18 <_scanf_float+0x138>
 8005a04:	2b60      	cmp	r3, #96	@ 0x60
 8005a06:	d8b2      	bhi.n	800596e <_scanf_float+0x8e>
 8005a08:	2b54      	cmp	r3, #84	@ 0x54
 8005a0a:	d07b      	beq.n	8005b04 <_scanf_float+0x224>
 8005a0c:	2b59      	cmp	r3, #89	@ 0x59
 8005a0e:	d199      	bne.n	8005944 <_scanf_float+0x64>
 8005a10:	2d07      	cmp	r5, #7
 8005a12:	d197      	bne.n	8005944 <_scanf_float+0x64>
 8005a14:	2508      	movs	r5, #8
 8005a16:	e02c      	b.n	8005a72 <_scanf_float+0x192>
 8005a18:	2b74      	cmp	r3, #116	@ 0x74
 8005a1a:	d073      	beq.n	8005b04 <_scanf_float+0x224>
 8005a1c:	2b79      	cmp	r3, #121	@ 0x79
 8005a1e:	e7f6      	b.n	8005a0e <_scanf_float+0x12e>
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	05c8      	lsls	r0, r1, #23
 8005a24:	d51b      	bpl.n	8005a5e <_scanf_float+0x17e>
 8005a26:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005a2a:	6021      	str	r1, [r4, #0]
 8005a2c:	f109 0901 	add.w	r9, r9, #1
 8005a30:	f1bb 0f00 	cmp.w	fp, #0
 8005a34:	d003      	beq.n	8005a3e <_scanf_float+0x15e>
 8005a36:	3201      	adds	r2, #1
 8005a38:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a3c:	60a2      	str	r2, [r4, #8]
 8005a3e:	68a3      	ldr	r3, [r4, #8]
 8005a40:	3b01      	subs	r3, #1
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	6923      	ldr	r3, [r4, #16]
 8005a46:	3301      	adds	r3, #1
 8005a48:	6123      	str	r3, [r4, #16]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	607b      	str	r3, [r7, #4]
 8005a52:	f340 8087 	ble.w	8005b64 <_scanf_float+0x284>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	603b      	str	r3, [r7, #0]
 8005a5c:	e765      	b.n	800592a <_scanf_float+0x4a>
 8005a5e:	eb1a 0105 	adds.w	r1, sl, r5
 8005a62:	f47f af6f 	bne.w	8005944 <_scanf_float+0x64>
 8005a66:	6822      	ldr	r2, [r4, #0]
 8005a68:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a6c:	6022      	str	r2, [r4, #0]
 8005a6e:	460d      	mov	r5, r1
 8005a70:	468a      	mov	sl, r1
 8005a72:	f806 3b01 	strb.w	r3, [r6], #1
 8005a76:	e7e2      	b.n	8005a3e <_scanf_float+0x15e>
 8005a78:	6822      	ldr	r2, [r4, #0]
 8005a7a:	0610      	lsls	r0, r2, #24
 8005a7c:	f57f af62 	bpl.w	8005944 <_scanf_float+0x64>
 8005a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	e7f4      	b.n	8005a72 <_scanf_float+0x192>
 8005a88:	f1ba 0f00 	cmp.w	sl, #0
 8005a8c:	d10e      	bne.n	8005aac <_scanf_float+0x1cc>
 8005a8e:	f1b9 0f00 	cmp.w	r9, #0
 8005a92:	d10e      	bne.n	8005ab2 <_scanf_float+0x1d2>
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a9a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a9e:	d108      	bne.n	8005ab2 <_scanf_float+0x1d2>
 8005aa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aa4:	6022      	str	r2, [r4, #0]
 8005aa6:	f04f 0a01 	mov.w	sl, #1
 8005aaa:	e7e2      	b.n	8005a72 <_scanf_float+0x192>
 8005aac:	f1ba 0f02 	cmp.w	sl, #2
 8005ab0:	d055      	beq.n	8005b5e <_scanf_float+0x27e>
 8005ab2:	2d01      	cmp	r5, #1
 8005ab4:	d002      	beq.n	8005abc <_scanf_float+0x1dc>
 8005ab6:	2d04      	cmp	r5, #4
 8005ab8:	f47f af44 	bne.w	8005944 <_scanf_float+0x64>
 8005abc:	3501      	adds	r5, #1
 8005abe:	b2ed      	uxtb	r5, r5
 8005ac0:	e7d7      	b.n	8005a72 <_scanf_float+0x192>
 8005ac2:	f1ba 0f01 	cmp.w	sl, #1
 8005ac6:	f47f af3d 	bne.w	8005944 <_scanf_float+0x64>
 8005aca:	f04f 0a02 	mov.w	sl, #2
 8005ace:	e7d0      	b.n	8005a72 <_scanf_float+0x192>
 8005ad0:	b97d      	cbnz	r5, 8005af2 <_scanf_float+0x212>
 8005ad2:	f1b9 0f00 	cmp.w	r9, #0
 8005ad6:	f47f af38 	bne.w	800594a <_scanf_float+0x6a>
 8005ada:	6822      	ldr	r2, [r4, #0]
 8005adc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005ae0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005ae4:	f040 8108 	bne.w	8005cf8 <_scanf_float+0x418>
 8005ae8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aec:	6022      	str	r2, [r4, #0]
 8005aee:	2501      	movs	r5, #1
 8005af0:	e7bf      	b.n	8005a72 <_scanf_float+0x192>
 8005af2:	2d03      	cmp	r5, #3
 8005af4:	d0e2      	beq.n	8005abc <_scanf_float+0x1dc>
 8005af6:	2d05      	cmp	r5, #5
 8005af8:	e7de      	b.n	8005ab8 <_scanf_float+0x1d8>
 8005afa:	2d02      	cmp	r5, #2
 8005afc:	f47f af22 	bne.w	8005944 <_scanf_float+0x64>
 8005b00:	2503      	movs	r5, #3
 8005b02:	e7b6      	b.n	8005a72 <_scanf_float+0x192>
 8005b04:	2d06      	cmp	r5, #6
 8005b06:	f47f af1d 	bne.w	8005944 <_scanf_float+0x64>
 8005b0a:	2507      	movs	r5, #7
 8005b0c:	e7b1      	b.n	8005a72 <_scanf_float+0x192>
 8005b0e:	6822      	ldr	r2, [r4, #0]
 8005b10:	0591      	lsls	r1, r2, #22
 8005b12:	f57f af17 	bpl.w	8005944 <_scanf_float+0x64>
 8005b16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005b1a:	6022      	str	r2, [r4, #0]
 8005b1c:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b20:	e7a7      	b.n	8005a72 <_scanf_float+0x192>
 8005b22:	6822      	ldr	r2, [r4, #0]
 8005b24:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005b28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005b2c:	d006      	beq.n	8005b3c <_scanf_float+0x25c>
 8005b2e:	0550      	lsls	r0, r2, #21
 8005b30:	f57f af08 	bpl.w	8005944 <_scanf_float+0x64>
 8005b34:	f1b9 0f00 	cmp.w	r9, #0
 8005b38:	f000 80de 	beq.w	8005cf8 <_scanf_float+0x418>
 8005b3c:	0591      	lsls	r1, r2, #22
 8005b3e:	bf58      	it	pl
 8005b40:	9902      	ldrpl	r1, [sp, #8]
 8005b42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005b46:	bf58      	it	pl
 8005b48:	eba9 0101 	subpl.w	r1, r9, r1
 8005b4c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005b50:	bf58      	it	pl
 8005b52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005b56:	6022      	str	r2, [r4, #0]
 8005b58:	f04f 0900 	mov.w	r9, #0
 8005b5c:	e789      	b.n	8005a72 <_scanf_float+0x192>
 8005b5e:	f04f 0a03 	mov.w	sl, #3
 8005b62:	e786      	b.n	8005a72 <_scanf_float+0x192>
 8005b64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b68:	4639      	mov	r1, r7
 8005b6a:	4640      	mov	r0, r8
 8005b6c:	4798      	blx	r3
 8005b6e:	2800      	cmp	r0, #0
 8005b70:	f43f aedb 	beq.w	800592a <_scanf_float+0x4a>
 8005b74:	e6e6      	b.n	8005944 <_scanf_float+0x64>
 8005b76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b7e:	463a      	mov	r2, r7
 8005b80:	4640      	mov	r0, r8
 8005b82:	4798      	blx	r3
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	6123      	str	r3, [r4, #16]
 8005b8a:	e6e8      	b.n	800595e <_scanf_float+0x7e>
 8005b8c:	1e6b      	subs	r3, r5, #1
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d824      	bhi.n	8005bdc <_scanf_float+0x2fc>
 8005b92:	2d02      	cmp	r5, #2
 8005b94:	d836      	bhi.n	8005c04 <_scanf_float+0x324>
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	429e      	cmp	r6, r3
 8005b9a:	f67f aee4 	bls.w	8005966 <_scanf_float+0x86>
 8005b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	4640      	mov	r0, r8
 8005baa:	4798      	blx	r3
 8005bac:	6923      	ldr	r3, [r4, #16]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	6123      	str	r3, [r4, #16]
 8005bb2:	e7f0      	b.n	8005b96 <_scanf_float+0x2b6>
 8005bb4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bb8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005bbc:	463a      	mov	r2, r7
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	4798      	blx	r3
 8005bc2:	6923      	ldr	r3, [r4, #16]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	6123      	str	r3, [r4, #16]
 8005bc8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bcc:	fa5f fa8a 	uxtb.w	sl, sl
 8005bd0:	f1ba 0f02 	cmp.w	sl, #2
 8005bd4:	d1ee      	bne.n	8005bb4 <_scanf_float+0x2d4>
 8005bd6:	3d03      	subs	r5, #3
 8005bd8:	b2ed      	uxtb	r5, r5
 8005bda:	1b76      	subs	r6, r6, r5
 8005bdc:	6823      	ldr	r3, [r4, #0]
 8005bde:	05da      	lsls	r2, r3, #23
 8005be0:	d530      	bpl.n	8005c44 <_scanf_float+0x364>
 8005be2:	055b      	lsls	r3, r3, #21
 8005be4:	d511      	bpl.n	8005c0a <_scanf_float+0x32a>
 8005be6:	9b01      	ldr	r3, [sp, #4]
 8005be8:	429e      	cmp	r6, r3
 8005bea:	f67f aebc 	bls.w	8005966 <_scanf_float+0x86>
 8005bee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005bf6:	463a      	mov	r2, r7
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4798      	blx	r3
 8005bfc:	6923      	ldr	r3, [r4, #16]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6123      	str	r3, [r4, #16]
 8005c02:	e7f0      	b.n	8005be6 <_scanf_float+0x306>
 8005c04:	46aa      	mov	sl, r5
 8005c06:	46b3      	mov	fp, r6
 8005c08:	e7de      	b.n	8005bc8 <_scanf_float+0x2e8>
 8005c0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005c0e:	6923      	ldr	r3, [r4, #16]
 8005c10:	2965      	cmp	r1, #101	@ 0x65
 8005c12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c16:	f106 35ff 	add.w	r5, r6, #4294967295
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	d00c      	beq.n	8005c38 <_scanf_float+0x358>
 8005c1e:	2945      	cmp	r1, #69	@ 0x45
 8005c20:	d00a      	beq.n	8005c38 <_scanf_float+0x358>
 8005c22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c26:	463a      	mov	r2, r7
 8005c28:	4640      	mov	r0, r8
 8005c2a:	4798      	blx	r3
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	1eb5      	subs	r5, r6, #2
 8005c36:	6123      	str	r3, [r4, #16]
 8005c38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4798      	blx	r3
 8005c42:	462e      	mov	r6, r5
 8005c44:	6822      	ldr	r2, [r4, #0]
 8005c46:	f012 0210 	ands.w	r2, r2, #16
 8005c4a:	d001      	beq.n	8005c50 <_scanf_float+0x370>
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	e68b      	b.n	8005968 <_scanf_float+0x88>
 8005c50:	7032      	strb	r2, [r6, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c5c:	d11c      	bne.n	8005c98 <_scanf_float+0x3b8>
 8005c5e:	9b02      	ldr	r3, [sp, #8]
 8005c60:	454b      	cmp	r3, r9
 8005c62:	eba3 0209 	sub.w	r2, r3, r9
 8005c66:	d123      	bne.n	8005cb0 <_scanf_float+0x3d0>
 8005c68:	9901      	ldr	r1, [sp, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4640      	mov	r0, r8
 8005c6e:	f002 fc7b 	bl	8008568 <_strtod_r>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	6821      	ldr	r1, [r4, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f011 0f02 	tst.w	r1, #2
 8005c7c:	ec57 6b10 	vmov	r6, r7, d0
 8005c80:	f103 0204 	add.w	r2, r3, #4
 8005c84:	d01f      	beq.n	8005cc6 <_scanf_float+0x3e6>
 8005c86:	9903      	ldr	r1, [sp, #12]
 8005c88:	600a      	str	r2, [r1, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	e9c3 6700 	strd	r6, r7, [r3]
 8005c90:	68e3      	ldr	r3, [r4, #12]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60e3      	str	r3, [r4, #12]
 8005c96:	e7d9      	b.n	8005c4c <_scanf_float+0x36c>
 8005c98:	9b04      	ldr	r3, [sp, #16]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d0e4      	beq.n	8005c68 <_scanf_float+0x388>
 8005c9e:	9905      	ldr	r1, [sp, #20]
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	3101      	adds	r1, #1
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	f002 fcdf 	bl	8008668 <_strtol_r>
 8005caa:	9b04      	ldr	r3, [sp, #16]
 8005cac:	9e05      	ldr	r6, [sp, #20]
 8005cae:	1ac2      	subs	r2, r0, r3
 8005cb0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005cb4:	429e      	cmp	r6, r3
 8005cb6:	bf28      	it	cs
 8005cb8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005cbc:	4910      	ldr	r1, [pc, #64]	@ (8005d00 <_scanf_float+0x420>)
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f000 f918 	bl	8005ef4 <siprintf>
 8005cc4:	e7d0      	b.n	8005c68 <_scanf_float+0x388>
 8005cc6:	f011 0f04 	tst.w	r1, #4
 8005cca:	9903      	ldr	r1, [sp, #12]
 8005ccc:	600a      	str	r2, [r1, #0]
 8005cce:	d1dc      	bne.n	8005c8a <_scanf_float+0x3aa>
 8005cd0:	681d      	ldr	r5, [r3, #0]
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	4630      	mov	r0, r6
 8005cd8:	4639      	mov	r1, r7
 8005cda:	f7fa ff2f 	bl	8000b3c <__aeabi_dcmpun>
 8005cde:	b128      	cbz	r0, 8005cec <_scanf_float+0x40c>
 8005ce0:	4808      	ldr	r0, [pc, #32]	@ (8005d04 <_scanf_float+0x424>)
 8005ce2:	f000 fa39 	bl	8006158 <nanf>
 8005ce6:	ed85 0a00 	vstr	s0, [r5]
 8005cea:	e7d1      	b.n	8005c90 <_scanf_float+0x3b0>
 8005cec:	4630      	mov	r0, r6
 8005cee:	4639      	mov	r1, r7
 8005cf0:	f7fa ff82 	bl	8000bf8 <__aeabi_d2f>
 8005cf4:	6028      	str	r0, [r5, #0]
 8005cf6:	e7cb      	b.n	8005c90 <_scanf_float+0x3b0>
 8005cf8:	f04f 0900 	mov.w	r9, #0
 8005cfc:	e629      	b.n	8005952 <_scanf_float+0x72>
 8005cfe:	bf00      	nop
 8005d00:	0800a232 	.word	0x0800a232
 8005d04:	0800a5e8 	.word	0x0800a5e8

08005d08 <std>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b510      	push	{r4, lr}
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d16:	6083      	str	r3, [r0, #8]
 8005d18:	8181      	strh	r1, [r0, #12]
 8005d1a:	6643      	str	r3, [r0, #100]	@ 0x64
 8005d1c:	81c2      	strh	r2, [r0, #14]
 8005d1e:	6183      	str	r3, [r0, #24]
 8005d20:	4619      	mov	r1, r3
 8005d22:	2208      	movs	r2, #8
 8005d24:	305c      	adds	r0, #92	@ 0x5c
 8005d26:	f000 f974 	bl	8006012 <memset>
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <std+0x58>)
 8005d2c:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <std+0x5c>)
 8005d30:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d32:	4b0d      	ldr	r3, [pc, #52]	@ (8005d68 <std+0x60>)
 8005d34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <std+0x64>)
 8005d38:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d70 <std+0x68>)
 8005d3c:	6224      	str	r4, [r4, #32]
 8005d3e:	429c      	cmp	r4, r3
 8005d40:	d006      	beq.n	8005d50 <std+0x48>
 8005d42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d46:	4294      	cmp	r4, r2
 8005d48:	d002      	beq.n	8005d50 <std+0x48>
 8005d4a:	33d0      	adds	r3, #208	@ 0xd0
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d105      	bne.n	8005d5c <std+0x54>
 8005d50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d58:	f000 b9fa 	b.w	8006150 <__retarget_lock_init_recursive>
 8005d5c:	bd10      	pop	{r4, pc}
 8005d5e:	bf00      	nop
 8005d60:	08005f89 	.word	0x08005f89
 8005d64:	08005faf 	.word	0x08005faf
 8005d68:	08005fe7 	.word	0x08005fe7
 8005d6c:	0800600b 	.word	0x0800600b
 8005d70:	20000654 	.word	0x20000654

08005d74 <stdio_exit_handler>:
 8005d74:	4a02      	ldr	r2, [pc, #8]	@ (8005d80 <stdio_exit_handler+0xc>)
 8005d76:	4903      	ldr	r1, [pc, #12]	@ (8005d84 <stdio_exit_handler+0x10>)
 8005d78:	4803      	ldr	r0, [pc, #12]	@ (8005d88 <stdio_exit_handler+0x14>)
 8005d7a:	f000 b869 	b.w	8005e50 <_fwalk_sglue>
 8005d7e:	bf00      	nop
 8005d80:	2000000c 	.word	0x2000000c
 8005d84:	08009059 	.word	0x08009059
 8005d88:	2000001c 	.word	0x2000001c

08005d8c <cleanup_stdio>:
 8005d8c:	6841      	ldr	r1, [r0, #4]
 8005d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005dc0 <cleanup_stdio+0x34>)
 8005d90:	4299      	cmp	r1, r3
 8005d92:	b510      	push	{r4, lr}
 8005d94:	4604      	mov	r4, r0
 8005d96:	d001      	beq.n	8005d9c <cleanup_stdio+0x10>
 8005d98:	f003 f95e 	bl	8009058 <_fflush_r>
 8005d9c:	68a1      	ldr	r1, [r4, #8]
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <cleanup_stdio+0x38>)
 8005da0:	4299      	cmp	r1, r3
 8005da2:	d002      	beq.n	8005daa <cleanup_stdio+0x1e>
 8005da4:	4620      	mov	r0, r4
 8005da6:	f003 f957 	bl	8009058 <_fflush_r>
 8005daa:	68e1      	ldr	r1, [r4, #12]
 8005dac:	4b06      	ldr	r3, [pc, #24]	@ (8005dc8 <cleanup_stdio+0x3c>)
 8005dae:	4299      	cmp	r1, r3
 8005db0:	d004      	beq.n	8005dbc <cleanup_stdio+0x30>
 8005db2:	4620      	mov	r0, r4
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f003 b94e 	b.w	8009058 <_fflush_r>
 8005dbc:	bd10      	pop	{r4, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000654 	.word	0x20000654
 8005dc4:	200006bc 	.word	0x200006bc
 8005dc8:	20000724 	.word	0x20000724

08005dcc <global_stdio_init.part.0>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <global_stdio_init.part.0+0x30>)
 8005dd0:	4c0b      	ldr	r4, [pc, #44]	@ (8005e00 <global_stdio_init.part.0+0x34>)
 8005dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8005e04 <global_stdio_init.part.0+0x38>)
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	4620      	mov	r0, r4
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2104      	movs	r1, #4
 8005ddc:	f7ff ff94 	bl	8005d08 <std>
 8005de0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005de4:	2201      	movs	r2, #1
 8005de6:	2109      	movs	r1, #9
 8005de8:	f7ff ff8e 	bl	8005d08 <std>
 8005dec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005df0:	2202      	movs	r2, #2
 8005df2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df6:	2112      	movs	r1, #18
 8005df8:	f7ff bf86 	b.w	8005d08 <std>
 8005dfc:	2000078c 	.word	0x2000078c
 8005e00:	20000654 	.word	0x20000654
 8005e04:	08005d75 	.word	0x08005d75

08005e08 <__sfp_lock_acquire>:
 8005e08:	4801      	ldr	r0, [pc, #4]	@ (8005e10 <__sfp_lock_acquire+0x8>)
 8005e0a:	f000 b9a2 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8005e0e:	bf00      	nop
 8005e10:	20000795 	.word	0x20000795

08005e14 <__sfp_lock_release>:
 8005e14:	4801      	ldr	r0, [pc, #4]	@ (8005e1c <__sfp_lock_release+0x8>)
 8005e16:	f000 b99d 	b.w	8006154 <__retarget_lock_release_recursive>
 8005e1a:	bf00      	nop
 8005e1c:	20000795 	.word	0x20000795

08005e20 <__sinit>:
 8005e20:	b510      	push	{r4, lr}
 8005e22:	4604      	mov	r4, r0
 8005e24:	f7ff fff0 	bl	8005e08 <__sfp_lock_acquire>
 8005e28:	6a23      	ldr	r3, [r4, #32]
 8005e2a:	b11b      	cbz	r3, 8005e34 <__sinit+0x14>
 8005e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e30:	f7ff bff0 	b.w	8005e14 <__sfp_lock_release>
 8005e34:	4b04      	ldr	r3, [pc, #16]	@ (8005e48 <__sinit+0x28>)
 8005e36:	6223      	str	r3, [r4, #32]
 8005e38:	4b04      	ldr	r3, [pc, #16]	@ (8005e4c <__sinit+0x2c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d1f5      	bne.n	8005e2c <__sinit+0xc>
 8005e40:	f7ff ffc4 	bl	8005dcc <global_stdio_init.part.0>
 8005e44:	e7f2      	b.n	8005e2c <__sinit+0xc>
 8005e46:	bf00      	nop
 8005e48:	08005d8d 	.word	0x08005d8d
 8005e4c:	2000078c 	.word	0x2000078c

08005e50 <_fwalk_sglue>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	4607      	mov	r7, r0
 8005e56:	4688      	mov	r8, r1
 8005e58:	4614      	mov	r4, r2
 8005e5a:	2600      	movs	r6, #0
 8005e5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e60:	f1b9 0901 	subs.w	r9, r9, #1
 8005e64:	d505      	bpl.n	8005e72 <_fwalk_sglue+0x22>
 8005e66:	6824      	ldr	r4, [r4, #0]
 8005e68:	2c00      	cmp	r4, #0
 8005e6a:	d1f7      	bne.n	8005e5c <_fwalk_sglue+0xc>
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e72:	89ab      	ldrh	r3, [r5, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d907      	bls.n	8005e88 <_fwalk_sglue+0x38>
 8005e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	d003      	beq.n	8005e88 <_fwalk_sglue+0x38>
 8005e80:	4629      	mov	r1, r5
 8005e82:	4638      	mov	r0, r7
 8005e84:	47c0      	blx	r8
 8005e86:	4306      	orrs	r6, r0
 8005e88:	3568      	adds	r5, #104	@ 0x68
 8005e8a:	e7e9      	b.n	8005e60 <_fwalk_sglue+0x10>

08005e8c <sniprintf>:
 8005e8c:	b40c      	push	{r2, r3}
 8005e8e:	b530      	push	{r4, r5, lr}
 8005e90:	4b17      	ldr	r3, [pc, #92]	@ (8005ef0 <sniprintf+0x64>)
 8005e92:	1e0c      	subs	r4, r1, #0
 8005e94:	681d      	ldr	r5, [r3, #0]
 8005e96:	b09d      	sub	sp, #116	@ 0x74
 8005e98:	da08      	bge.n	8005eac <sniprintf+0x20>
 8005e9a:	238b      	movs	r3, #139	@ 0x8b
 8005e9c:	602b      	str	r3, [r5, #0]
 8005e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea2:	b01d      	add	sp, #116	@ 0x74
 8005ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005ea8:	b002      	add	sp, #8
 8005eaa:	4770      	bx	lr
 8005eac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005eb0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005eb4:	bf14      	ite	ne
 8005eb6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005eba:	4623      	moveq	r3, r4
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ec4:	9002      	str	r0, [sp, #8]
 8005ec6:	9006      	str	r0, [sp, #24]
 8005ec8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ecc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ece:	ab21      	add	r3, sp, #132	@ 0x84
 8005ed0:	a902      	add	r1, sp, #8
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	f002 fc25 	bl	8008724 <_svfiprintf_r>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	bfbc      	itt	lt
 8005ede:	238b      	movlt	r3, #139	@ 0x8b
 8005ee0:	602b      	strlt	r3, [r5, #0]
 8005ee2:	2c00      	cmp	r4, #0
 8005ee4:	d0dd      	beq.n	8005ea2 <sniprintf+0x16>
 8005ee6:	9b02      	ldr	r3, [sp, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	e7d9      	b.n	8005ea2 <sniprintf+0x16>
 8005eee:	bf00      	nop
 8005ef0:	20000018 	.word	0x20000018

08005ef4 <siprintf>:
 8005ef4:	b40e      	push	{r1, r2, r3}
 8005ef6:	b500      	push	{lr}
 8005ef8:	b09c      	sub	sp, #112	@ 0x70
 8005efa:	ab1d      	add	r3, sp, #116	@ 0x74
 8005efc:	9002      	str	r0, [sp, #8]
 8005efe:	9006      	str	r0, [sp, #24]
 8005f00:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005f04:	4809      	ldr	r0, [pc, #36]	@ (8005f2c <siprintf+0x38>)
 8005f06:	9107      	str	r1, [sp, #28]
 8005f08:	9104      	str	r1, [sp, #16]
 8005f0a:	4909      	ldr	r1, [pc, #36]	@ (8005f30 <siprintf+0x3c>)
 8005f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f10:	9105      	str	r1, [sp, #20]
 8005f12:	6800      	ldr	r0, [r0, #0]
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	a902      	add	r1, sp, #8
 8005f18:	f002 fc04 	bl	8008724 <_svfiprintf_r>
 8005f1c:	9b02      	ldr	r3, [sp, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	b01c      	add	sp, #112	@ 0x70
 8005f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f28:	b003      	add	sp, #12
 8005f2a:	4770      	bx	lr
 8005f2c:	20000018 	.word	0x20000018
 8005f30:	ffff0208 	.word	0xffff0208

08005f34 <siscanf>:
 8005f34:	b40e      	push	{r1, r2, r3}
 8005f36:	b530      	push	{r4, r5, lr}
 8005f38:	b09c      	sub	sp, #112	@ 0x70
 8005f3a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005f3c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005f40:	f854 5b04 	ldr.w	r5, [r4], #4
 8005f44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005f48:	9002      	str	r0, [sp, #8]
 8005f4a:	9006      	str	r0, [sp, #24]
 8005f4c:	f7fa f998 	bl	8000280 <strlen>
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <siscanf+0x4c>)
 8005f52:	9003      	str	r0, [sp, #12]
 8005f54:	9007      	str	r0, [sp, #28]
 8005f56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f58:	480a      	ldr	r0, [pc, #40]	@ (8005f84 <siscanf+0x50>)
 8005f5a:	9401      	str	r4, [sp, #4]
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f60:	9314      	str	r3, [sp, #80]	@ 0x50
 8005f62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005f66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005f6a:	462a      	mov	r2, r5
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	a902      	add	r1, sp, #8
 8005f70:	6800      	ldr	r0, [r0, #0]
 8005f72:	f002 fd2b 	bl	80089cc <__ssvfiscanf_r>
 8005f76:	b01c      	add	sp, #112	@ 0x70
 8005f78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f7c:	b003      	add	sp, #12
 8005f7e:	4770      	bx	lr
 8005f80:	08005fab 	.word	0x08005fab
 8005f84:	20000018 	.word	0x20000018

08005f88 <__sread>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f90:	f000 f890 	bl	80060b4 <_read_r>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	bfab      	itete	ge
 8005f98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005f9c:	181b      	addge	r3, r3, r0
 8005f9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005fa2:	bfac      	ite	ge
 8005fa4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005fa6:	81a3      	strhlt	r3, [r4, #12]
 8005fa8:	bd10      	pop	{r4, pc}

08005faa <__seofread>:
 8005faa:	2000      	movs	r0, #0
 8005fac:	4770      	bx	lr

08005fae <__swrite>:
 8005fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fb2:	461f      	mov	r7, r3
 8005fb4:	898b      	ldrh	r3, [r1, #12]
 8005fb6:	05db      	lsls	r3, r3, #23
 8005fb8:	4605      	mov	r5, r0
 8005fba:	460c      	mov	r4, r1
 8005fbc:	4616      	mov	r6, r2
 8005fbe:	d505      	bpl.n	8005fcc <__swrite+0x1e>
 8005fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f000 f862 	bl	8006090 <_lseek_r>
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fd2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005fd6:	81a3      	strh	r3, [r4, #12]
 8005fd8:	4632      	mov	r2, r6
 8005fda:	463b      	mov	r3, r7
 8005fdc:	4628      	mov	r0, r5
 8005fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe2:	f000 b879 	b.w	80060d8 <_write_r>

08005fe6 <__sseek>:
 8005fe6:	b510      	push	{r4, lr}
 8005fe8:	460c      	mov	r4, r1
 8005fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fee:	f000 f84f 	bl	8006090 <_lseek_r>
 8005ff2:	1c43      	adds	r3, r0, #1
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	bf15      	itete	ne
 8005ff8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ffa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ffe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006002:	81a3      	strheq	r3, [r4, #12]
 8006004:	bf18      	it	ne
 8006006:	81a3      	strhne	r3, [r4, #12]
 8006008:	bd10      	pop	{r4, pc}

0800600a <__sclose>:
 800600a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800600e:	f000 b82f 	b.w	8006070 <_close_r>

08006012 <memset>:
 8006012:	4402      	add	r2, r0
 8006014:	4603      	mov	r3, r0
 8006016:	4293      	cmp	r3, r2
 8006018:	d100      	bne.n	800601c <memset+0xa>
 800601a:	4770      	bx	lr
 800601c:	f803 1b01 	strb.w	r1, [r3], #1
 8006020:	e7f9      	b.n	8006016 <memset+0x4>

08006022 <strchr>:
 8006022:	b2c9      	uxtb	r1, r1
 8006024:	4603      	mov	r3, r0
 8006026:	4618      	mov	r0, r3
 8006028:	f813 2b01 	ldrb.w	r2, [r3], #1
 800602c:	b112      	cbz	r2, 8006034 <strchr+0x12>
 800602e:	428a      	cmp	r2, r1
 8006030:	d1f9      	bne.n	8006026 <strchr+0x4>
 8006032:	4770      	bx	lr
 8006034:	2900      	cmp	r1, #0
 8006036:	bf18      	it	ne
 8006038:	2000      	movne	r0, #0
 800603a:	4770      	bx	lr

0800603c <strstr>:
 800603c:	780a      	ldrb	r2, [r1, #0]
 800603e:	b570      	push	{r4, r5, r6, lr}
 8006040:	b96a      	cbnz	r2, 800605e <strstr+0x22>
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	429a      	cmp	r2, r3
 8006046:	d109      	bne.n	800605c <strstr+0x20>
 8006048:	460c      	mov	r4, r1
 800604a:	4605      	mov	r5, r0
 800604c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0f6      	beq.n	8006042 <strstr+0x6>
 8006054:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006058:	429e      	cmp	r6, r3
 800605a:	d0f7      	beq.n	800604c <strstr+0x10>
 800605c:	3001      	adds	r0, #1
 800605e:	7803      	ldrb	r3, [r0, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1ef      	bne.n	8006044 <strstr+0x8>
 8006064:	4618      	mov	r0, r3
 8006066:	e7ec      	b.n	8006042 <strstr+0x6>

08006068 <_localeconv_r>:
 8006068:	4800      	ldr	r0, [pc, #0]	@ (800606c <_localeconv_r+0x4>)
 800606a:	4770      	bx	lr
 800606c:	20000158 	.word	0x20000158

08006070 <_close_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d06      	ldr	r5, [pc, #24]	@ (800608c <_close_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb fe8c 	bl	8001d98 <_close>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_close_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_close_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20000790 	.word	0x20000790

08006090 <_lseek_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d07      	ldr	r5, [pc, #28]	@ (80060b0 <_lseek_r+0x20>)
 8006094:	4604      	mov	r4, r0
 8006096:	4608      	mov	r0, r1
 8006098:	4611      	mov	r1, r2
 800609a:	2200      	movs	r2, #0
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fb fea1 	bl	8001de6 <_lseek>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_lseek_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_lseek_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20000790 	.word	0x20000790

080060b4 <_read_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d07      	ldr	r5, [pc, #28]	@ (80060d4 <_read_r+0x20>)
 80060b8:	4604      	mov	r4, r0
 80060ba:	4608      	mov	r0, r1
 80060bc:	4611      	mov	r1, r2
 80060be:	2200      	movs	r2, #0
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fb fe2f 	bl	8001d26 <_read>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_read_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_read_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20000790 	.word	0x20000790

080060d8 <_write_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4d07      	ldr	r5, [pc, #28]	@ (80060f8 <_write_r+0x20>)
 80060dc:	4604      	mov	r4, r0
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	2200      	movs	r2, #0
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb fe3a 	bl	8001d60 <_write>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_write_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_write_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	20000790 	.word	0x20000790

080060fc <__errno>:
 80060fc:	4b01      	ldr	r3, [pc, #4]	@ (8006104 <__errno+0x8>)
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20000018 	.word	0x20000018

08006108 <__libc_init_array>:
 8006108:	b570      	push	{r4, r5, r6, lr}
 800610a:	4d0d      	ldr	r5, [pc, #52]	@ (8006140 <__libc_init_array+0x38>)
 800610c:	4c0d      	ldr	r4, [pc, #52]	@ (8006144 <__libc_init_array+0x3c>)
 800610e:	1b64      	subs	r4, r4, r5
 8006110:	10a4      	asrs	r4, r4, #2
 8006112:	2600      	movs	r6, #0
 8006114:	42a6      	cmp	r6, r4
 8006116:	d109      	bne.n	800612c <__libc_init_array+0x24>
 8006118:	4d0b      	ldr	r5, [pc, #44]	@ (8006148 <__libc_init_array+0x40>)
 800611a:	4c0c      	ldr	r4, [pc, #48]	@ (800614c <__libc_init_array+0x44>)
 800611c:	f003 ff74 	bl	800a008 <_init>
 8006120:	1b64      	subs	r4, r4, r5
 8006122:	10a4      	asrs	r4, r4, #2
 8006124:	2600      	movs	r6, #0
 8006126:	42a6      	cmp	r6, r4
 8006128:	d105      	bne.n	8006136 <__libc_init_array+0x2e>
 800612a:	bd70      	pop	{r4, r5, r6, pc}
 800612c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006130:	4798      	blx	r3
 8006132:	3601      	adds	r6, #1
 8006134:	e7ee      	b.n	8006114 <__libc_init_array+0xc>
 8006136:	f855 3b04 	ldr.w	r3, [r5], #4
 800613a:	4798      	blx	r3
 800613c:	3601      	adds	r6, #1
 800613e:	e7f2      	b.n	8006126 <__libc_init_array+0x1e>
 8006140:	0800a654 	.word	0x0800a654
 8006144:	0800a654 	.word	0x0800a654
 8006148:	0800a654 	.word	0x0800a654
 800614c:	0800a658 	.word	0x0800a658

08006150 <__retarget_lock_init_recursive>:
 8006150:	4770      	bx	lr

08006152 <__retarget_lock_acquire_recursive>:
 8006152:	4770      	bx	lr

08006154 <__retarget_lock_release_recursive>:
 8006154:	4770      	bx	lr
	...

08006158 <nanf>:
 8006158:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006160 <nanf+0x8>
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	7fc00000 	.word	0x7fc00000

08006164 <quorem>:
 8006164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006168:	6903      	ldr	r3, [r0, #16]
 800616a:	690c      	ldr	r4, [r1, #16]
 800616c:	42a3      	cmp	r3, r4
 800616e:	4607      	mov	r7, r0
 8006170:	db7e      	blt.n	8006270 <quorem+0x10c>
 8006172:	3c01      	subs	r4, #1
 8006174:	f101 0814 	add.w	r8, r1, #20
 8006178:	00a3      	lsls	r3, r4, #2
 800617a:	f100 0514 	add.w	r5, r0, #20
 800617e:	9300      	str	r3, [sp, #0]
 8006180:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006184:	9301      	str	r3, [sp, #4]
 8006186:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800618a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800618e:	3301      	adds	r3, #1
 8006190:	429a      	cmp	r2, r3
 8006192:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006196:	fbb2 f6f3 	udiv	r6, r2, r3
 800619a:	d32e      	bcc.n	80061fa <quorem+0x96>
 800619c:	f04f 0a00 	mov.w	sl, #0
 80061a0:	46c4      	mov	ip, r8
 80061a2:	46ae      	mov	lr, r5
 80061a4:	46d3      	mov	fp, sl
 80061a6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80061aa:	b298      	uxth	r0, r3
 80061ac:	fb06 a000 	mla	r0, r6, r0, sl
 80061b0:	0c02      	lsrs	r2, r0, #16
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	fb06 2303 	mla	r3, r6, r3, r2
 80061b8:	f8de 2000 	ldr.w	r2, [lr]
 80061bc:	b280      	uxth	r0, r0
 80061be:	b292      	uxth	r2, r2
 80061c0:	1a12      	subs	r2, r2, r0
 80061c2:	445a      	add	r2, fp
 80061c4:	f8de 0000 	ldr.w	r0, [lr]
 80061c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80061d2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80061d6:	b292      	uxth	r2, r2
 80061d8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80061dc:	45e1      	cmp	r9, ip
 80061de:	f84e 2b04 	str.w	r2, [lr], #4
 80061e2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80061e6:	d2de      	bcs.n	80061a6 <quorem+0x42>
 80061e8:	9b00      	ldr	r3, [sp, #0]
 80061ea:	58eb      	ldr	r3, [r5, r3]
 80061ec:	b92b      	cbnz	r3, 80061fa <quorem+0x96>
 80061ee:	9b01      	ldr	r3, [sp, #4]
 80061f0:	3b04      	subs	r3, #4
 80061f2:	429d      	cmp	r5, r3
 80061f4:	461a      	mov	r2, r3
 80061f6:	d32f      	bcc.n	8006258 <quorem+0xf4>
 80061f8:	613c      	str	r4, [r7, #16]
 80061fa:	4638      	mov	r0, r7
 80061fc:	f001 f9c4 	bl	8007588 <__mcmp>
 8006200:	2800      	cmp	r0, #0
 8006202:	db25      	blt.n	8006250 <quorem+0xec>
 8006204:	4629      	mov	r1, r5
 8006206:	2000      	movs	r0, #0
 8006208:	f858 2b04 	ldr.w	r2, [r8], #4
 800620c:	f8d1 c000 	ldr.w	ip, [r1]
 8006210:	fa1f fe82 	uxth.w	lr, r2
 8006214:	fa1f f38c 	uxth.w	r3, ip
 8006218:	eba3 030e 	sub.w	r3, r3, lr
 800621c:	4403      	add	r3, r0
 800621e:	0c12      	lsrs	r2, r2, #16
 8006220:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006224:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006228:	b29b      	uxth	r3, r3
 800622a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800622e:	45c1      	cmp	r9, r8
 8006230:	f841 3b04 	str.w	r3, [r1], #4
 8006234:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006238:	d2e6      	bcs.n	8006208 <quorem+0xa4>
 800623a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800623e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006242:	b922      	cbnz	r2, 800624e <quorem+0xea>
 8006244:	3b04      	subs	r3, #4
 8006246:	429d      	cmp	r5, r3
 8006248:	461a      	mov	r2, r3
 800624a:	d30b      	bcc.n	8006264 <quorem+0x100>
 800624c:	613c      	str	r4, [r7, #16]
 800624e:	3601      	adds	r6, #1
 8006250:	4630      	mov	r0, r6
 8006252:	b003      	add	sp, #12
 8006254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	3b04      	subs	r3, #4
 800625c:	2a00      	cmp	r2, #0
 800625e:	d1cb      	bne.n	80061f8 <quorem+0x94>
 8006260:	3c01      	subs	r4, #1
 8006262:	e7c6      	b.n	80061f2 <quorem+0x8e>
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	3b04      	subs	r3, #4
 8006268:	2a00      	cmp	r2, #0
 800626a:	d1ef      	bne.n	800624c <quorem+0xe8>
 800626c:	3c01      	subs	r4, #1
 800626e:	e7ea      	b.n	8006246 <quorem+0xe2>
 8006270:	2000      	movs	r0, #0
 8006272:	e7ee      	b.n	8006252 <quorem+0xee>
 8006274:	0000      	movs	r0, r0
	...

08006278 <_dtoa_r>:
 8006278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800627c:	69c7      	ldr	r7, [r0, #28]
 800627e:	b099      	sub	sp, #100	@ 0x64
 8006280:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006284:	ec55 4b10 	vmov	r4, r5, d0
 8006288:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800628a:	9109      	str	r1, [sp, #36]	@ 0x24
 800628c:	4683      	mov	fp, r0
 800628e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006290:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006292:	b97f      	cbnz	r7, 80062b4 <_dtoa_r+0x3c>
 8006294:	2010      	movs	r0, #16
 8006296:	f000 fdfd 	bl	8006e94 <malloc>
 800629a:	4602      	mov	r2, r0
 800629c:	f8cb 001c 	str.w	r0, [fp, #28]
 80062a0:	b920      	cbnz	r0, 80062ac <_dtoa_r+0x34>
 80062a2:	4ba7      	ldr	r3, [pc, #668]	@ (8006540 <_dtoa_r+0x2c8>)
 80062a4:	21ef      	movs	r1, #239	@ 0xef
 80062a6:	48a7      	ldr	r0, [pc, #668]	@ (8006544 <_dtoa_r+0x2cc>)
 80062a8:	f002 ffc6 	bl	8009238 <__assert_func>
 80062ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80062b0:	6007      	str	r7, [r0, #0]
 80062b2:	60c7      	str	r7, [r0, #12]
 80062b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062b8:	6819      	ldr	r1, [r3, #0]
 80062ba:	b159      	cbz	r1, 80062d4 <_dtoa_r+0x5c>
 80062bc:	685a      	ldr	r2, [r3, #4]
 80062be:	604a      	str	r2, [r1, #4]
 80062c0:	2301      	movs	r3, #1
 80062c2:	4093      	lsls	r3, r2
 80062c4:	608b      	str	r3, [r1, #8]
 80062c6:	4658      	mov	r0, fp
 80062c8:	f000 feda 	bl	8007080 <_Bfree>
 80062cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	1e2b      	subs	r3, r5, #0
 80062d6:	bfb9      	ittee	lt
 80062d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80062dc:	9303      	strlt	r3, [sp, #12]
 80062de:	2300      	movge	r3, #0
 80062e0:	6033      	strge	r3, [r6, #0]
 80062e2:	9f03      	ldr	r7, [sp, #12]
 80062e4:	4b98      	ldr	r3, [pc, #608]	@ (8006548 <_dtoa_r+0x2d0>)
 80062e6:	bfbc      	itt	lt
 80062e8:	2201      	movlt	r2, #1
 80062ea:	6032      	strlt	r2, [r6, #0]
 80062ec:	43bb      	bics	r3, r7
 80062ee:	d112      	bne.n	8006316 <_dtoa_r+0x9e>
 80062f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80062f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80062f6:	6013      	str	r3, [r2, #0]
 80062f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80062fc:	4323      	orrs	r3, r4
 80062fe:	f000 854d 	beq.w	8006d9c <_dtoa_r+0xb24>
 8006302:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006304:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800655c <_dtoa_r+0x2e4>
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 854f 	beq.w	8006dac <_dtoa_r+0xb34>
 800630e:	f10a 0303 	add.w	r3, sl, #3
 8006312:	f000 bd49 	b.w	8006da8 <_dtoa_r+0xb30>
 8006316:	ed9d 7b02 	vldr	d7, [sp, #8]
 800631a:	2200      	movs	r2, #0
 800631c:	ec51 0b17 	vmov	r0, r1, d7
 8006320:	2300      	movs	r3, #0
 8006322:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006326:	f7fa fbd7 	bl	8000ad8 <__aeabi_dcmpeq>
 800632a:	4680      	mov	r8, r0
 800632c:	b158      	cbz	r0, 8006346 <_dtoa_r+0xce>
 800632e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006330:	2301      	movs	r3, #1
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006336:	b113      	cbz	r3, 800633e <_dtoa_r+0xc6>
 8006338:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800633a:	4b84      	ldr	r3, [pc, #528]	@ (800654c <_dtoa_r+0x2d4>)
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006560 <_dtoa_r+0x2e8>
 8006342:	f000 bd33 	b.w	8006dac <_dtoa_r+0xb34>
 8006346:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800634a:	aa16      	add	r2, sp, #88	@ 0x58
 800634c:	a917      	add	r1, sp, #92	@ 0x5c
 800634e:	4658      	mov	r0, fp
 8006350:	f001 fa3a 	bl	80077c8 <__d2b>
 8006354:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006358:	4681      	mov	r9, r0
 800635a:	2e00      	cmp	r6, #0
 800635c:	d077      	beq.n	800644e <_dtoa_r+0x1d6>
 800635e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006360:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006364:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006368:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800636c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006370:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006374:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006378:	4619      	mov	r1, r3
 800637a:	2200      	movs	r2, #0
 800637c:	4b74      	ldr	r3, [pc, #464]	@ (8006550 <_dtoa_r+0x2d8>)
 800637e:	f7f9 ff8b 	bl	8000298 <__aeabi_dsub>
 8006382:	a369      	add	r3, pc, #420	@ (adr r3, 8006528 <_dtoa_r+0x2b0>)
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f7fa f93e 	bl	8000608 <__aeabi_dmul>
 800638c:	a368      	add	r3, pc, #416	@ (adr r3, 8006530 <_dtoa_r+0x2b8>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	f7f9 ff83 	bl	800029c <__adddf3>
 8006396:	4604      	mov	r4, r0
 8006398:	4630      	mov	r0, r6
 800639a:	460d      	mov	r5, r1
 800639c:	f7fa f8ca 	bl	8000534 <__aeabi_i2d>
 80063a0:	a365      	add	r3, pc, #404	@ (adr r3, 8006538 <_dtoa_r+0x2c0>)
 80063a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a6:	f7fa f92f 	bl	8000608 <__aeabi_dmul>
 80063aa:	4602      	mov	r2, r0
 80063ac:	460b      	mov	r3, r1
 80063ae:	4620      	mov	r0, r4
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7f9 ff73 	bl	800029c <__adddf3>
 80063b6:	4604      	mov	r4, r0
 80063b8:	460d      	mov	r5, r1
 80063ba:	f7fa fbd5 	bl	8000b68 <__aeabi_d2iz>
 80063be:	2200      	movs	r2, #0
 80063c0:	4607      	mov	r7, r0
 80063c2:	2300      	movs	r3, #0
 80063c4:	4620      	mov	r0, r4
 80063c6:	4629      	mov	r1, r5
 80063c8:	f7fa fb90 	bl	8000aec <__aeabi_dcmplt>
 80063cc:	b140      	cbz	r0, 80063e0 <_dtoa_r+0x168>
 80063ce:	4638      	mov	r0, r7
 80063d0:	f7fa f8b0 	bl	8000534 <__aeabi_i2d>
 80063d4:	4622      	mov	r2, r4
 80063d6:	462b      	mov	r3, r5
 80063d8:	f7fa fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80063dc:	b900      	cbnz	r0, 80063e0 <_dtoa_r+0x168>
 80063de:	3f01      	subs	r7, #1
 80063e0:	2f16      	cmp	r7, #22
 80063e2:	d851      	bhi.n	8006488 <_dtoa_r+0x210>
 80063e4:	4b5b      	ldr	r3, [pc, #364]	@ (8006554 <_dtoa_r+0x2dc>)
 80063e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063f2:	f7fa fb7b 	bl	8000aec <__aeabi_dcmplt>
 80063f6:	2800      	cmp	r0, #0
 80063f8:	d048      	beq.n	800648c <_dtoa_r+0x214>
 80063fa:	3f01      	subs	r7, #1
 80063fc:	2300      	movs	r3, #0
 80063fe:	9312      	str	r3, [sp, #72]	@ 0x48
 8006400:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006402:	1b9b      	subs	r3, r3, r6
 8006404:	1e5a      	subs	r2, r3, #1
 8006406:	bf44      	itt	mi
 8006408:	f1c3 0801 	rsbmi	r8, r3, #1
 800640c:	2300      	movmi	r3, #0
 800640e:	9208      	str	r2, [sp, #32]
 8006410:	bf54      	ite	pl
 8006412:	f04f 0800 	movpl.w	r8, #0
 8006416:	9308      	strmi	r3, [sp, #32]
 8006418:	2f00      	cmp	r7, #0
 800641a:	db39      	blt.n	8006490 <_dtoa_r+0x218>
 800641c:	9b08      	ldr	r3, [sp, #32]
 800641e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006420:	443b      	add	r3, r7
 8006422:	9308      	str	r3, [sp, #32]
 8006424:	2300      	movs	r3, #0
 8006426:	930a      	str	r3, [sp, #40]	@ 0x28
 8006428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800642a:	2b09      	cmp	r3, #9
 800642c:	d864      	bhi.n	80064f8 <_dtoa_r+0x280>
 800642e:	2b05      	cmp	r3, #5
 8006430:	bfc4      	itt	gt
 8006432:	3b04      	subgt	r3, #4
 8006434:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006438:	f1a3 0302 	sub.w	r3, r3, #2
 800643c:	bfcc      	ite	gt
 800643e:	2400      	movgt	r4, #0
 8006440:	2401      	movle	r4, #1
 8006442:	2b03      	cmp	r3, #3
 8006444:	d863      	bhi.n	800650e <_dtoa_r+0x296>
 8006446:	e8df f003 	tbb	[pc, r3]
 800644a:	372a      	.short	0x372a
 800644c:	5535      	.short	0x5535
 800644e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006452:	441e      	add	r6, r3
 8006454:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006458:	2b20      	cmp	r3, #32
 800645a:	bfc1      	itttt	gt
 800645c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006460:	409f      	lslgt	r7, r3
 8006462:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006466:	fa24 f303 	lsrgt.w	r3, r4, r3
 800646a:	bfd6      	itet	le
 800646c:	f1c3 0320 	rsble	r3, r3, #32
 8006470:	ea47 0003 	orrgt.w	r0, r7, r3
 8006474:	fa04 f003 	lslle.w	r0, r4, r3
 8006478:	f7fa f84c 	bl	8000514 <__aeabi_ui2d>
 800647c:	2201      	movs	r2, #1
 800647e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006482:	3e01      	subs	r6, #1
 8006484:	9214      	str	r2, [sp, #80]	@ 0x50
 8006486:	e777      	b.n	8006378 <_dtoa_r+0x100>
 8006488:	2301      	movs	r3, #1
 800648a:	e7b8      	b.n	80063fe <_dtoa_r+0x186>
 800648c:	9012      	str	r0, [sp, #72]	@ 0x48
 800648e:	e7b7      	b.n	8006400 <_dtoa_r+0x188>
 8006490:	427b      	negs	r3, r7
 8006492:	930a      	str	r3, [sp, #40]	@ 0x28
 8006494:	2300      	movs	r3, #0
 8006496:	eba8 0807 	sub.w	r8, r8, r7
 800649a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800649c:	e7c4      	b.n	8006428 <_dtoa_r+0x1b0>
 800649e:	2300      	movs	r3, #0
 80064a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	dc35      	bgt.n	8006514 <_dtoa_r+0x29c>
 80064a8:	2301      	movs	r3, #1
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	9307      	str	r3, [sp, #28]
 80064ae:	461a      	mov	r2, r3
 80064b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80064b2:	e00b      	b.n	80064cc <_dtoa_r+0x254>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e7f3      	b.n	80064a0 <_dtoa_r+0x228>
 80064b8:	2300      	movs	r3, #0
 80064ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80064be:	18fb      	adds	r3, r7, r3
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	3301      	adds	r3, #1
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	9307      	str	r3, [sp, #28]
 80064c8:	bfb8      	it	lt
 80064ca:	2301      	movlt	r3, #1
 80064cc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80064d0:	2100      	movs	r1, #0
 80064d2:	2204      	movs	r2, #4
 80064d4:	f102 0514 	add.w	r5, r2, #20
 80064d8:	429d      	cmp	r5, r3
 80064da:	d91f      	bls.n	800651c <_dtoa_r+0x2a4>
 80064dc:	6041      	str	r1, [r0, #4]
 80064de:	4658      	mov	r0, fp
 80064e0:	f000 fd8e 	bl	8007000 <_Balloc>
 80064e4:	4682      	mov	sl, r0
 80064e6:	2800      	cmp	r0, #0
 80064e8:	d13c      	bne.n	8006564 <_dtoa_r+0x2ec>
 80064ea:	4b1b      	ldr	r3, [pc, #108]	@ (8006558 <_dtoa_r+0x2e0>)
 80064ec:	4602      	mov	r2, r0
 80064ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80064f2:	e6d8      	b.n	80062a6 <_dtoa_r+0x2e>
 80064f4:	2301      	movs	r3, #1
 80064f6:	e7e0      	b.n	80064ba <_dtoa_r+0x242>
 80064f8:	2401      	movs	r4, #1
 80064fa:	2300      	movs	r3, #0
 80064fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80064fe:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	9307      	str	r3, [sp, #28]
 8006508:	2200      	movs	r2, #0
 800650a:	2312      	movs	r3, #18
 800650c:	e7d0      	b.n	80064b0 <_dtoa_r+0x238>
 800650e:	2301      	movs	r3, #1
 8006510:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006512:	e7f5      	b.n	8006500 <_dtoa_r+0x288>
 8006514:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	9307      	str	r3, [sp, #28]
 800651a:	e7d7      	b.n	80064cc <_dtoa_r+0x254>
 800651c:	3101      	adds	r1, #1
 800651e:	0052      	lsls	r2, r2, #1
 8006520:	e7d8      	b.n	80064d4 <_dtoa_r+0x25c>
 8006522:	bf00      	nop
 8006524:	f3af 8000 	nop.w
 8006528:	636f4361 	.word	0x636f4361
 800652c:	3fd287a7 	.word	0x3fd287a7
 8006530:	8b60c8b3 	.word	0x8b60c8b3
 8006534:	3fc68a28 	.word	0x3fc68a28
 8006538:	509f79fb 	.word	0x509f79fb
 800653c:	3fd34413 	.word	0x3fd34413
 8006540:	0800a244 	.word	0x0800a244
 8006544:	0800a25b 	.word	0x0800a25b
 8006548:	7ff00000 	.word	0x7ff00000
 800654c:	0800a5a1 	.word	0x0800a5a1
 8006550:	3ff80000 	.word	0x3ff80000
 8006554:	0800a358 	.word	0x0800a358
 8006558:	0800a2b3 	.word	0x0800a2b3
 800655c:	0800a240 	.word	0x0800a240
 8006560:	0800a5a0 	.word	0x0800a5a0
 8006564:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006568:	6018      	str	r0, [r3, #0]
 800656a:	9b07      	ldr	r3, [sp, #28]
 800656c:	2b0e      	cmp	r3, #14
 800656e:	f200 80a4 	bhi.w	80066ba <_dtoa_r+0x442>
 8006572:	2c00      	cmp	r4, #0
 8006574:	f000 80a1 	beq.w	80066ba <_dtoa_r+0x442>
 8006578:	2f00      	cmp	r7, #0
 800657a:	dd33      	ble.n	80065e4 <_dtoa_r+0x36c>
 800657c:	4bad      	ldr	r3, [pc, #692]	@ (8006834 <_dtoa_r+0x5bc>)
 800657e:	f007 020f 	and.w	r2, r7, #15
 8006582:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006586:	ed93 7b00 	vldr	d7, [r3]
 800658a:	05f8      	lsls	r0, r7, #23
 800658c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006590:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006594:	d516      	bpl.n	80065c4 <_dtoa_r+0x34c>
 8006596:	4ba8      	ldr	r3, [pc, #672]	@ (8006838 <_dtoa_r+0x5c0>)
 8006598:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800659c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065a0:	f7fa f95c 	bl	800085c <__aeabi_ddiv>
 80065a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065a8:	f004 040f 	and.w	r4, r4, #15
 80065ac:	2603      	movs	r6, #3
 80065ae:	4da2      	ldr	r5, [pc, #648]	@ (8006838 <_dtoa_r+0x5c0>)
 80065b0:	b954      	cbnz	r4, 80065c8 <_dtoa_r+0x350>
 80065b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065ba:	f7fa f94f 	bl	800085c <__aeabi_ddiv>
 80065be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065c2:	e028      	b.n	8006616 <_dtoa_r+0x39e>
 80065c4:	2602      	movs	r6, #2
 80065c6:	e7f2      	b.n	80065ae <_dtoa_r+0x336>
 80065c8:	07e1      	lsls	r1, r4, #31
 80065ca:	d508      	bpl.n	80065de <_dtoa_r+0x366>
 80065cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80065d4:	f7fa f818 	bl	8000608 <__aeabi_dmul>
 80065d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065dc:	3601      	adds	r6, #1
 80065de:	1064      	asrs	r4, r4, #1
 80065e0:	3508      	adds	r5, #8
 80065e2:	e7e5      	b.n	80065b0 <_dtoa_r+0x338>
 80065e4:	f000 80d2 	beq.w	800678c <_dtoa_r+0x514>
 80065e8:	427c      	negs	r4, r7
 80065ea:	4b92      	ldr	r3, [pc, #584]	@ (8006834 <_dtoa_r+0x5bc>)
 80065ec:	4d92      	ldr	r5, [pc, #584]	@ (8006838 <_dtoa_r+0x5c0>)
 80065ee:	f004 020f 	and.w	r2, r4, #15
 80065f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065fe:	f7fa f803 	bl	8000608 <__aeabi_dmul>
 8006602:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006606:	1124      	asrs	r4, r4, #4
 8006608:	2300      	movs	r3, #0
 800660a:	2602      	movs	r6, #2
 800660c:	2c00      	cmp	r4, #0
 800660e:	f040 80b2 	bne.w	8006776 <_dtoa_r+0x4fe>
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1d3      	bne.n	80065be <_dtoa_r+0x346>
 8006616:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006618:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f000 80b7 	beq.w	8006790 <_dtoa_r+0x518>
 8006622:	4b86      	ldr	r3, [pc, #536]	@ (800683c <_dtoa_r+0x5c4>)
 8006624:	2200      	movs	r2, #0
 8006626:	4620      	mov	r0, r4
 8006628:	4629      	mov	r1, r5
 800662a:	f7fa fa5f 	bl	8000aec <__aeabi_dcmplt>
 800662e:	2800      	cmp	r0, #0
 8006630:	f000 80ae 	beq.w	8006790 <_dtoa_r+0x518>
 8006634:	9b07      	ldr	r3, [sp, #28]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f000 80aa 	beq.w	8006790 <_dtoa_r+0x518>
 800663c:	9b00      	ldr	r3, [sp, #0]
 800663e:	2b00      	cmp	r3, #0
 8006640:	dd37      	ble.n	80066b2 <_dtoa_r+0x43a>
 8006642:	1e7b      	subs	r3, r7, #1
 8006644:	9304      	str	r3, [sp, #16]
 8006646:	4620      	mov	r0, r4
 8006648:	4b7d      	ldr	r3, [pc, #500]	@ (8006840 <_dtoa_r+0x5c8>)
 800664a:	2200      	movs	r2, #0
 800664c:	4629      	mov	r1, r5
 800664e:	f7f9 ffdb 	bl	8000608 <__aeabi_dmul>
 8006652:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006656:	9c00      	ldr	r4, [sp, #0]
 8006658:	3601      	adds	r6, #1
 800665a:	4630      	mov	r0, r6
 800665c:	f7f9 ff6a 	bl	8000534 <__aeabi_i2d>
 8006660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006664:	f7f9 ffd0 	bl	8000608 <__aeabi_dmul>
 8006668:	4b76      	ldr	r3, [pc, #472]	@ (8006844 <_dtoa_r+0x5cc>)
 800666a:	2200      	movs	r2, #0
 800666c:	f7f9 fe16 	bl	800029c <__adddf3>
 8006670:	4605      	mov	r5, r0
 8006672:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006676:	2c00      	cmp	r4, #0
 8006678:	f040 808d 	bne.w	8006796 <_dtoa_r+0x51e>
 800667c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006680:	4b71      	ldr	r3, [pc, #452]	@ (8006848 <_dtoa_r+0x5d0>)
 8006682:	2200      	movs	r2, #0
 8006684:	f7f9 fe08 	bl	8000298 <__aeabi_dsub>
 8006688:	4602      	mov	r2, r0
 800668a:	460b      	mov	r3, r1
 800668c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006690:	462a      	mov	r2, r5
 8006692:	4633      	mov	r3, r6
 8006694:	f7fa fa48 	bl	8000b28 <__aeabi_dcmpgt>
 8006698:	2800      	cmp	r0, #0
 800669a:	f040 828b 	bne.w	8006bb4 <_dtoa_r+0x93c>
 800669e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066a2:	462a      	mov	r2, r5
 80066a4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80066a8:	f7fa fa20 	bl	8000aec <__aeabi_dcmplt>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	f040 8128 	bne.w	8006902 <_dtoa_r+0x68a>
 80066b2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80066b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80066ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f2c0 815a 	blt.w	8006976 <_dtoa_r+0x6fe>
 80066c2:	2f0e      	cmp	r7, #14
 80066c4:	f300 8157 	bgt.w	8006976 <_dtoa_r+0x6fe>
 80066c8:	4b5a      	ldr	r3, [pc, #360]	@ (8006834 <_dtoa_r+0x5bc>)
 80066ca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80066ce:	ed93 7b00 	vldr	d7, [r3]
 80066d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	ed8d 7b00 	vstr	d7, [sp]
 80066da:	da03      	bge.n	80066e4 <_dtoa_r+0x46c>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f340 8101 	ble.w	80068e6 <_dtoa_r+0x66e>
 80066e4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80066e8:	4656      	mov	r6, sl
 80066ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4629      	mov	r1, r5
 80066f2:	f7fa f8b3 	bl	800085c <__aeabi_ddiv>
 80066f6:	f7fa fa37 	bl	8000b68 <__aeabi_d2iz>
 80066fa:	4680      	mov	r8, r0
 80066fc:	f7f9 ff1a 	bl	8000534 <__aeabi_i2d>
 8006700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006704:	f7f9 ff80 	bl	8000608 <__aeabi_dmul>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4620      	mov	r0, r4
 800670e:	4629      	mov	r1, r5
 8006710:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006714:	f7f9 fdc0 	bl	8000298 <__aeabi_dsub>
 8006718:	f806 4b01 	strb.w	r4, [r6], #1
 800671c:	9d07      	ldr	r5, [sp, #28]
 800671e:	eba6 040a 	sub.w	r4, r6, sl
 8006722:	42a5      	cmp	r5, r4
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	f040 8117 	bne.w	800695a <_dtoa_r+0x6e2>
 800672c:	f7f9 fdb6 	bl	800029c <__adddf3>
 8006730:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006734:	4604      	mov	r4, r0
 8006736:	460d      	mov	r5, r1
 8006738:	f7fa f9f6 	bl	8000b28 <__aeabi_dcmpgt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f040 80f9 	bne.w	8006934 <_dtoa_r+0x6bc>
 8006742:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006746:	4620      	mov	r0, r4
 8006748:	4629      	mov	r1, r5
 800674a:	f7fa f9c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800674e:	b118      	cbz	r0, 8006758 <_dtoa_r+0x4e0>
 8006750:	f018 0f01 	tst.w	r8, #1
 8006754:	f040 80ee 	bne.w	8006934 <_dtoa_r+0x6bc>
 8006758:	4649      	mov	r1, r9
 800675a:	4658      	mov	r0, fp
 800675c:	f000 fc90 	bl	8007080 <_Bfree>
 8006760:	2300      	movs	r3, #0
 8006762:	7033      	strb	r3, [r6, #0]
 8006764:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006766:	3701      	adds	r7, #1
 8006768:	601f      	str	r7, [r3, #0]
 800676a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 831d 	beq.w	8006dac <_dtoa_r+0xb34>
 8006772:	601e      	str	r6, [r3, #0]
 8006774:	e31a      	b.n	8006dac <_dtoa_r+0xb34>
 8006776:	07e2      	lsls	r2, r4, #31
 8006778:	d505      	bpl.n	8006786 <_dtoa_r+0x50e>
 800677a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800677e:	f7f9 ff43 	bl	8000608 <__aeabi_dmul>
 8006782:	3601      	adds	r6, #1
 8006784:	2301      	movs	r3, #1
 8006786:	1064      	asrs	r4, r4, #1
 8006788:	3508      	adds	r5, #8
 800678a:	e73f      	b.n	800660c <_dtoa_r+0x394>
 800678c:	2602      	movs	r6, #2
 800678e:	e742      	b.n	8006616 <_dtoa_r+0x39e>
 8006790:	9c07      	ldr	r4, [sp, #28]
 8006792:	9704      	str	r7, [sp, #16]
 8006794:	e761      	b.n	800665a <_dtoa_r+0x3e2>
 8006796:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <_dtoa_r+0x5bc>)
 8006798:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800679a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800679e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067a2:	4454      	add	r4, sl
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d053      	beq.n	8006850 <_dtoa_r+0x5d8>
 80067a8:	4928      	ldr	r1, [pc, #160]	@ (800684c <_dtoa_r+0x5d4>)
 80067aa:	2000      	movs	r0, #0
 80067ac:	f7fa f856 	bl	800085c <__aeabi_ddiv>
 80067b0:	4633      	mov	r3, r6
 80067b2:	462a      	mov	r2, r5
 80067b4:	f7f9 fd70 	bl	8000298 <__aeabi_dsub>
 80067b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80067bc:	4656      	mov	r6, sl
 80067be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067c2:	f7fa f9d1 	bl	8000b68 <__aeabi_d2iz>
 80067c6:	4605      	mov	r5, r0
 80067c8:	f7f9 feb4 	bl	8000534 <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80067d4:	f7f9 fd60 	bl	8000298 <__aeabi_dsub>
 80067d8:	3530      	adds	r5, #48	@ 0x30
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80067e2:	f806 5b01 	strb.w	r5, [r6], #1
 80067e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80067ea:	f7fa f97f 	bl	8000aec <__aeabi_dcmplt>
 80067ee:	2800      	cmp	r0, #0
 80067f0:	d171      	bne.n	80068d6 <_dtoa_r+0x65e>
 80067f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80067f6:	4911      	ldr	r1, [pc, #68]	@ (800683c <_dtoa_r+0x5c4>)
 80067f8:	2000      	movs	r0, #0
 80067fa:	f7f9 fd4d 	bl	8000298 <__aeabi_dsub>
 80067fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006802:	f7fa f973 	bl	8000aec <__aeabi_dcmplt>
 8006806:	2800      	cmp	r0, #0
 8006808:	f040 8095 	bne.w	8006936 <_dtoa_r+0x6be>
 800680c:	42a6      	cmp	r6, r4
 800680e:	f43f af50 	beq.w	80066b2 <_dtoa_r+0x43a>
 8006812:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006816:	4b0a      	ldr	r3, [pc, #40]	@ (8006840 <_dtoa_r+0x5c8>)
 8006818:	2200      	movs	r2, #0
 800681a:	f7f9 fef5 	bl	8000608 <__aeabi_dmul>
 800681e:	4b08      	ldr	r3, [pc, #32]	@ (8006840 <_dtoa_r+0x5c8>)
 8006820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006824:	2200      	movs	r2, #0
 8006826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800682a:	f7f9 feed 	bl	8000608 <__aeabi_dmul>
 800682e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006832:	e7c4      	b.n	80067be <_dtoa_r+0x546>
 8006834:	0800a358 	.word	0x0800a358
 8006838:	0800a330 	.word	0x0800a330
 800683c:	3ff00000 	.word	0x3ff00000
 8006840:	40240000 	.word	0x40240000
 8006844:	401c0000 	.word	0x401c0000
 8006848:	40140000 	.word	0x40140000
 800684c:	3fe00000 	.word	0x3fe00000
 8006850:	4631      	mov	r1, r6
 8006852:	4628      	mov	r0, r5
 8006854:	f7f9 fed8 	bl	8000608 <__aeabi_dmul>
 8006858:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800685c:	9415      	str	r4, [sp, #84]	@ 0x54
 800685e:	4656      	mov	r6, sl
 8006860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006864:	f7fa f980 	bl	8000b68 <__aeabi_d2iz>
 8006868:	4605      	mov	r5, r0
 800686a:	f7f9 fe63 	bl	8000534 <__aeabi_i2d>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006876:	f7f9 fd0f 	bl	8000298 <__aeabi_dsub>
 800687a:	3530      	adds	r5, #48	@ 0x30
 800687c:	f806 5b01 	strb.w	r5, [r6], #1
 8006880:	4602      	mov	r2, r0
 8006882:	460b      	mov	r3, r1
 8006884:	42a6      	cmp	r6, r4
 8006886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	d124      	bne.n	80068da <_dtoa_r+0x662>
 8006890:	4bac      	ldr	r3, [pc, #688]	@ (8006b44 <_dtoa_r+0x8cc>)
 8006892:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006896:	f7f9 fd01 	bl	800029c <__adddf3>
 800689a:	4602      	mov	r2, r0
 800689c:	460b      	mov	r3, r1
 800689e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068a2:	f7fa f941 	bl	8000b28 <__aeabi_dcmpgt>
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d145      	bne.n	8006936 <_dtoa_r+0x6be>
 80068aa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068ae:	49a5      	ldr	r1, [pc, #660]	@ (8006b44 <_dtoa_r+0x8cc>)
 80068b0:	2000      	movs	r0, #0
 80068b2:	f7f9 fcf1 	bl	8000298 <__aeabi_dsub>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068be:	f7fa f915 	bl	8000aec <__aeabi_dcmplt>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f43f aef5 	beq.w	80066b2 <_dtoa_r+0x43a>
 80068c8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80068ca:	1e73      	subs	r3, r6, #1
 80068cc:	9315      	str	r3, [sp, #84]	@ 0x54
 80068ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80068d2:	2b30      	cmp	r3, #48	@ 0x30
 80068d4:	d0f8      	beq.n	80068c8 <_dtoa_r+0x650>
 80068d6:	9f04      	ldr	r7, [sp, #16]
 80068d8:	e73e      	b.n	8006758 <_dtoa_r+0x4e0>
 80068da:	4b9b      	ldr	r3, [pc, #620]	@ (8006b48 <_dtoa_r+0x8d0>)
 80068dc:	f7f9 fe94 	bl	8000608 <__aeabi_dmul>
 80068e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068e4:	e7bc      	b.n	8006860 <_dtoa_r+0x5e8>
 80068e6:	d10c      	bne.n	8006902 <_dtoa_r+0x68a>
 80068e8:	4b98      	ldr	r3, [pc, #608]	@ (8006b4c <_dtoa_r+0x8d4>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068f0:	f7f9 fe8a 	bl	8000608 <__aeabi_dmul>
 80068f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068f8:	f7fa f90c 	bl	8000b14 <__aeabi_dcmpge>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f000 8157 	beq.w	8006bb0 <_dtoa_r+0x938>
 8006902:	2400      	movs	r4, #0
 8006904:	4625      	mov	r5, r4
 8006906:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006908:	43db      	mvns	r3, r3
 800690a:	9304      	str	r3, [sp, #16]
 800690c:	4656      	mov	r6, sl
 800690e:	2700      	movs	r7, #0
 8006910:	4621      	mov	r1, r4
 8006912:	4658      	mov	r0, fp
 8006914:	f000 fbb4 	bl	8007080 <_Bfree>
 8006918:	2d00      	cmp	r5, #0
 800691a:	d0dc      	beq.n	80068d6 <_dtoa_r+0x65e>
 800691c:	b12f      	cbz	r7, 800692a <_dtoa_r+0x6b2>
 800691e:	42af      	cmp	r7, r5
 8006920:	d003      	beq.n	800692a <_dtoa_r+0x6b2>
 8006922:	4639      	mov	r1, r7
 8006924:	4658      	mov	r0, fp
 8006926:	f000 fbab 	bl	8007080 <_Bfree>
 800692a:	4629      	mov	r1, r5
 800692c:	4658      	mov	r0, fp
 800692e:	f000 fba7 	bl	8007080 <_Bfree>
 8006932:	e7d0      	b.n	80068d6 <_dtoa_r+0x65e>
 8006934:	9704      	str	r7, [sp, #16]
 8006936:	4633      	mov	r3, r6
 8006938:	461e      	mov	r6, r3
 800693a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693e:	2a39      	cmp	r2, #57	@ 0x39
 8006940:	d107      	bne.n	8006952 <_dtoa_r+0x6da>
 8006942:	459a      	cmp	sl, r3
 8006944:	d1f8      	bne.n	8006938 <_dtoa_r+0x6c0>
 8006946:	9a04      	ldr	r2, [sp, #16]
 8006948:	3201      	adds	r2, #1
 800694a:	9204      	str	r2, [sp, #16]
 800694c:	2230      	movs	r2, #48	@ 0x30
 800694e:	f88a 2000 	strb.w	r2, [sl]
 8006952:	781a      	ldrb	r2, [r3, #0]
 8006954:	3201      	adds	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	e7bd      	b.n	80068d6 <_dtoa_r+0x65e>
 800695a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b48 <_dtoa_r+0x8d0>)
 800695c:	2200      	movs	r2, #0
 800695e:	f7f9 fe53 	bl	8000608 <__aeabi_dmul>
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	4604      	mov	r4, r0
 8006968:	460d      	mov	r5, r1
 800696a:	f7fa f8b5 	bl	8000ad8 <__aeabi_dcmpeq>
 800696e:	2800      	cmp	r0, #0
 8006970:	f43f aebb 	beq.w	80066ea <_dtoa_r+0x472>
 8006974:	e6f0      	b.n	8006758 <_dtoa_r+0x4e0>
 8006976:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006978:	2a00      	cmp	r2, #0
 800697a:	f000 80db 	beq.w	8006b34 <_dtoa_r+0x8bc>
 800697e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006980:	2a01      	cmp	r2, #1
 8006982:	f300 80bf 	bgt.w	8006b04 <_dtoa_r+0x88c>
 8006986:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006988:	2a00      	cmp	r2, #0
 800698a:	f000 80b7 	beq.w	8006afc <_dtoa_r+0x884>
 800698e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006992:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006994:	4646      	mov	r6, r8
 8006996:	9a08      	ldr	r2, [sp, #32]
 8006998:	2101      	movs	r1, #1
 800699a:	441a      	add	r2, r3
 800699c:	4658      	mov	r0, fp
 800699e:	4498      	add	r8, r3
 80069a0:	9208      	str	r2, [sp, #32]
 80069a2:	f000 fc6b 	bl	800727c <__i2b>
 80069a6:	4605      	mov	r5, r0
 80069a8:	b15e      	cbz	r6, 80069c2 <_dtoa_r+0x74a>
 80069aa:	9b08      	ldr	r3, [sp, #32]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	dd08      	ble.n	80069c2 <_dtoa_r+0x74a>
 80069b0:	42b3      	cmp	r3, r6
 80069b2:	9a08      	ldr	r2, [sp, #32]
 80069b4:	bfa8      	it	ge
 80069b6:	4633      	movge	r3, r6
 80069b8:	eba8 0803 	sub.w	r8, r8, r3
 80069bc:	1af6      	subs	r6, r6, r3
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	9308      	str	r3, [sp, #32]
 80069c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c4:	b1f3      	cbz	r3, 8006a04 <_dtoa_r+0x78c>
 80069c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 80b7 	beq.w	8006b3c <_dtoa_r+0x8c4>
 80069ce:	b18c      	cbz	r4, 80069f4 <_dtoa_r+0x77c>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4622      	mov	r2, r4
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fd11 	bl	80073fc <__pow5mult>
 80069da:	464a      	mov	r2, r9
 80069dc:	4601      	mov	r1, r0
 80069de:	4605      	mov	r5, r0
 80069e0:	4658      	mov	r0, fp
 80069e2:	f000 fc61 	bl	80072a8 <__multiply>
 80069e6:	4649      	mov	r1, r9
 80069e8:	9004      	str	r0, [sp, #16]
 80069ea:	4658      	mov	r0, fp
 80069ec:	f000 fb48 	bl	8007080 <_Bfree>
 80069f0:	9b04      	ldr	r3, [sp, #16]
 80069f2:	4699      	mov	r9, r3
 80069f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069f6:	1b1a      	subs	r2, r3, r4
 80069f8:	d004      	beq.n	8006a04 <_dtoa_r+0x78c>
 80069fa:	4649      	mov	r1, r9
 80069fc:	4658      	mov	r0, fp
 80069fe:	f000 fcfd 	bl	80073fc <__pow5mult>
 8006a02:	4681      	mov	r9, r0
 8006a04:	2101      	movs	r1, #1
 8006a06:	4658      	mov	r0, fp
 8006a08:	f000 fc38 	bl	800727c <__i2b>
 8006a0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a0e:	4604      	mov	r4, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 81cf 	beq.w	8006db4 <_dtoa_r+0xb3c>
 8006a16:	461a      	mov	r2, r3
 8006a18:	4601      	mov	r1, r0
 8006a1a:	4658      	mov	r0, fp
 8006a1c:	f000 fcee 	bl	80073fc <__pow5mult>
 8006a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	4604      	mov	r4, r0
 8006a26:	f300 8095 	bgt.w	8006b54 <_dtoa_r+0x8dc>
 8006a2a:	9b02      	ldr	r3, [sp, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	f040 8087 	bne.w	8006b40 <_dtoa_r+0x8c8>
 8006a32:	9b03      	ldr	r3, [sp, #12]
 8006a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f040 8089 	bne.w	8006b50 <_dtoa_r+0x8d8>
 8006a3e:	9b03      	ldr	r3, [sp, #12]
 8006a40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a44:	0d1b      	lsrs	r3, r3, #20
 8006a46:	051b      	lsls	r3, r3, #20
 8006a48:	b12b      	cbz	r3, 8006a56 <_dtoa_r+0x7de>
 8006a4a:	9b08      	ldr	r3, [sp, #32]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	9308      	str	r3, [sp, #32]
 8006a50:	f108 0801 	add.w	r8, r8, #1
 8006a54:	2301      	movs	r3, #1
 8006a56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 81b0 	beq.w	8006dc0 <_dtoa_r+0xb48>
 8006a60:	6923      	ldr	r3, [r4, #16]
 8006a62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006a66:	6918      	ldr	r0, [r3, #16]
 8006a68:	f000 fbbc 	bl	80071e4 <__hi0bits>
 8006a6c:	f1c0 0020 	rsb	r0, r0, #32
 8006a70:	9b08      	ldr	r3, [sp, #32]
 8006a72:	4418      	add	r0, r3
 8006a74:	f010 001f 	ands.w	r0, r0, #31
 8006a78:	d077      	beq.n	8006b6a <_dtoa_r+0x8f2>
 8006a7a:	f1c0 0320 	rsb	r3, r0, #32
 8006a7e:	2b04      	cmp	r3, #4
 8006a80:	dd6b      	ble.n	8006b5a <_dtoa_r+0x8e2>
 8006a82:	9b08      	ldr	r3, [sp, #32]
 8006a84:	f1c0 001c 	rsb	r0, r0, #28
 8006a88:	4403      	add	r3, r0
 8006a8a:	4480      	add	r8, r0
 8006a8c:	4406      	add	r6, r0
 8006a8e:	9308      	str	r3, [sp, #32]
 8006a90:	f1b8 0f00 	cmp.w	r8, #0
 8006a94:	dd05      	ble.n	8006aa2 <_dtoa_r+0x82a>
 8006a96:	4649      	mov	r1, r9
 8006a98:	4642      	mov	r2, r8
 8006a9a:	4658      	mov	r0, fp
 8006a9c:	f000 fd08 	bl	80074b0 <__lshift>
 8006aa0:	4681      	mov	r9, r0
 8006aa2:	9b08      	ldr	r3, [sp, #32]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	dd05      	ble.n	8006ab4 <_dtoa_r+0x83c>
 8006aa8:	4621      	mov	r1, r4
 8006aaa:	461a      	mov	r2, r3
 8006aac:	4658      	mov	r0, fp
 8006aae:	f000 fcff 	bl	80074b0 <__lshift>
 8006ab2:	4604      	mov	r4, r0
 8006ab4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d059      	beq.n	8006b6e <_dtoa_r+0x8f6>
 8006aba:	4621      	mov	r1, r4
 8006abc:	4648      	mov	r0, r9
 8006abe:	f000 fd63 	bl	8007588 <__mcmp>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	da53      	bge.n	8006b6e <_dtoa_r+0x8f6>
 8006ac6:	1e7b      	subs	r3, r7, #1
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	4649      	mov	r1, r9
 8006acc:	2300      	movs	r3, #0
 8006ace:	220a      	movs	r2, #10
 8006ad0:	4658      	mov	r0, fp
 8006ad2:	f000 faf7 	bl	80070c4 <__multadd>
 8006ad6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ad8:	4681      	mov	r9, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 8172 	beq.w	8006dc4 <_dtoa_r+0xb4c>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	220a      	movs	r2, #10
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 faec 	bl	80070c4 <__multadd>
 8006aec:	9b00      	ldr	r3, [sp, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	4605      	mov	r5, r0
 8006af2:	dc67      	bgt.n	8006bc4 <_dtoa_r+0x94c>
 8006af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	dc41      	bgt.n	8006b7e <_dtoa_r+0x906>
 8006afa:	e063      	b.n	8006bc4 <_dtoa_r+0x94c>
 8006afc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006afe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006b02:	e746      	b.n	8006992 <_dtoa_r+0x71a>
 8006b04:	9b07      	ldr	r3, [sp, #28]
 8006b06:	1e5c      	subs	r4, r3, #1
 8006b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b0a:	42a3      	cmp	r3, r4
 8006b0c:	bfbf      	itttt	lt
 8006b0e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006b10:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006b12:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006b14:	1ae3      	sublt	r3, r4, r3
 8006b16:	bfb4      	ite	lt
 8006b18:	18d2      	addlt	r2, r2, r3
 8006b1a:	1b1c      	subge	r4, r3, r4
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	bfbc      	itt	lt
 8006b20:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006b22:	2400      	movlt	r4, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfb5      	itete	lt
 8006b28:	eba8 0603 	sublt.w	r6, r8, r3
 8006b2c:	9b07      	ldrge	r3, [sp, #28]
 8006b2e:	2300      	movlt	r3, #0
 8006b30:	4646      	movge	r6, r8
 8006b32:	e730      	b.n	8006996 <_dtoa_r+0x71e>
 8006b34:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006b36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006b38:	4646      	mov	r6, r8
 8006b3a:	e735      	b.n	80069a8 <_dtoa_r+0x730>
 8006b3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006b3e:	e75c      	b.n	80069fa <_dtoa_r+0x782>
 8006b40:	2300      	movs	r3, #0
 8006b42:	e788      	b.n	8006a56 <_dtoa_r+0x7de>
 8006b44:	3fe00000 	.word	0x3fe00000
 8006b48:	40240000 	.word	0x40240000
 8006b4c:	40140000 	.word	0x40140000
 8006b50:	9b02      	ldr	r3, [sp, #8]
 8006b52:	e780      	b.n	8006a56 <_dtoa_r+0x7de>
 8006b54:	2300      	movs	r3, #0
 8006b56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b58:	e782      	b.n	8006a60 <_dtoa_r+0x7e8>
 8006b5a:	d099      	beq.n	8006a90 <_dtoa_r+0x818>
 8006b5c:	9a08      	ldr	r2, [sp, #32]
 8006b5e:	331c      	adds	r3, #28
 8006b60:	441a      	add	r2, r3
 8006b62:	4498      	add	r8, r3
 8006b64:	441e      	add	r6, r3
 8006b66:	9208      	str	r2, [sp, #32]
 8006b68:	e792      	b.n	8006a90 <_dtoa_r+0x818>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	e7f6      	b.n	8006b5c <_dtoa_r+0x8e4>
 8006b6e:	9b07      	ldr	r3, [sp, #28]
 8006b70:	9704      	str	r7, [sp, #16]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	dc20      	bgt.n	8006bb8 <_dtoa_r+0x940>
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	dd1e      	ble.n	8006bbc <_dtoa_r+0x944>
 8006b7e:	9b00      	ldr	r3, [sp, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f47f aec0 	bne.w	8006906 <_dtoa_r+0x68e>
 8006b86:	4621      	mov	r1, r4
 8006b88:	2205      	movs	r2, #5
 8006b8a:	4658      	mov	r0, fp
 8006b8c:	f000 fa9a 	bl	80070c4 <__multadd>
 8006b90:	4601      	mov	r1, r0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4648      	mov	r0, r9
 8006b96:	f000 fcf7 	bl	8007588 <__mcmp>
 8006b9a:	2800      	cmp	r0, #0
 8006b9c:	f77f aeb3 	ble.w	8006906 <_dtoa_r+0x68e>
 8006ba0:	4656      	mov	r6, sl
 8006ba2:	2331      	movs	r3, #49	@ 0x31
 8006ba4:	f806 3b01 	strb.w	r3, [r6], #1
 8006ba8:	9b04      	ldr	r3, [sp, #16]
 8006baa:	3301      	adds	r3, #1
 8006bac:	9304      	str	r3, [sp, #16]
 8006bae:	e6ae      	b.n	800690e <_dtoa_r+0x696>
 8006bb0:	9c07      	ldr	r4, [sp, #28]
 8006bb2:	9704      	str	r7, [sp, #16]
 8006bb4:	4625      	mov	r5, r4
 8006bb6:	e7f3      	b.n	8006ba0 <_dtoa_r+0x928>
 8006bb8:	9b07      	ldr	r3, [sp, #28]
 8006bba:	9300      	str	r3, [sp, #0]
 8006bbc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8104 	beq.w	8006dcc <_dtoa_r+0xb54>
 8006bc4:	2e00      	cmp	r6, #0
 8006bc6:	dd05      	ble.n	8006bd4 <_dtoa_r+0x95c>
 8006bc8:	4629      	mov	r1, r5
 8006bca:	4632      	mov	r2, r6
 8006bcc:	4658      	mov	r0, fp
 8006bce:	f000 fc6f 	bl	80074b0 <__lshift>
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d05a      	beq.n	8006c90 <_dtoa_r+0xa18>
 8006bda:	6869      	ldr	r1, [r5, #4]
 8006bdc:	4658      	mov	r0, fp
 8006bde:	f000 fa0f 	bl	8007000 <_Balloc>
 8006be2:	4606      	mov	r6, r0
 8006be4:	b928      	cbnz	r0, 8006bf2 <_dtoa_r+0x97a>
 8006be6:	4b84      	ldr	r3, [pc, #528]	@ (8006df8 <_dtoa_r+0xb80>)
 8006be8:	4602      	mov	r2, r0
 8006bea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006bee:	f7ff bb5a 	b.w	80062a6 <_dtoa_r+0x2e>
 8006bf2:	692a      	ldr	r2, [r5, #16]
 8006bf4:	3202      	adds	r2, #2
 8006bf6:	0092      	lsls	r2, r2, #2
 8006bf8:	f105 010c 	add.w	r1, r5, #12
 8006bfc:	300c      	adds	r0, #12
 8006bfe:	f002 fb03 	bl	8009208 <memcpy>
 8006c02:	2201      	movs	r2, #1
 8006c04:	4631      	mov	r1, r6
 8006c06:	4658      	mov	r0, fp
 8006c08:	f000 fc52 	bl	80074b0 <__lshift>
 8006c0c:	f10a 0301 	add.w	r3, sl, #1
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	9b00      	ldr	r3, [sp, #0]
 8006c14:	4453      	add	r3, sl
 8006c16:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c18:	9b02      	ldr	r3, [sp, #8]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	462f      	mov	r7, r5
 8006c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c22:	4605      	mov	r5, r0
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	4621      	mov	r1, r4
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	f7ff fa99 	bl	8006164 <quorem>
 8006c32:	4639      	mov	r1, r7
 8006c34:	9002      	str	r0, [sp, #8]
 8006c36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c3a:	4648      	mov	r0, r9
 8006c3c:	f000 fca4 	bl	8007588 <__mcmp>
 8006c40:	462a      	mov	r2, r5
 8006c42:	9008      	str	r0, [sp, #32]
 8006c44:	4621      	mov	r1, r4
 8006c46:	4658      	mov	r0, fp
 8006c48:	f000 fcba 	bl	80075c0 <__mdiff>
 8006c4c:	68c2      	ldr	r2, [r0, #12]
 8006c4e:	4606      	mov	r6, r0
 8006c50:	bb02      	cbnz	r2, 8006c94 <_dtoa_r+0xa1c>
 8006c52:	4601      	mov	r1, r0
 8006c54:	4648      	mov	r0, r9
 8006c56:	f000 fc97 	bl	8007588 <__mcmp>
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4658      	mov	r0, fp
 8006c60:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c62:	f000 fa0d 	bl	8007080 <_Bfree>
 8006c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c6a:	9e07      	ldr	r6, [sp, #28]
 8006c6c:	ea43 0102 	orr.w	r1, r3, r2
 8006c70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c72:	4319      	orrs	r1, r3
 8006c74:	d110      	bne.n	8006c98 <_dtoa_r+0xa20>
 8006c76:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006c7a:	d029      	beq.n	8006cd0 <_dtoa_r+0xa58>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd02      	ble.n	8006c88 <_dtoa_r+0xa10>
 8006c82:	9b02      	ldr	r3, [sp, #8]
 8006c84:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006c88:	9b00      	ldr	r3, [sp, #0]
 8006c8a:	f883 8000 	strb.w	r8, [r3]
 8006c8e:	e63f      	b.n	8006910 <_dtoa_r+0x698>
 8006c90:	4628      	mov	r0, r5
 8006c92:	e7bb      	b.n	8006c0c <_dtoa_r+0x994>
 8006c94:	2201      	movs	r2, #1
 8006c96:	e7e1      	b.n	8006c5c <_dtoa_r+0x9e4>
 8006c98:	9b08      	ldr	r3, [sp, #32]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	db04      	blt.n	8006ca8 <_dtoa_r+0xa30>
 8006c9e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ca0:	430b      	orrs	r3, r1
 8006ca2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	d120      	bne.n	8006cea <_dtoa_r+0xa72>
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	dded      	ble.n	8006c88 <_dtoa_r+0xa10>
 8006cac:	4649      	mov	r1, r9
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4658      	mov	r0, fp
 8006cb2:	f000 fbfd 	bl	80074b0 <__lshift>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4681      	mov	r9, r0
 8006cba:	f000 fc65 	bl	8007588 <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dc03      	bgt.n	8006cca <_dtoa_r+0xa52>
 8006cc2:	d1e1      	bne.n	8006c88 <_dtoa_r+0xa10>
 8006cc4:	f018 0f01 	tst.w	r8, #1
 8006cc8:	d0de      	beq.n	8006c88 <_dtoa_r+0xa10>
 8006cca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006cce:	d1d8      	bne.n	8006c82 <_dtoa_r+0xa0a>
 8006cd0:	9a00      	ldr	r2, [sp, #0]
 8006cd2:	2339      	movs	r3, #57	@ 0x39
 8006cd4:	7013      	strb	r3, [r2, #0]
 8006cd6:	4633      	mov	r3, r6
 8006cd8:	461e      	mov	r6, r3
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ce0:	2a39      	cmp	r2, #57	@ 0x39
 8006ce2:	d052      	beq.n	8006d8a <_dtoa_r+0xb12>
 8006ce4:	3201      	adds	r2, #1
 8006ce6:	701a      	strb	r2, [r3, #0]
 8006ce8:	e612      	b.n	8006910 <_dtoa_r+0x698>
 8006cea:	2a00      	cmp	r2, #0
 8006cec:	dd07      	ble.n	8006cfe <_dtoa_r+0xa86>
 8006cee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006cf2:	d0ed      	beq.n	8006cd0 <_dtoa_r+0xa58>
 8006cf4:	9a00      	ldr	r2, [sp, #0]
 8006cf6:	f108 0301 	add.w	r3, r8, #1
 8006cfa:	7013      	strb	r3, [r2, #0]
 8006cfc:	e608      	b.n	8006910 <_dtoa_r+0x698>
 8006cfe:	9b07      	ldr	r3, [sp, #28]
 8006d00:	9a07      	ldr	r2, [sp, #28]
 8006d02:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006d06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d028      	beq.n	8006d5e <_dtoa_r+0xae6>
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	2300      	movs	r3, #0
 8006d10:	220a      	movs	r2, #10
 8006d12:	4658      	mov	r0, fp
 8006d14:	f000 f9d6 	bl	80070c4 <__multadd>
 8006d18:	42af      	cmp	r7, r5
 8006d1a:	4681      	mov	r9, r0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	f04f 020a 	mov.w	r2, #10
 8006d24:	4639      	mov	r1, r7
 8006d26:	4658      	mov	r0, fp
 8006d28:	d107      	bne.n	8006d3a <_dtoa_r+0xac2>
 8006d2a:	f000 f9cb 	bl	80070c4 <__multadd>
 8006d2e:	4607      	mov	r7, r0
 8006d30:	4605      	mov	r5, r0
 8006d32:	9b07      	ldr	r3, [sp, #28]
 8006d34:	3301      	adds	r3, #1
 8006d36:	9307      	str	r3, [sp, #28]
 8006d38:	e774      	b.n	8006c24 <_dtoa_r+0x9ac>
 8006d3a:	f000 f9c3 	bl	80070c4 <__multadd>
 8006d3e:	4629      	mov	r1, r5
 8006d40:	4607      	mov	r7, r0
 8006d42:	2300      	movs	r3, #0
 8006d44:	220a      	movs	r2, #10
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 f9bc 	bl	80070c4 <__multadd>
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	e7f0      	b.n	8006d32 <_dtoa_r+0xaba>
 8006d50:	9b00      	ldr	r3, [sp, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	bfcc      	ite	gt
 8006d56:	461e      	movgt	r6, r3
 8006d58:	2601      	movle	r6, #1
 8006d5a:	4456      	add	r6, sl
 8006d5c:	2700      	movs	r7, #0
 8006d5e:	4649      	mov	r1, r9
 8006d60:	2201      	movs	r2, #1
 8006d62:	4658      	mov	r0, fp
 8006d64:	f000 fba4 	bl	80074b0 <__lshift>
 8006d68:	4621      	mov	r1, r4
 8006d6a:	4681      	mov	r9, r0
 8006d6c:	f000 fc0c 	bl	8007588 <__mcmp>
 8006d70:	2800      	cmp	r0, #0
 8006d72:	dcb0      	bgt.n	8006cd6 <_dtoa_r+0xa5e>
 8006d74:	d102      	bne.n	8006d7c <_dtoa_r+0xb04>
 8006d76:	f018 0f01 	tst.w	r8, #1
 8006d7a:	d1ac      	bne.n	8006cd6 <_dtoa_r+0xa5e>
 8006d7c:	4633      	mov	r3, r6
 8006d7e:	461e      	mov	r6, r3
 8006d80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d84:	2a30      	cmp	r2, #48	@ 0x30
 8006d86:	d0fa      	beq.n	8006d7e <_dtoa_r+0xb06>
 8006d88:	e5c2      	b.n	8006910 <_dtoa_r+0x698>
 8006d8a:	459a      	cmp	sl, r3
 8006d8c:	d1a4      	bne.n	8006cd8 <_dtoa_r+0xa60>
 8006d8e:	9b04      	ldr	r3, [sp, #16]
 8006d90:	3301      	adds	r3, #1
 8006d92:	9304      	str	r3, [sp, #16]
 8006d94:	2331      	movs	r3, #49	@ 0x31
 8006d96:	f88a 3000 	strb.w	r3, [sl]
 8006d9a:	e5b9      	b.n	8006910 <_dtoa_r+0x698>
 8006d9c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006d9e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006dfc <_dtoa_r+0xb84>
 8006da2:	b11b      	cbz	r3, 8006dac <_dtoa_r+0xb34>
 8006da4:	f10a 0308 	add.w	r3, sl, #8
 8006da8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006daa:	6013      	str	r3, [r2, #0]
 8006dac:	4650      	mov	r0, sl
 8006dae:	b019      	add	sp, #100	@ 0x64
 8006db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	f77f ae37 	ble.w	8006a2a <_dtoa_r+0x7b2>
 8006dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	e655      	b.n	8006a70 <_dtoa_r+0x7f8>
 8006dc4:	9b00      	ldr	r3, [sp, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f77f aed6 	ble.w	8006b78 <_dtoa_r+0x900>
 8006dcc:	4656      	mov	r6, sl
 8006dce:	4621      	mov	r1, r4
 8006dd0:	4648      	mov	r0, r9
 8006dd2:	f7ff f9c7 	bl	8006164 <quorem>
 8006dd6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006dda:	f806 8b01 	strb.w	r8, [r6], #1
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	eba6 020a 	sub.w	r2, r6, sl
 8006de4:	4293      	cmp	r3, r2
 8006de6:	ddb3      	ble.n	8006d50 <_dtoa_r+0xad8>
 8006de8:	4649      	mov	r1, r9
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4658      	mov	r0, fp
 8006df0:	f000 f968 	bl	80070c4 <__multadd>
 8006df4:	4681      	mov	r9, r0
 8006df6:	e7ea      	b.n	8006dce <_dtoa_r+0xb56>
 8006df8:	0800a2b3 	.word	0x0800a2b3
 8006dfc:	0800a237 	.word	0x0800a237

08006e00 <_free_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4605      	mov	r5, r0
 8006e04:	2900      	cmp	r1, #0
 8006e06:	d041      	beq.n	8006e8c <_free_r+0x8c>
 8006e08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e0c:	1f0c      	subs	r4, r1, #4
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	bfb8      	it	lt
 8006e12:	18e4      	addlt	r4, r4, r3
 8006e14:	f000 f8e8 	bl	8006fe8 <__malloc_lock>
 8006e18:	4a1d      	ldr	r2, [pc, #116]	@ (8006e90 <_free_r+0x90>)
 8006e1a:	6813      	ldr	r3, [r2, #0]
 8006e1c:	b933      	cbnz	r3, 8006e2c <_free_r+0x2c>
 8006e1e:	6063      	str	r3, [r4, #4]
 8006e20:	6014      	str	r4, [r2, #0]
 8006e22:	4628      	mov	r0, r5
 8006e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e28:	f000 b8e4 	b.w	8006ff4 <__malloc_unlock>
 8006e2c:	42a3      	cmp	r3, r4
 8006e2e:	d908      	bls.n	8006e42 <_free_r+0x42>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	1821      	adds	r1, r4, r0
 8006e34:	428b      	cmp	r3, r1
 8006e36:	bf01      	itttt	eq
 8006e38:	6819      	ldreq	r1, [r3, #0]
 8006e3a:	685b      	ldreq	r3, [r3, #4]
 8006e3c:	1809      	addeq	r1, r1, r0
 8006e3e:	6021      	streq	r1, [r4, #0]
 8006e40:	e7ed      	b.n	8006e1e <_free_r+0x1e>
 8006e42:	461a      	mov	r2, r3
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	b10b      	cbz	r3, 8006e4c <_free_r+0x4c>
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	d9fa      	bls.n	8006e42 <_free_r+0x42>
 8006e4c:	6811      	ldr	r1, [r2, #0]
 8006e4e:	1850      	adds	r0, r2, r1
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d10b      	bne.n	8006e6c <_free_r+0x6c>
 8006e54:	6820      	ldr	r0, [r4, #0]
 8006e56:	4401      	add	r1, r0
 8006e58:	1850      	adds	r0, r2, r1
 8006e5a:	4283      	cmp	r3, r0
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	d1e0      	bne.n	8006e22 <_free_r+0x22>
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	6053      	str	r3, [r2, #4]
 8006e66:	4408      	add	r0, r1
 8006e68:	6010      	str	r0, [r2, #0]
 8006e6a:	e7da      	b.n	8006e22 <_free_r+0x22>
 8006e6c:	d902      	bls.n	8006e74 <_free_r+0x74>
 8006e6e:	230c      	movs	r3, #12
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	e7d6      	b.n	8006e22 <_free_r+0x22>
 8006e74:	6820      	ldr	r0, [r4, #0]
 8006e76:	1821      	adds	r1, r4, r0
 8006e78:	428b      	cmp	r3, r1
 8006e7a:	bf04      	itt	eq
 8006e7c:	6819      	ldreq	r1, [r3, #0]
 8006e7e:	685b      	ldreq	r3, [r3, #4]
 8006e80:	6063      	str	r3, [r4, #4]
 8006e82:	bf04      	itt	eq
 8006e84:	1809      	addeq	r1, r1, r0
 8006e86:	6021      	streq	r1, [r4, #0]
 8006e88:	6054      	str	r4, [r2, #4]
 8006e8a:	e7ca      	b.n	8006e22 <_free_r+0x22>
 8006e8c:	bd38      	pop	{r3, r4, r5, pc}
 8006e8e:	bf00      	nop
 8006e90:	2000079c 	.word	0x2000079c

08006e94 <malloc>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	@ (8006ea0 <malloc+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f000 b825 	b.w	8006ee8 <_malloc_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000018 	.word	0x20000018

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ee4 <sbrk_aligned+0x40>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f002 f99a 	bl	80091e8 <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f002 f995 	bl	80091e8 <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d103      	bne.n	8006eca <sbrk_aligned+0x26>
 8006ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	1cc4      	adds	r4, r0, #3
 8006ecc:	f024 0403 	bic.w	r4, r4, #3
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d0f8      	beq.n	8006ec6 <sbrk_aligned+0x22>
 8006ed4:	1a21      	subs	r1, r4, r0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f002 f986 	bl	80091e8 <_sbrk_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1f2      	bne.n	8006ec6 <sbrk_aligned+0x22>
 8006ee0:	e7ef      	b.n	8006ec2 <sbrk_aligned+0x1e>
 8006ee2:	bf00      	nop
 8006ee4:	20000798 	.word	0x20000798

08006ee8 <_malloc_r>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	1ccd      	adds	r5, r1, #3
 8006eee:	f025 0503 	bic.w	r5, r5, #3
 8006ef2:	3508      	adds	r5, #8
 8006ef4:	2d0c      	cmp	r5, #12
 8006ef6:	bf38      	it	cc
 8006ef8:	250c      	movcc	r5, #12
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	4606      	mov	r6, r0
 8006efe:	db01      	blt.n	8006f04 <_malloc_r+0x1c>
 8006f00:	42a9      	cmp	r1, r5
 8006f02:	d904      	bls.n	8006f0e <_malloc_r+0x26>
 8006f04:	230c      	movs	r3, #12
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fe4 <_malloc_r+0xfc>
 8006f12:	f000 f869 	bl	8006fe8 <__malloc_lock>
 8006f16:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	bb44      	cbnz	r4, 8006f70 <_malloc_r+0x88>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff ffbf 	bl	8006ea4 <sbrk_aligned>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d158      	bne.n	8006fde <_malloc_r+0xf6>
 8006f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f30:	4627      	mov	r7, r4
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	d143      	bne.n	8006fbe <_malloc_r+0xd6>
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d04b      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	eb04 0903 	add.w	r9, r4, r3
 8006f44:	f002 f950 	bl	80091e8 <_sbrk_r>
 8006f48:	4581      	cmp	r9, r0
 8006f4a:	d142      	bne.n	8006fd2 <_malloc_r+0xea>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	1a6d      	subs	r5, r5, r1
 8006f50:	4629      	mov	r1, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffa6 	bl	8006ea4 <sbrk_aligned>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d03a      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	442b      	add	r3, r5
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f8d8 3000 	ldr.w	r3, [r8]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	bb62      	cbnz	r2, 8006fc4 <_malloc_r+0xdc>
 8006f6a:	f8c8 7000 	str.w	r7, [r8]
 8006f6e:	e00f      	b.n	8006f90 <_malloc_r+0xa8>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	1b52      	subs	r2, r2, r5
 8006f74:	d420      	bmi.n	8006fb8 <_malloc_r+0xd0>
 8006f76:	2a0b      	cmp	r2, #11
 8006f78:	d917      	bls.n	8006faa <_malloc_r+0xc2>
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	bf18      	it	ne
 8006f82:	6059      	strne	r1, [r3, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	bf08      	it	eq
 8006f88:	f8c8 1000 	streq.w	r1, [r8]
 8006f8c:	5162      	str	r2, [r4, r5]
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 f82f 	bl	8006ff4 <__malloc_unlock>
 8006f96:	f104 000b 	add.w	r0, r4, #11
 8006f9a:	1d23      	adds	r3, r4, #4
 8006f9c:	f020 0007 	bic.w	r0, r0, #7
 8006fa0:	1ac2      	subs	r2, r0, r3
 8006fa2:	bf1c      	itt	ne
 8006fa4:	1a1b      	subne	r3, r3, r0
 8006fa6:	50a3      	strne	r3, [r4, r2]
 8006fa8:	e7af      	b.n	8006f0a <_malloc_r+0x22>
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	bf0c      	ite	eq
 8006fb0:	f8c8 2000 	streq.w	r2, [r8]
 8006fb4:	605a      	strne	r2, [r3, #4]
 8006fb6:	e7eb      	b.n	8006f90 <_malloc_r+0xa8>
 8006fb8:	4623      	mov	r3, r4
 8006fba:	6864      	ldr	r4, [r4, #4]
 8006fbc:	e7ae      	b.n	8006f1c <_malloc_r+0x34>
 8006fbe:	463c      	mov	r4, r7
 8006fc0:	687f      	ldr	r7, [r7, #4]
 8006fc2:	e7b6      	b.n	8006f32 <_malloc_r+0x4a>
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d1fb      	bne.n	8006fc4 <_malloc_r+0xdc>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6053      	str	r3, [r2, #4]
 8006fd0:	e7de      	b.n	8006f90 <_malloc_r+0xa8>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f80c 	bl	8006ff4 <__malloc_unlock>
 8006fdc:	e794      	b.n	8006f08 <_malloc_r+0x20>
 8006fde:	6005      	str	r5, [r0, #0]
 8006fe0:	e7d6      	b.n	8006f90 <_malloc_r+0xa8>
 8006fe2:	bf00      	nop
 8006fe4:	2000079c 	.word	0x2000079c

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f7ff b8b2 	b.w	8006152 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000794 	.word	0x20000794

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	@ (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f7ff b8ad 	b.w	8006154 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000794 	.word	0x20000794

08007000 <_Balloc>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	69c6      	ldr	r6, [r0, #28]
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	b976      	cbnz	r6, 8007028 <_Balloc+0x28>
 800700a:	2010      	movs	r0, #16
 800700c:	f7ff ff42 	bl	8006e94 <malloc>
 8007010:	4602      	mov	r2, r0
 8007012:	61e0      	str	r0, [r4, #28]
 8007014:	b920      	cbnz	r0, 8007020 <_Balloc+0x20>
 8007016:	4b18      	ldr	r3, [pc, #96]	@ (8007078 <_Balloc+0x78>)
 8007018:	4818      	ldr	r0, [pc, #96]	@ (800707c <_Balloc+0x7c>)
 800701a:	216b      	movs	r1, #107	@ 0x6b
 800701c:	f002 f90c 	bl	8009238 <__assert_func>
 8007020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007024:	6006      	str	r6, [r0, #0]
 8007026:	60c6      	str	r6, [r0, #12]
 8007028:	69e6      	ldr	r6, [r4, #28]
 800702a:	68f3      	ldr	r3, [r6, #12]
 800702c:	b183      	cbz	r3, 8007050 <_Balloc+0x50>
 800702e:	69e3      	ldr	r3, [r4, #28]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007036:	b9b8      	cbnz	r0, 8007068 <_Balloc+0x68>
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f605 	lsl.w	r6, r1, r5
 800703e:	1d72      	adds	r2, r6, #5
 8007040:	0092      	lsls	r2, r2, #2
 8007042:	4620      	mov	r0, r4
 8007044:	f002 f916 	bl	8009274 <_calloc_r>
 8007048:	b160      	cbz	r0, 8007064 <_Balloc+0x64>
 800704a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800704e:	e00e      	b.n	800706e <_Balloc+0x6e>
 8007050:	2221      	movs	r2, #33	@ 0x21
 8007052:	2104      	movs	r1, #4
 8007054:	4620      	mov	r0, r4
 8007056:	f002 f90d 	bl	8009274 <_calloc_r>
 800705a:	69e3      	ldr	r3, [r4, #28]
 800705c:	60f0      	str	r0, [r6, #12]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e4      	bne.n	800702e <_Balloc+0x2e>
 8007064:	2000      	movs	r0, #0
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800706e:	2300      	movs	r3, #0
 8007070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007074:	e7f7      	b.n	8007066 <_Balloc+0x66>
 8007076:	bf00      	nop
 8007078:	0800a244 	.word	0x0800a244
 800707c:	0800a2c4 	.word	0x0800a2c4

08007080 <_Bfree>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	69c6      	ldr	r6, [r0, #28]
 8007084:	4605      	mov	r5, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b976      	cbnz	r6, 80070a8 <_Bfree+0x28>
 800708a:	2010      	movs	r0, #16
 800708c:	f7ff ff02 	bl	8006e94 <malloc>
 8007090:	4602      	mov	r2, r0
 8007092:	61e8      	str	r0, [r5, #28]
 8007094:	b920      	cbnz	r0, 80070a0 <_Bfree+0x20>
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <_Bfree+0x3c>)
 8007098:	4809      	ldr	r0, [pc, #36]	@ (80070c0 <_Bfree+0x40>)
 800709a:	218f      	movs	r1, #143	@ 0x8f
 800709c:	f002 f8cc 	bl	8009238 <__assert_func>
 80070a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070a4:	6006      	str	r6, [r0, #0]
 80070a6:	60c6      	str	r6, [r0, #12]
 80070a8:	b13c      	cbz	r4, 80070ba <_Bfree+0x3a>
 80070aa:	69eb      	ldr	r3, [r5, #28]
 80070ac:	6862      	ldr	r2, [r4, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b4:	6021      	str	r1, [r4, #0]
 80070b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	0800a244 	.word	0x0800a244
 80070c0:	0800a2c4 	.word	0x0800a2c4

080070c4 <__multadd>:
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	690d      	ldr	r5, [r1, #16]
 80070ca:	4607      	mov	r7, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	461e      	mov	r6, r3
 80070d0:	f101 0c14 	add.w	ip, r1, #20
 80070d4:	2000      	movs	r0, #0
 80070d6:	f8dc 3000 	ldr.w	r3, [ip]
 80070da:	b299      	uxth	r1, r3
 80070dc:	fb02 6101 	mla	r1, r2, r1, r6
 80070e0:	0c1e      	lsrs	r6, r3, #16
 80070e2:	0c0b      	lsrs	r3, r1, #16
 80070e4:	fb02 3306 	mla	r3, r2, r6, r3
 80070e8:	b289      	uxth	r1, r1
 80070ea:	3001      	adds	r0, #1
 80070ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070f0:	4285      	cmp	r5, r0
 80070f2:	f84c 1b04 	str.w	r1, [ip], #4
 80070f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070fa:	dcec      	bgt.n	80070d6 <__multadd+0x12>
 80070fc:	b30e      	cbz	r6, 8007142 <__multadd+0x7e>
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	42ab      	cmp	r3, r5
 8007102:	dc19      	bgt.n	8007138 <__multadd+0x74>
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4638      	mov	r0, r7
 8007108:	3101      	adds	r1, #1
 800710a:	f7ff ff79 	bl	8007000 <_Balloc>
 800710e:	4680      	mov	r8, r0
 8007110:	b928      	cbnz	r0, 800711e <__multadd+0x5a>
 8007112:	4602      	mov	r2, r0
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <__multadd+0x84>)
 8007116:	480d      	ldr	r0, [pc, #52]	@ (800714c <__multadd+0x88>)
 8007118:	21ba      	movs	r1, #186	@ 0xba
 800711a:	f002 f88d 	bl	8009238 <__assert_func>
 800711e:	6922      	ldr	r2, [r4, #16]
 8007120:	3202      	adds	r2, #2
 8007122:	f104 010c 	add.w	r1, r4, #12
 8007126:	0092      	lsls	r2, r2, #2
 8007128:	300c      	adds	r0, #12
 800712a:	f002 f86d 	bl	8009208 <memcpy>
 800712e:	4621      	mov	r1, r4
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff ffa5 	bl	8007080 <_Bfree>
 8007136:	4644      	mov	r4, r8
 8007138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800713c:	3501      	adds	r5, #1
 800713e:	615e      	str	r6, [r3, #20]
 8007140:	6125      	str	r5, [r4, #16]
 8007142:	4620      	mov	r0, r4
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	0800a2b3 	.word	0x0800a2b3
 800714c:	0800a2c4 	.word	0x0800a2c4

08007150 <__s2b>:
 8007150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007154:	460c      	mov	r4, r1
 8007156:	4615      	mov	r5, r2
 8007158:	461f      	mov	r7, r3
 800715a:	2209      	movs	r2, #9
 800715c:	3308      	adds	r3, #8
 800715e:	4606      	mov	r6, r0
 8007160:	fb93 f3f2 	sdiv	r3, r3, r2
 8007164:	2100      	movs	r1, #0
 8007166:	2201      	movs	r2, #1
 8007168:	429a      	cmp	r2, r3
 800716a:	db09      	blt.n	8007180 <__s2b+0x30>
 800716c:	4630      	mov	r0, r6
 800716e:	f7ff ff47 	bl	8007000 <_Balloc>
 8007172:	b940      	cbnz	r0, 8007186 <__s2b+0x36>
 8007174:	4602      	mov	r2, r0
 8007176:	4b19      	ldr	r3, [pc, #100]	@ (80071dc <__s2b+0x8c>)
 8007178:	4819      	ldr	r0, [pc, #100]	@ (80071e0 <__s2b+0x90>)
 800717a:	21d3      	movs	r1, #211	@ 0xd3
 800717c:	f002 f85c 	bl	8009238 <__assert_func>
 8007180:	0052      	lsls	r2, r2, #1
 8007182:	3101      	adds	r1, #1
 8007184:	e7f0      	b.n	8007168 <__s2b+0x18>
 8007186:	9b08      	ldr	r3, [sp, #32]
 8007188:	6143      	str	r3, [r0, #20]
 800718a:	2d09      	cmp	r5, #9
 800718c:	f04f 0301 	mov.w	r3, #1
 8007190:	6103      	str	r3, [r0, #16]
 8007192:	dd16      	ble.n	80071c2 <__s2b+0x72>
 8007194:	f104 0909 	add.w	r9, r4, #9
 8007198:	46c8      	mov	r8, r9
 800719a:	442c      	add	r4, r5
 800719c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80071a0:	4601      	mov	r1, r0
 80071a2:	3b30      	subs	r3, #48	@ 0x30
 80071a4:	220a      	movs	r2, #10
 80071a6:	4630      	mov	r0, r6
 80071a8:	f7ff ff8c 	bl	80070c4 <__multadd>
 80071ac:	45a0      	cmp	r8, r4
 80071ae:	d1f5      	bne.n	800719c <__s2b+0x4c>
 80071b0:	f1a5 0408 	sub.w	r4, r5, #8
 80071b4:	444c      	add	r4, r9
 80071b6:	1b2d      	subs	r5, r5, r4
 80071b8:	1963      	adds	r3, r4, r5
 80071ba:	42bb      	cmp	r3, r7
 80071bc:	db04      	blt.n	80071c8 <__s2b+0x78>
 80071be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c2:	340a      	adds	r4, #10
 80071c4:	2509      	movs	r5, #9
 80071c6:	e7f6      	b.n	80071b6 <__s2b+0x66>
 80071c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071cc:	4601      	mov	r1, r0
 80071ce:	3b30      	subs	r3, #48	@ 0x30
 80071d0:	220a      	movs	r2, #10
 80071d2:	4630      	mov	r0, r6
 80071d4:	f7ff ff76 	bl	80070c4 <__multadd>
 80071d8:	e7ee      	b.n	80071b8 <__s2b+0x68>
 80071da:	bf00      	nop
 80071dc:	0800a2b3 	.word	0x0800a2b3
 80071e0:	0800a2c4 	.word	0x0800a2c4

080071e4 <__hi0bits>:
 80071e4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071e8:	4603      	mov	r3, r0
 80071ea:	bf36      	itet	cc
 80071ec:	0403      	lslcc	r3, r0, #16
 80071ee:	2000      	movcs	r0, #0
 80071f0:	2010      	movcc	r0, #16
 80071f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80071f6:	bf3c      	itt	cc
 80071f8:	021b      	lslcc	r3, r3, #8
 80071fa:	3008      	addcc	r0, #8
 80071fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007200:	bf3c      	itt	cc
 8007202:	011b      	lslcc	r3, r3, #4
 8007204:	3004      	addcc	r0, #4
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720a:	bf3c      	itt	cc
 800720c:	009b      	lslcc	r3, r3, #2
 800720e:	3002      	addcc	r0, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	db05      	blt.n	8007220 <__hi0bits+0x3c>
 8007214:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007218:	f100 0001 	add.w	r0, r0, #1
 800721c:	bf08      	it	eq
 800721e:	2020      	moveq	r0, #32
 8007220:	4770      	bx	lr

08007222 <__lo0bits>:
 8007222:	6803      	ldr	r3, [r0, #0]
 8007224:	4602      	mov	r2, r0
 8007226:	f013 0007 	ands.w	r0, r3, #7
 800722a:	d00b      	beq.n	8007244 <__lo0bits+0x22>
 800722c:	07d9      	lsls	r1, r3, #31
 800722e:	d421      	bmi.n	8007274 <__lo0bits+0x52>
 8007230:	0798      	lsls	r0, r3, #30
 8007232:	bf49      	itett	mi
 8007234:	085b      	lsrmi	r3, r3, #1
 8007236:	089b      	lsrpl	r3, r3, #2
 8007238:	2001      	movmi	r0, #1
 800723a:	6013      	strmi	r3, [r2, #0]
 800723c:	bf5c      	itt	pl
 800723e:	6013      	strpl	r3, [r2, #0]
 8007240:	2002      	movpl	r0, #2
 8007242:	4770      	bx	lr
 8007244:	b299      	uxth	r1, r3
 8007246:	b909      	cbnz	r1, 800724c <__lo0bits+0x2a>
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	2010      	movs	r0, #16
 800724c:	b2d9      	uxtb	r1, r3
 800724e:	b909      	cbnz	r1, 8007254 <__lo0bits+0x32>
 8007250:	3008      	adds	r0, #8
 8007252:	0a1b      	lsrs	r3, r3, #8
 8007254:	0719      	lsls	r1, r3, #28
 8007256:	bf04      	itt	eq
 8007258:	091b      	lsreq	r3, r3, #4
 800725a:	3004      	addeq	r0, #4
 800725c:	0799      	lsls	r1, r3, #30
 800725e:	bf04      	itt	eq
 8007260:	089b      	lsreq	r3, r3, #2
 8007262:	3002      	addeq	r0, #2
 8007264:	07d9      	lsls	r1, r3, #31
 8007266:	d403      	bmi.n	8007270 <__lo0bits+0x4e>
 8007268:	085b      	lsrs	r3, r3, #1
 800726a:	f100 0001 	add.w	r0, r0, #1
 800726e:	d003      	beq.n	8007278 <__lo0bits+0x56>
 8007270:	6013      	str	r3, [r2, #0]
 8007272:	4770      	bx	lr
 8007274:	2000      	movs	r0, #0
 8007276:	4770      	bx	lr
 8007278:	2020      	movs	r0, #32
 800727a:	4770      	bx	lr

0800727c <__i2b>:
 800727c:	b510      	push	{r4, lr}
 800727e:	460c      	mov	r4, r1
 8007280:	2101      	movs	r1, #1
 8007282:	f7ff febd 	bl	8007000 <_Balloc>
 8007286:	4602      	mov	r2, r0
 8007288:	b928      	cbnz	r0, 8007296 <__i2b+0x1a>
 800728a:	4b05      	ldr	r3, [pc, #20]	@ (80072a0 <__i2b+0x24>)
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <__i2b+0x28>)
 800728e:	f240 1145 	movw	r1, #325	@ 0x145
 8007292:	f001 ffd1 	bl	8009238 <__assert_func>
 8007296:	2301      	movs	r3, #1
 8007298:	6144      	str	r4, [r0, #20]
 800729a:	6103      	str	r3, [r0, #16]
 800729c:	bd10      	pop	{r4, pc}
 800729e:	bf00      	nop
 80072a0:	0800a2b3 	.word	0x0800a2b3
 80072a4:	0800a2c4 	.word	0x0800a2c4

080072a8 <__multiply>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	4614      	mov	r4, r2
 80072ae:	690a      	ldr	r2, [r1, #16]
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	bfa8      	it	ge
 80072b6:	4623      	movge	r3, r4
 80072b8:	460f      	mov	r7, r1
 80072ba:	bfa4      	itt	ge
 80072bc:	460c      	movge	r4, r1
 80072be:	461f      	movge	r7, r3
 80072c0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80072c4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80072c8:	68a3      	ldr	r3, [r4, #8]
 80072ca:	6861      	ldr	r1, [r4, #4]
 80072cc:	eb0a 0609 	add.w	r6, sl, r9
 80072d0:	42b3      	cmp	r3, r6
 80072d2:	b085      	sub	sp, #20
 80072d4:	bfb8      	it	lt
 80072d6:	3101      	addlt	r1, #1
 80072d8:	f7ff fe92 	bl	8007000 <_Balloc>
 80072dc:	b930      	cbnz	r0, 80072ec <__multiply+0x44>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b44      	ldr	r3, [pc, #272]	@ (80073f4 <__multiply+0x14c>)
 80072e2:	4845      	ldr	r0, [pc, #276]	@ (80073f8 <__multiply+0x150>)
 80072e4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072e8:	f001 ffa6 	bl	8009238 <__assert_func>
 80072ec:	f100 0514 	add.w	r5, r0, #20
 80072f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072f4:	462b      	mov	r3, r5
 80072f6:	2200      	movs	r2, #0
 80072f8:	4543      	cmp	r3, r8
 80072fa:	d321      	bcc.n	8007340 <__multiply+0x98>
 80072fc:	f107 0114 	add.w	r1, r7, #20
 8007300:	f104 0214 	add.w	r2, r4, #20
 8007304:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007308:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	1b13      	subs	r3, r2, r4
 8007310:	3b15      	subs	r3, #21
 8007312:	f023 0303 	bic.w	r3, r3, #3
 8007316:	3304      	adds	r3, #4
 8007318:	f104 0715 	add.w	r7, r4, #21
 800731c:	42ba      	cmp	r2, r7
 800731e:	bf38      	it	cc
 8007320:	2304      	movcc	r3, #4
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	9b02      	ldr	r3, [sp, #8]
 8007326:	9103      	str	r1, [sp, #12]
 8007328:	428b      	cmp	r3, r1
 800732a:	d80c      	bhi.n	8007346 <__multiply+0x9e>
 800732c:	2e00      	cmp	r6, #0
 800732e:	dd03      	ble.n	8007338 <__multiply+0x90>
 8007330:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007334:	2b00      	cmp	r3, #0
 8007336:	d05b      	beq.n	80073f0 <__multiply+0x148>
 8007338:	6106      	str	r6, [r0, #16]
 800733a:	b005      	add	sp, #20
 800733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007340:	f843 2b04 	str.w	r2, [r3], #4
 8007344:	e7d8      	b.n	80072f8 <__multiply+0x50>
 8007346:	f8b1 a000 	ldrh.w	sl, [r1]
 800734a:	f1ba 0f00 	cmp.w	sl, #0
 800734e:	d024      	beq.n	800739a <__multiply+0xf2>
 8007350:	f104 0e14 	add.w	lr, r4, #20
 8007354:	46a9      	mov	r9, r5
 8007356:	f04f 0c00 	mov.w	ip, #0
 800735a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800735e:	f8d9 3000 	ldr.w	r3, [r9]
 8007362:	fa1f fb87 	uxth.w	fp, r7
 8007366:	b29b      	uxth	r3, r3
 8007368:	fb0a 330b 	mla	r3, sl, fp, r3
 800736c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007370:	f8d9 7000 	ldr.w	r7, [r9]
 8007374:	4463      	add	r3, ip
 8007376:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800737a:	fb0a c70b 	mla	r7, sl, fp, ip
 800737e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007382:	b29b      	uxth	r3, r3
 8007384:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007388:	4572      	cmp	r2, lr
 800738a:	f849 3b04 	str.w	r3, [r9], #4
 800738e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007392:	d8e2      	bhi.n	800735a <__multiply+0xb2>
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	f845 c003 	str.w	ip, [r5, r3]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80073a0:	3104      	adds	r1, #4
 80073a2:	f1b9 0f00 	cmp.w	r9, #0
 80073a6:	d021      	beq.n	80073ec <__multiply+0x144>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	f104 0c14 	add.w	ip, r4, #20
 80073ae:	46ae      	mov	lr, r5
 80073b0:	f04f 0a00 	mov.w	sl, #0
 80073b4:	f8bc b000 	ldrh.w	fp, [ip]
 80073b8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80073bc:	fb09 770b 	mla	r7, r9, fp, r7
 80073c0:	4457      	add	r7, sl
 80073c2:	b29b      	uxth	r3, r3
 80073c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80073c8:	f84e 3b04 	str.w	r3, [lr], #4
 80073cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073d0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073d4:	f8be 3000 	ldrh.w	r3, [lr]
 80073d8:	fb09 330a 	mla	r3, r9, sl, r3
 80073dc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073e0:	4562      	cmp	r2, ip
 80073e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073e6:	d8e5      	bhi.n	80073b4 <__multiply+0x10c>
 80073e8:	9f01      	ldr	r7, [sp, #4]
 80073ea:	51eb      	str	r3, [r5, r7]
 80073ec:	3504      	adds	r5, #4
 80073ee:	e799      	b.n	8007324 <__multiply+0x7c>
 80073f0:	3e01      	subs	r6, #1
 80073f2:	e79b      	b.n	800732c <__multiply+0x84>
 80073f4:	0800a2b3 	.word	0x0800a2b3
 80073f8:	0800a2c4 	.word	0x0800a2c4

080073fc <__pow5mult>:
 80073fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007400:	4615      	mov	r5, r2
 8007402:	f012 0203 	ands.w	r2, r2, #3
 8007406:	4607      	mov	r7, r0
 8007408:	460e      	mov	r6, r1
 800740a:	d007      	beq.n	800741c <__pow5mult+0x20>
 800740c:	4c25      	ldr	r4, [pc, #148]	@ (80074a4 <__pow5mult+0xa8>)
 800740e:	3a01      	subs	r2, #1
 8007410:	2300      	movs	r3, #0
 8007412:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007416:	f7ff fe55 	bl	80070c4 <__multadd>
 800741a:	4606      	mov	r6, r0
 800741c:	10ad      	asrs	r5, r5, #2
 800741e:	d03d      	beq.n	800749c <__pow5mult+0xa0>
 8007420:	69fc      	ldr	r4, [r7, #28]
 8007422:	b97c      	cbnz	r4, 8007444 <__pow5mult+0x48>
 8007424:	2010      	movs	r0, #16
 8007426:	f7ff fd35 	bl	8006e94 <malloc>
 800742a:	4602      	mov	r2, r0
 800742c:	61f8      	str	r0, [r7, #28]
 800742e:	b928      	cbnz	r0, 800743c <__pow5mult+0x40>
 8007430:	4b1d      	ldr	r3, [pc, #116]	@ (80074a8 <__pow5mult+0xac>)
 8007432:	481e      	ldr	r0, [pc, #120]	@ (80074ac <__pow5mult+0xb0>)
 8007434:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007438:	f001 fefe 	bl	8009238 <__assert_func>
 800743c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007440:	6004      	str	r4, [r0, #0]
 8007442:	60c4      	str	r4, [r0, #12]
 8007444:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007448:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800744c:	b94c      	cbnz	r4, 8007462 <__pow5mult+0x66>
 800744e:	f240 2171 	movw	r1, #625	@ 0x271
 8007452:	4638      	mov	r0, r7
 8007454:	f7ff ff12 	bl	800727c <__i2b>
 8007458:	2300      	movs	r3, #0
 800745a:	f8c8 0008 	str.w	r0, [r8, #8]
 800745e:	4604      	mov	r4, r0
 8007460:	6003      	str	r3, [r0, #0]
 8007462:	f04f 0900 	mov.w	r9, #0
 8007466:	07eb      	lsls	r3, r5, #31
 8007468:	d50a      	bpl.n	8007480 <__pow5mult+0x84>
 800746a:	4631      	mov	r1, r6
 800746c:	4622      	mov	r2, r4
 800746e:	4638      	mov	r0, r7
 8007470:	f7ff ff1a 	bl	80072a8 <__multiply>
 8007474:	4631      	mov	r1, r6
 8007476:	4680      	mov	r8, r0
 8007478:	4638      	mov	r0, r7
 800747a:	f7ff fe01 	bl	8007080 <_Bfree>
 800747e:	4646      	mov	r6, r8
 8007480:	106d      	asrs	r5, r5, #1
 8007482:	d00b      	beq.n	800749c <__pow5mult+0xa0>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	b938      	cbnz	r0, 8007498 <__pow5mult+0x9c>
 8007488:	4622      	mov	r2, r4
 800748a:	4621      	mov	r1, r4
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff ff0b 	bl	80072a8 <__multiply>
 8007492:	6020      	str	r0, [r4, #0]
 8007494:	f8c0 9000 	str.w	r9, [r0]
 8007498:	4604      	mov	r4, r0
 800749a:	e7e4      	b.n	8007466 <__pow5mult+0x6a>
 800749c:	4630      	mov	r0, r6
 800749e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074a2:	bf00      	nop
 80074a4:	0800a320 	.word	0x0800a320
 80074a8:	0800a244 	.word	0x0800a244
 80074ac:	0800a2c4 	.word	0x0800a2c4

080074b0 <__lshift>:
 80074b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074b4:	460c      	mov	r4, r1
 80074b6:	6849      	ldr	r1, [r1, #4]
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074be:	68a3      	ldr	r3, [r4, #8]
 80074c0:	4607      	mov	r7, r0
 80074c2:	4691      	mov	r9, r2
 80074c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074c8:	f108 0601 	add.w	r6, r8, #1
 80074cc:	42b3      	cmp	r3, r6
 80074ce:	db0b      	blt.n	80074e8 <__lshift+0x38>
 80074d0:	4638      	mov	r0, r7
 80074d2:	f7ff fd95 	bl	8007000 <_Balloc>
 80074d6:	4605      	mov	r5, r0
 80074d8:	b948      	cbnz	r0, 80074ee <__lshift+0x3e>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b28      	ldr	r3, [pc, #160]	@ (8007580 <__lshift+0xd0>)
 80074de:	4829      	ldr	r0, [pc, #164]	@ (8007584 <__lshift+0xd4>)
 80074e0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074e4:	f001 fea8 	bl	8009238 <__assert_func>
 80074e8:	3101      	adds	r1, #1
 80074ea:	005b      	lsls	r3, r3, #1
 80074ec:	e7ee      	b.n	80074cc <__lshift+0x1c>
 80074ee:	2300      	movs	r3, #0
 80074f0:	f100 0114 	add.w	r1, r0, #20
 80074f4:	f100 0210 	add.w	r2, r0, #16
 80074f8:	4618      	mov	r0, r3
 80074fa:	4553      	cmp	r3, sl
 80074fc:	db33      	blt.n	8007566 <__lshift+0xb6>
 80074fe:	6920      	ldr	r0, [r4, #16]
 8007500:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007504:	f104 0314 	add.w	r3, r4, #20
 8007508:	f019 091f 	ands.w	r9, r9, #31
 800750c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007510:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007514:	d02b      	beq.n	800756e <__lshift+0xbe>
 8007516:	f1c9 0e20 	rsb	lr, r9, #32
 800751a:	468a      	mov	sl, r1
 800751c:	2200      	movs	r2, #0
 800751e:	6818      	ldr	r0, [r3, #0]
 8007520:	fa00 f009 	lsl.w	r0, r0, r9
 8007524:	4310      	orrs	r0, r2
 8007526:	f84a 0b04 	str.w	r0, [sl], #4
 800752a:	f853 2b04 	ldr.w	r2, [r3], #4
 800752e:	459c      	cmp	ip, r3
 8007530:	fa22 f20e 	lsr.w	r2, r2, lr
 8007534:	d8f3      	bhi.n	800751e <__lshift+0x6e>
 8007536:	ebac 0304 	sub.w	r3, ip, r4
 800753a:	3b15      	subs	r3, #21
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	3304      	adds	r3, #4
 8007542:	f104 0015 	add.w	r0, r4, #21
 8007546:	4584      	cmp	ip, r0
 8007548:	bf38      	it	cc
 800754a:	2304      	movcc	r3, #4
 800754c:	50ca      	str	r2, [r1, r3]
 800754e:	b10a      	cbz	r2, 8007554 <__lshift+0xa4>
 8007550:	f108 0602 	add.w	r6, r8, #2
 8007554:	3e01      	subs	r6, #1
 8007556:	4638      	mov	r0, r7
 8007558:	612e      	str	r6, [r5, #16]
 800755a:	4621      	mov	r1, r4
 800755c:	f7ff fd90 	bl	8007080 <_Bfree>
 8007560:	4628      	mov	r0, r5
 8007562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007566:	f842 0f04 	str.w	r0, [r2, #4]!
 800756a:	3301      	adds	r3, #1
 800756c:	e7c5      	b.n	80074fa <__lshift+0x4a>
 800756e:	3904      	subs	r1, #4
 8007570:	f853 2b04 	ldr.w	r2, [r3], #4
 8007574:	f841 2f04 	str.w	r2, [r1, #4]!
 8007578:	459c      	cmp	ip, r3
 800757a:	d8f9      	bhi.n	8007570 <__lshift+0xc0>
 800757c:	e7ea      	b.n	8007554 <__lshift+0xa4>
 800757e:	bf00      	nop
 8007580:	0800a2b3 	.word	0x0800a2b3
 8007584:	0800a2c4 	.word	0x0800a2c4

08007588 <__mcmp>:
 8007588:	690a      	ldr	r2, [r1, #16]
 800758a:	4603      	mov	r3, r0
 800758c:	6900      	ldr	r0, [r0, #16]
 800758e:	1a80      	subs	r0, r0, r2
 8007590:	b530      	push	{r4, r5, lr}
 8007592:	d10e      	bne.n	80075b2 <__mcmp+0x2a>
 8007594:	3314      	adds	r3, #20
 8007596:	3114      	adds	r1, #20
 8007598:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800759c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075a8:	4295      	cmp	r5, r2
 80075aa:	d003      	beq.n	80075b4 <__mcmp+0x2c>
 80075ac:	d205      	bcs.n	80075ba <__mcmp+0x32>
 80075ae:	f04f 30ff 	mov.w	r0, #4294967295
 80075b2:	bd30      	pop	{r4, r5, pc}
 80075b4:	42a3      	cmp	r3, r4
 80075b6:	d3f3      	bcc.n	80075a0 <__mcmp+0x18>
 80075b8:	e7fb      	b.n	80075b2 <__mcmp+0x2a>
 80075ba:	2001      	movs	r0, #1
 80075bc:	e7f9      	b.n	80075b2 <__mcmp+0x2a>
	...

080075c0 <__mdiff>:
 80075c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075c4:	4689      	mov	r9, r1
 80075c6:	4606      	mov	r6, r0
 80075c8:	4611      	mov	r1, r2
 80075ca:	4648      	mov	r0, r9
 80075cc:	4614      	mov	r4, r2
 80075ce:	f7ff ffdb 	bl	8007588 <__mcmp>
 80075d2:	1e05      	subs	r5, r0, #0
 80075d4:	d112      	bne.n	80075fc <__mdiff+0x3c>
 80075d6:	4629      	mov	r1, r5
 80075d8:	4630      	mov	r0, r6
 80075da:	f7ff fd11 	bl	8007000 <_Balloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	b928      	cbnz	r0, 80075ee <__mdiff+0x2e>
 80075e2:	4b3f      	ldr	r3, [pc, #252]	@ (80076e0 <__mdiff+0x120>)
 80075e4:	f240 2137 	movw	r1, #567	@ 0x237
 80075e8:	483e      	ldr	r0, [pc, #248]	@ (80076e4 <__mdiff+0x124>)
 80075ea:	f001 fe25 	bl	8009238 <__assert_func>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075f4:	4610      	mov	r0, r2
 80075f6:	b003      	add	sp, #12
 80075f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fc:	bfbc      	itt	lt
 80075fe:	464b      	movlt	r3, r9
 8007600:	46a1      	movlt	r9, r4
 8007602:	4630      	mov	r0, r6
 8007604:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007608:	bfba      	itte	lt
 800760a:	461c      	movlt	r4, r3
 800760c:	2501      	movlt	r5, #1
 800760e:	2500      	movge	r5, #0
 8007610:	f7ff fcf6 	bl	8007000 <_Balloc>
 8007614:	4602      	mov	r2, r0
 8007616:	b918      	cbnz	r0, 8007620 <__mdiff+0x60>
 8007618:	4b31      	ldr	r3, [pc, #196]	@ (80076e0 <__mdiff+0x120>)
 800761a:	f240 2145 	movw	r1, #581	@ 0x245
 800761e:	e7e3      	b.n	80075e8 <__mdiff+0x28>
 8007620:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007624:	6926      	ldr	r6, [r4, #16]
 8007626:	60c5      	str	r5, [r0, #12]
 8007628:	f109 0310 	add.w	r3, r9, #16
 800762c:	f109 0514 	add.w	r5, r9, #20
 8007630:	f104 0e14 	add.w	lr, r4, #20
 8007634:	f100 0b14 	add.w	fp, r0, #20
 8007638:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800763c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	46d9      	mov	r9, fp
 8007644:	f04f 0c00 	mov.w	ip, #0
 8007648:	9b01      	ldr	r3, [sp, #4]
 800764a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800764e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007652:	9301      	str	r3, [sp, #4]
 8007654:	fa1f f38a 	uxth.w	r3, sl
 8007658:	4619      	mov	r1, r3
 800765a:	b283      	uxth	r3, r0
 800765c:	1acb      	subs	r3, r1, r3
 800765e:	0c00      	lsrs	r0, r0, #16
 8007660:	4463      	add	r3, ip
 8007662:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007666:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800766a:	b29b      	uxth	r3, r3
 800766c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007670:	4576      	cmp	r6, lr
 8007672:	f849 3b04 	str.w	r3, [r9], #4
 8007676:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800767a:	d8e5      	bhi.n	8007648 <__mdiff+0x88>
 800767c:	1b33      	subs	r3, r6, r4
 800767e:	3b15      	subs	r3, #21
 8007680:	f023 0303 	bic.w	r3, r3, #3
 8007684:	3415      	adds	r4, #21
 8007686:	3304      	adds	r3, #4
 8007688:	42a6      	cmp	r6, r4
 800768a:	bf38      	it	cc
 800768c:	2304      	movcc	r3, #4
 800768e:	441d      	add	r5, r3
 8007690:	445b      	add	r3, fp
 8007692:	461e      	mov	r6, r3
 8007694:	462c      	mov	r4, r5
 8007696:	4544      	cmp	r4, r8
 8007698:	d30e      	bcc.n	80076b8 <__mdiff+0xf8>
 800769a:	f108 0103 	add.w	r1, r8, #3
 800769e:	1b49      	subs	r1, r1, r5
 80076a0:	f021 0103 	bic.w	r1, r1, #3
 80076a4:	3d03      	subs	r5, #3
 80076a6:	45a8      	cmp	r8, r5
 80076a8:	bf38      	it	cc
 80076aa:	2100      	movcc	r1, #0
 80076ac:	440b      	add	r3, r1
 80076ae:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076b2:	b191      	cbz	r1, 80076da <__mdiff+0x11a>
 80076b4:	6117      	str	r7, [r2, #16]
 80076b6:	e79d      	b.n	80075f4 <__mdiff+0x34>
 80076b8:	f854 1b04 	ldr.w	r1, [r4], #4
 80076bc:	46e6      	mov	lr, ip
 80076be:	0c08      	lsrs	r0, r1, #16
 80076c0:	fa1c fc81 	uxtah	ip, ip, r1
 80076c4:	4471      	add	r1, lr
 80076c6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80076ca:	b289      	uxth	r1, r1
 80076cc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076d0:	f846 1b04 	str.w	r1, [r6], #4
 80076d4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076d8:	e7dd      	b.n	8007696 <__mdiff+0xd6>
 80076da:	3f01      	subs	r7, #1
 80076dc:	e7e7      	b.n	80076ae <__mdiff+0xee>
 80076de:	bf00      	nop
 80076e0:	0800a2b3 	.word	0x0800a2b3
 80076e4:	0800a2c4 	.word	0x0800a2c4

080076e8 <__ulp>:
 80076e8:	b082      	sub	sp, #8
 80076ea:	ed8d 0b00 	vstr	d0, [sp]
 80076ee:	9a01      	ldr	r2, [sp, #4]
 80076f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007730 <__ulp+0x48>)
 80076f2:	4013      	ands	r3, r2
 80076f4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dc08      	bgt.n	800770e <__ulp+0x26>
 80076fc:	425b      	negs	r3, r3
 80076fe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007702:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007706:	da04      	bge.n	8007712 <__ulp+0x2a>
 8007708:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800770c:	4113      	asrs	r3, r2
 800770e:	2200      	movs	r2, #0
 8007710:	e008      	b.n	8007724 <__ulp+0x3c>
 8007712:	f1a2 0314 	sub.w	r3, r2, #20
 8007716:	2b1e      	cmp	r3, #30
 8007718:	bfda      	itte	le
 800771a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800771e:	40da      	lsrle	r2, r3
 8007720:	2201      	movgt	r2, #1
 8007722:	2300      	movs	r3, #0
 8007724:	4619      	mov	r1, r3
 8007726:	4610      	mov	r0, r2
 8007728:	ec41 0b10 	vmov	d0, r0, r1
 800772c:	b002      	add	sp, #8
 800772e:	4770      	bx	lr
 8007730:	7ff00000 	.word	0x7ff00000

08007734 <__b2d>:
 8007734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007738:	6906      	ldr	r6, [r0, #16]
 800773a:	f100 0814 	add.w	r8, r0, #20
 800773e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007742:	1f37      	subs	r7, r6, #4
 8007744:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007748:	4610      	mov	r0, r2
 800774a:	f7ff fd4b 	bl	80071e4 <__hi0bits>
 800774e:	f1c0 0320 	rsb	r3, r0, #32
 8007752:	280a      	cmp	r0, #10
 8007754:	600b      	str	r3, [r1, #0]
 8007756:	491b      	ldr	r1, [pc, #108]	@ (80077c4 <__b2d+0x90>)
 8007758:	dc15      	bgt.n	8007786 <__b2d+0x52>
 800775a:	f1c0 0c0b 	rsb	ip, r0, #11
 800775e:	fa22 f30c 	lsr.w	r3, r2, ip
 8007762:	45b8      	cmp	r8, r7
 8007764:	ea43 0501 	orr.w	r5, r3, r1
 8007768:	bf34      	ite	cc
 800776a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800776e:	2300      	movcs	r3, #0
 8007770:	3015      	adds	r0, #21
 8007772:	fa02 f000 	lsl.w	r0, r2, r0
 8007776:	fa23 f30c 	lsr.w	r3, r3, ip
 800777a:	4303      	orrs	r3, r0
 800777c:	461c      	mov	r4, r3
 800777e:	ec45 4b10 	vmov	d0, r4, r5
 8007782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007786:	45b8      	cmp	r8, r7
 8007788:	bf3a      	itte	cc
 800778a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800778e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007792:	2300      	movcs	r3, #0
 8007794:	380b      	subs	r0, #11
 8007796:	d012      	beq.n	80077be <__b2d+0x8a>
 8007798:	f1c0 0120 	rsb	r1, r0, #32
 800779c:	fa23 f401 	lsr.w	r4, r3, r1
 80077a0:	4082      	lsls	r2, r0
 80077a2:	4322      	orrs	r2, r4
 80077a4:	4547      	cmp	r7, r8
 80077a6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80077aa:	bf8c      	ite	hi
 80077ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80077b0:	2200      	movls	r2, #0
 80077b2:	4083      	lsls	r3, r0
 80077b4:	40ca      	lsrs	r2, r1
 80077b6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80077ba:	4313      	orrs	r3, r2
 80077bc:	e7de      	b.n	800777c <__b2d+0x48>
 80077be:	ea42 0501 	orr.w	r5, r2, r1
 80077c2:	e7db      	b.n	800777c <__b2d+0x48>
 80077c4:	3ff00000 	.word	0x3ff00000

080077c8 <__d2b>:
 80077c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077cc:	460f      	mov	r7, r1
 80077ce:	2101      	movs	r1, #1
 80077d0:	ec59 8b10 	vmov	r8, r9, d0
 80077d4:	4616      	mov	r6, r2
 80077d6:	f7ff fc13 	bl	8007000 <_Balloc>
 80077da:	4604      	mov	r4, r0
 80077dc:	b930      	cbnz	r0, 80077ec <__d2b+0x24>
 80077de:	4602      	mov	r2, r0
 80077e0:	4b23      	ldr	r3, [pc, #140]	@ (8007870 <__d2b+0xa8>)
 80077e2:	4824      	ldr	r0, [pc, #144]	@ (8007874 <__d2b+0xac>)
 80077e4:	f240 310f 	movw	r1, #783	@ 0x30f
 80077e8:	f001 fd26 	bl	8009238 <__assert_func>
 80077ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80077f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077f4:	b10d      	cbz	r5, 80077fa <__d2b+0x32>
 80077f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077fa:	9301      	str	r3, [sp, #4]
 80077fc:	f1b8 0300 	subs.w	r3, r8, #0
 8007800:	d023      	beq.n	800784a <__d2b+0x82>
 8007802:	4668      	mov	r0, sp
 8007804:	9300      	str	r3, [sp, #0]
 8007806:	f7ff fd0c 	bl	8007222 <__lo0bits>
 800780a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800780e:	b1d0      	cbz	r0, 8007846 <__d2b+0x7e>
 8007810:	f1c0 0320 	rsb	r3, r0, #32
 8007814:	fa02 f303 	lsl.w	r3, r2, r3
 8007818:	430b      	orrs	r3, r1
 800781a:	40c2      	lsrs	r2, r0
 800781c:	6163      	str	r3, [r4, #20]
 800781e:	9201      	str	r2, [sp, #4]
 8007820:	9b01      	ldr	r3, [sp, #4]
 8007822:	61a3      	str	r3, [r4, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	bf0c      	ite	eq
 8007828:	2201      	moveq	r2, #1
 800782a:	2202      	movne	r2, #2
 800782c:	6122      	str	r2, [r4, #16]
 800782e:	b1a5      	cbz	r5, 800785a <__d2b+0x92>
 8007830:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007834:	4405      	add	r5, r0
 8007836:	603d      	str	r5, [r7, #0]
 8007838:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800783c:	6030      	str	r0, [r6, #0]
 800783e:	4620      	mov	r0, r4
 8007840:	b003      	add	sp, #12
 8007842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007846:	6161      	str	r1, [r4, #20]
 8007848:	e7ea      	b.n	8007820 <__d2b+0x58>
 800784a:	a801      	add	r0, sp, #4
 800784c:	f7ff fce9 	bl	8007222 <__lo0bits>
 8007850:	9b01      	ldr	r3, [sp, #4]
 8007852:	6163      	str	r3, [r4, #20]
 8007854:	3020      	adds	r0, #32
 8007856:	2201      	movs	r2, #1
 8007858:	e7e8      	b.n	800782c <__d2b+0x64>
 800785a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800785e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007862:	6038      	str	r0, [r7, #0]
 8007864:	6918      	ldr	r0, [r3, #16]
 8007866:	f7ff fcbd 	bl	80071e4 <__hi0bits>
 800786a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800786e:	e7e5      	b.n	800783c <__d2b+0x74>
 8007870:	0800a2b3 	.word	0x0800a2b3
 8007874:	0800a2c4 	.word	0x0800a2c4

08007878 <__ratio>:
 8007878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800787c:	b085      	sub	sp, #20
 800787e:	e9cd 1000 	strd	r1, r0, [sp]
 8007882:	a902      	add	r1, sp, #8
 8007884:	f7ff ff56 	bl	8007734 <__b2d>
 8007888:	9800      	ldr	r0, [sp, #0]
 800788a:	a903      	add	r1, sp, #12
 800788c:	ec55 4b10 	vmov	r4, r5, d0
 8007890:	f7ff ff50 	bl	8007734 <__b2d>
 8007894:	9b01      	ldr	r3, [sp, #4]
 8007896:	6919      	ldr	r1, [r3, #16]
 8007898:	9b00      	ldr	r3, [sp, #0]
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	1ac9      	subs	r1, r1, r3
 800789e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80078a2:	1a9b      	subs	r3, r3, r2
 80078a4:	ec5b ab10 	vmov	sl, fp, d0
 80078a8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	bfce      	itee	gt
 80078b0:	462a      	movgt	r2, r5
 80078b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078b6:	465a      	movle	r2, fp
 80078b8:	462f      	mov	r7, r5
 80078ba:	46d9      	mov	r9, fp
 80078bc:	bfcc      	ite	gt
 80078be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078c2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80078c6:	464b      	mov	r3, r9
 80078c8:	4652      	mov	r2, sl
 80078ca:	4620      	mov	r0, r4
 80078cc:	4639      	mov	r1, r7
 80078ce:	f7f8 ffc5 	bl	800085c <__aeabi_ddiv>
 80078d2:	ec41 0b10 	vmov	d0, r0, r1
 80078d6:	b005      	add	sp, #20
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078dc <__copybits>:
 80078dc:	3901      	subs	r1, #1
 80078de:	b570      	push	{r4, r5, r6, lr}
 80078e0:	1149      	asrs	r1, r1, #5
 80078e2:	6914      	ldr	r4, [r2, #16]
 80078e4:	3101      	adds	r1, #1
 80078e6:	f102 0314 	add.w	r3, r2, #20
 80078ea:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078ee:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078f2:	1f05      	subs	r5, r0, #4
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d30c      	bcc.n	8007912 <__copybits+0x36>
 80078f8:	1aa3      	subs	r3, r4, r2
 80078fa:	3b11      	subs	r3, #17
 80078fc:	f023 0303 	bic.w	r3, r3, #3
 8007900:	3211      	adds	r2, #17
 8007902:	42a2      	cmp	r2, r4
 8007904:	bf88      	it	hi
 8007906:	2300      	movhi	r3, #0
 8007908:	4418      	add	r0, r3
 800790a:	2300      	movs	r3, #0
 800790c:	4288      	cmp	r0, r1
 800790e:	d305      	bcc.n	800791c <__copybits+0x40>
 8007910:	bd70      	pop	{r4, r5, r6, pc}
 8007912:	f853 6b04 	ldr.w	r6, [r3], #4
 8007916:	f845 6f04 	str.w	r6, [r5, #4]!
 800791a:	e7eb      	b.n	80078f4 <__copybits+0x18>
 800791c:	f840 3b04 	str.w	r3, [r0], #4
 8007920:	e7f4      	b.n	800790c <__copybits+0x30>

08007922 <__any_on>:
 8007922:	f100 0214 	add.w	r2, r0, #20
 8007926:	6900      	ldr	r0, [r0, #16]
 8007928:	114b      	asrs	r3, r1, #5
 800792a:	4298      	cmp	r0, r3
 800792c:	b510      	push	{r4, lr}
 800792e:	db11      	blt.n	8007954 <__any_on+0x32>
 8007930:	dd0a      	ble.n	8007948 <__any_on+0x26>
 8007932:	f011 011f 	ands.w	r1, r1, #31
 8007936:	d007      	beq.n	8007948 <__any_on+0x26>
 8007938:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800793c:	fa24 f001 	lsr.w	r0, r4, r1
 8007940:	fa00 f101 	lsl.w	r1, r0, r1
 8007944:	428c      	cmp	r4, r1
 8007946:	d10b      	bne.n	8007960 <__any_on+0x3e>
 8007948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800794c:	4293      	cmp	r3, r2
 800794e:	d803      	bhi.n	8007958 <__any_on+0x36>
 8007950:	2000      	movs	r0, #0
 8007952:	bd10      	pop	{r4, pc}
 8007954:	4603      	mov	r3, r0
 8007956:	e7f7      	b.n	8007948 <__any_on+0x26>
 8007958:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800795c:	2900      	cmp	r1, #0
 800795e:	d0f5      	beq.n	800794c <__any_on+0x2a>
 8007960:	2001      	movs	r0, #1
 8007962:	e7f6      	b.n	8007952 <__any_on+0x30>

08007964 <sulp>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4604      	mov	r4, r0
 8007968:	460d      	mov	r5, r1
 800796a:	ec45 4b10 	vmov	d0, r4, r5
 800796e:	4616      	mov	r6, r2
 8007970:	f7ff feba 	bl	80076e8 <__ulp>
 8007974:	ec51 0b10 	vmov	r0, r1, d0
 8007978:	b17e      	cbz	r6, 800799a <sulp+0x36>
 800797a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800797e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007982:	2b00      	cmp	r3, #0
 8007984:	dd09      	ble.n	800799a <sulp+0x36>
 8007986:	051b      	lsls	r3, r3, #20
 8007988:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800798c:	2400      	movs	r4, #0
 800798e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007992:	4622      	mov	r2, r4
 8007994:	462b      	mov	r3, r5
 8007996:	f7f8 fe37 	bl	8000608 <__aeabi_dmul>
 800799a:	ec41 0b10 	vmov	d0, r0, r1
 800799e:	bd70      	pop	{r4, r5, r6, pc}

080079a0 <_strtod_l>:
 80079a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079a4:	b09f      	sub	sp, #124	@ 0x7c
 80079a6:	460c      	mov	r4, r1
 80079a8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80079aa:	2200      	movs	r2, #0
 80079ac:	921a      	str	r2, [sp, #104]	@ 0x68
 80079ae:	9005      	str	r0, [sp, #20]
 80079b0:	f04f 0a00 	mov.w	sl, #0
 80079b4:	f04f 0b00 	mov.w	fp, #0
 80079b8:	460a      	mov	r2, r1
 80079ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80079bc:	7811      	ldrb	r1, [r2, #0]
 80079be:	292b      	cmp	r1, #43	@ 0x2b
 80079c0:	d04a      	beq.n	8007a58 <_strtod_l+0xb8>
 80079c2:	d838      	bhi.n	8007a36 <_strtod_l+0x96>
 80079c4:	290d      	cmp	r1, #13
 80079c6:	d832      	bhi.n	8007a2e <_strtod_l+0x8e>
 80079c8:	2908      	cmp	r1, #8
 80079ca:	d832      	bhi.n	8007a32 <_strtod_l+0x92>
 80079cc:	2900      	cmp	r1, #0
 80079ce:	d03b      	beq.n	8007a48 <_strtod_l+0xa8>
 80079d0:	2200      	movs	r2, #0
 80079d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80079d4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80079d6:	782a      	ldrb	r2, [r5, #0]
 80079d8:	2a30      	cmp	r2, #48	@ 0x30
 80079da:	f040 80b3 	bne.w	8007b44 <_strtod_l+0x1a4>
 80079de:	786a      	ldrb	r2, [r5, #1]
 80079e0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079e4:	2a58      	cmp	r2, #88	@ 0x58
 80079e6:	d16e      	bne.n	8007ac6 <_strtod_l+0x126>
 80079e8:	9302      	str	r3, [sp, #8]
 80079ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	ab1a      	add	r3, sp, #104	@ 0x68
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	4a8e      	ldr	r2, [pc, #568]	@ (8007c2c <_strtod_l+0x28c>)
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80079f8:	a919      	add	r1, sp, #100	@ 0x64
 80079fa:	f001 fcb7 	bl	800936c <__gethex>
 80079fe:	f010 060f 	ands.w	r6, r0, #15
 8007a02:	4604      	mov	r4, r0
 8007a04:	d005      	beq.n	8007a12 <_strtod_l+0x72>
 8007a06:	2e06      	cmp	r6, #6
 8007a08:	d128      	bne.n	8007a5c <_strtod_l+0xbc>
 8007a0a:	3501      	adds	r5, #1
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f040 858e 	bne.w	8008536 <_strtod_l+0xb96>
 8007a1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a1c:	b1cb      	cbz	r3, 8007a52 <_strtod_l+0xb2>
 8007a1e:	4652      	mov	r2, sl
 8007a20:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007a24:	ec43 2b10 	vmov	d0, r2, r3
 8007a28:	b01f      	add	sp, #124	@ 0x7c
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	2920      	cmp	r1, #32
 8007a30:	d1ce      	bne.n	80079d0 <_strtod_l+0x30>
 8007a32:	3201      	adds	r2, #1
 8007a34:	e7c1      	b.n	80079ba <_strtod_l+0x1a>
 8007a36:	292d      	cmp	r1, #45	@ 0x2d
 8007a38:	d1ca      	bne.n	80079d0 <_strtod_l+0x30>
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007a3e:	1c51      	adds	r1, r2, #1
 8007a40:	9119      	str	r1, [sp, #100]	@ 0x64
 8007a42:	7852      	ldrb	r2, [r2, #1]
 8007a44:	2a00      	cmp	r2, #0
 8007a46:	d1c5      	bne.n	80079d4 <_strtod_l+0x34>
 8007a48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007a4a:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f040 8570 	bne.w	8008532 <_strtod_l+0xb92>
 8007a52:	4652      	mov	r2, sl
 8007a54:	465b      	mov	r3, fp
 8007a56:	e7e5      	b.n	8007a24 <_strtod_l+0x84>
 8007a58:	2100      	movs	r1, #0
 8007a5a:	e7ef      	b.n	8007a3c <_strtod_l+0x9c>
 8007a5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a5e:	b13a      	cbz	r2, 8007a70 <_strtod_l+0xd0>
 8007a60:	2135      	movs	r1, #53	@ 0x35
 8007a62:	a81c      	add	r0, sp, #112	@ 0x70
 8007a64:	f7ff ff3a 	bl	80078dc <__copybits>
 8007a68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a6a:	9805      	ldr	r0, [sp, #20]
 8007a6c:	f7ff fb08 	bl	8007080 <_Bfree>
 8007a70:	3e01      	subs	r6, #1
 8007a72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007a74:	2e04      	cmp	r6, #4
 8007a76:	d806      	bhi.n	8007a86 <_strtod_l+0xe6>
 8007a78:	e8df f006 	tbb	[pc, r6]
 8007a7c:	201d0314 	.word	0x201d0314
 8007a80:	14          	.byte	0x14
 8007a81:	00          	.byte	0x00
 8007a82:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007a86:	05e1      	lsls	r1, r4, #23
 8007a88:	bf48      	it	mi
 8007a8a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007a8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007a92:	0d1b      	lsrs	r3, r3, #20
 8007a94:	051b      	lsls	r3, r3, #20
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1bb      	bne.n	8007a12 <_strtod_l+0x72>
 8007a9a:	f7fe fb2f 	bl	80060fc <__errno>
 8007a9e:	2322      	movs	r3, #34	@ 0x22
 8007aa0:	6003      	str	r3, [r0, #0]
 8007aa2:	e7b6      	b.n	8007a12 <_strtod_l+0x72>
 8007aa4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007aa8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007aac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007ab0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007ab4:	e7e7      	b.n	8007a86 <_strtod_l+0xe6>
 8007ab6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007c34 <_strtod_l+0x294>
 8007aba:	e7e4      	b.n	8007a86 <_strtod_l+0xe6>
 8007abc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007ac0:	f04f 3aff 	mov.w	sl, #4294967295
 8007ac4:	e7df      	b.n	8007a86 <_strtod_l+0xe6>
 8007ac6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ac8:	1c5a      	adds	r2, r3, #1
 8007aca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007acc:	785b      	ldrb	r3, [r3, #1]
 8007ace:	2b30      	cmp	r3, #48	@ 0x30
 8007ad0:	d0f9      	beq.n	8007ac6 <_strtod_l+0x126>
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d09d      	beq.n	8007a12 <_strtod_l+0x72>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ada:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007adc:	930c      	str	r3, [sp, #48]	@ 0x30
 8007ade:	2300      	movs	r3, #0
 8007ae0:	9308      	str	r3, [sp, #32]
 8007ae2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ae4:	461f      	mov	r7, r3
 8007ae6:	220a      	movs	r2, #10
 8007ae8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007aea:	7805      	ldrb	r5, [r0, #0]
 8007aec:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007af0:	b2d9      	uxtb	r1, r3
 8007af2:	2909      	cmp	r1, #9
 8007af4:	d928      	bls.n	8007b48 <_strtod_l+0x1a8>
 8007af6:	494e      	ldr	r1, [pc, #312]	@ (8007c30 <_strtod_l+0x290>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	f001 fb62 	bl	80091c2 <strncmp>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d032      	beq.n	8007b68 <_strtod_l+0x1c8>
 8007b02:	2000      	movs	r0, #0
 8007b04:	462a      	mov	r2, r5
 8007b06:	4681      	mov	r9, r0
 8007b08:	463d      	mov	r5, r7
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2a65      	cmp	r2, #101	@ 0x65
 8007b0e:	d001      	beq.n	8007b14 <_strtod_l+0x174>
 8007b10:	2a45      	cmp	r2, #69	@ 0x45
 8007b12:	d114      	bne.n	8007b3e <_strtod_l+0x19e>
 8007b14:	b91d      	cbnz	r5, 8007b1e <_strtod_l+0x17e>
 8007b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b18:	4302      	orrs	r2, r0
 8007b1a:	d095      	beq.n	8007a48 <_strtod_l+0xa8>
 8007b1c:	2500      	movs	r5, #0
 8007b1e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007b20:	1c62      	adds	r2, r4, #1
 8007b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b24:	7862      	ldrb	r2, [r4, #1]
 8007b26:	2a2b      	cmp	r2, #43	@ 0x2b
 8007b28:	d077      	beq.n	8007c1a <_strtod_l+0x27a>
 8007b2a:	2a2d      	cmp	r2, #45	@ 0x2d
 8007b2c:	d07b      	beq.n	8007c26 <_strtod_l+0x286>
 8007b2e:	f04f 0c00 	mov.w	ip, #0
 8007b32:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007b36:	2909      	cmp	r1, #9
 8007b38:	f240 8082 	bls.w	8007c40 <_strtod_l+0x2a0>
 8007b3c:	9419      	str	r4, [sp, #100]	@ 0x64
 8007b3e:	f04f 0800 	mov.w	r8, #0
 8007b42:	e0a2      	b.n	8007c8a <_strtod_l+0x2ea>
 8007b44:	2300      	movs	r3, #0
 8007b46:	e7c7      	b.n	8007ad8 <_strtod_l+0x138>
 8007b48:	2f08      	cmp	r7, #8
 8007b4a:	bfd5      	itete	le
 8007b4c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007b4e:	9908      	ldrgt	r1, [sp, #32]
 8007b50:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b54:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007b58:	f100 0001 	add.w	r0, r0, #1
 8007b5c:	bfd4      	ite	le
 8007b5e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007b60:	9308      	strgt	r3, [sp, #32]
 8007b62:	3701      	adds	r7, #1
 8007b64:	9019      	str	r0, [sp, #100]	@ 0x64
 8007b66:	e7bf      	b.n	8007ae8 <_strtod_l+0x148>
 8007b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b6e:	785a      	ldrb	r2, [r3, #1]
 8007b70:	b37f      	cbz	r7, 8007bd2 <_strtod_l+0x232>
 8007b72:	4681      	mov	r9, r0
 8007b74:	463d      	mov	r5, r7
 8007b76:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007b7a:	2b09      	cmp	r3, #9
 8007b7c:	d912      	bls.n	8007ba4 <_strtod_l+0x204>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e7c4      	b.n	8007b0c <_strtod_l+0x16c>
 8007b82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b84:	1c5a      	adds	r2, r3, #1
 8007b86:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b88:	785a      	ldrb	r2, [r3, #1]
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	2a30      	cmp	r2, #48	@ 0x30
 8007b8e:	d0f8      	beq.n	8007b82 <_strtod_l+0x1e2>
 8007b90:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	f200 84d3 	bhi.w	8008540 <_strtod_l+0xba0>
 8007b9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007b9e:	4681      	mov	r9, r0
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	3a30      	subs	r2, #48	@ 0x30
 8007ba6:	f100 0301 	add.w	r3, r0, #1
 8007baa:	d02a      	beq.n	8007c02 <_strtod_l+0x262>
 8007bac:	4499      	add	r9, r3
 8007bae:	eb00 0c05 	add.w	ip, r0, r5
 8007bb2:	462b      	mov	r3, r5
 8007bb4:	210a      	movs	r1, #10
 8007bb6:	4563      	cmp	r3, ip
 8007bb8:	d10d      	bne.n	8007bd6 <_strtod_l+0x236>
 8007bba:	1c69      	adds	r1, r5, #1
 8007bbc:	4401      	add	r1, r0
 8007bbe:	4428      	add	r0, r5
 8007bc0:	2808      	cmp	r0, #8
 8007bc2:	dc16      	bgt.n	8007bf2 <_strtod_l+0x252>
 8007bc4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007bc6:	230a      	movs	r3, #10
 8007bc8:	fb03 2300 	mla	r3, r3, r0, r2
 8007bcc:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e018      	b.n	8007c04 <_strtod_l+0x264>
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	e7da      	b.n	8007b8c <_strtod_l+0x1ec>
 8007bd6:	2b08      	cmp	r3, #8
 8007bd8:	f103 0301 	add.w	r3, r3, #1
 8007bdc:	dc03      	bgt.n	8007be6 <_strtod_l+0x246>
 8007bde:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007be0:	434e      	muls	r6, r1
 8007be2:	960a      	str	r6, [sp, #40]	@ 0x28
 8007be4:	e7e7      	b.n	8007bb6 <_strtod_l+0x216>
 8007be6:	2b10      	cmp	r3, #16
 8007be8:	bfde      	ittt	le
 8007bea:	9e08      	ldrle	r6, [sp, #32]
 8007bec:	434e      	mulle	r6, r1
 8007bee:	9608      	strle	r6, [sp, #32]
 8007bf0:	e7e1      	b.n	8007bb6 <_strtod_l+0x216>
 8007bf2:	280f      	cmp	r0, #15
 8007bf4:	dceb      	bgt.n	8007bce <_strtod_l+0x22e>
 8007bf6:	9808      	ldr	r0, [sp, #32]
 8007bf8:	230a      	movs	r3, #10
 8007bfa:	fb03 2300 	mla	r3, r3, r0, r2
 8007bfe:	9308      	str	r3, [sp, #32]
 8007c00:	e7e5      	b.n	8007bce <_strtod_l+0x22e>
 8007c02:	4629      	mov	r1, r5
 8007c04:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c06:	1c50      	adds	r0, r2, #1
 8007c08:	9019      	str	r0, [sp, #100]	@ 0x64
 8007c0a:	7852      	ldrb	r2, [r2, #1]
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	460d      	mov	r5, r1
 8007c10:	e7b1      	b.n	8007b76 <_strtod_l+0x1d6>
 8007c12:	f04f 0900 	mov.w	r9, #0
 8007c16:	2301      	movs	r3, #1
 8007c18:	e77d      	b.n	8007b16 <_strtod_l+0x176>
 8007c1a:	f04f 0c00 	mov.w	ip, #0
 8007c1e:	1ca2      	adds	r2, r4, #2
 8007c20:	9219      	str	r2, [sp, #100]	@ 0x64
 8007c22:	78a2      	ldrb	r2, [r4, #2]
 8007c24:	e785      	b.n	8007b32 <_strtod_l+0x192>
 8007c26:	f04f 0c01 	mov.w	ip, #1
 8007c2a:	e7f8      	b.n	8007c1e <_strtod_l+0x27e>
 8007c2c:	0800a438 	.word	0x0800a438
 8007c30:	0800a420 	.word	0x0800a420
 8007c34:	7ff00000 	.word	0x7ff00000
 8007c38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c3a:	1c51      	adds	r1, r2, #1
 8007c3c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007c3e:	7852      	ldrb	r2, [r2, #1]
 8007c40:	2a30      	cmp	r2, #48	@ 0x30
 8007c42:	d0f9      	beq.n	8007c38 <_strtod_l+0x298>
 8007c44:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007c48:	2908      	cmp	r1, #8
 8007c4a:	f63f af78 	bhi.w	8007b3e <_strtod_l+0x19e>
 8007c4e:	3a30      	subs	r2, #48	@ 0x30
 8007c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8007c52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c54:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007c56:	f04f 080a 	mov.w	r8, #10
 8007c5a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007c5c:	1c56      	adds	r6, r2, #1
 8007c5e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007c60:	7852      	ldrb	r2, [r2, #1]
 8007c62:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007c66:	f1be 0f09 	cmp.w	lr, #9
 8007c6a:	d939      	bls.n	8007ce0 <_strtod_l+0x340>
 8007c6c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007c6e:	1a76      	subs	r6, r6, r1
 8007c70:	2e08      	cmp	r6, #8
 8007c72:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007c76:	dc03      	bgt.n	8007c80 <_strtod_l+0x2e0>
 8007c78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007c7a:	4588      	cmp	r8, r1
 8007c7c:	bfa8      	it	ge
 8007c7e:	4688      	movge	r8, r1
 8007c80:	f1bc 0f00 	cmp.w	ip, #0
 8007c84:	d001      	beq.n	8007c8a <_strtod_l+0x2ea>
 8007c86:	f1c8 0800 	rsb	r8, r8, #0
 8007c8a:	2d00      	cmp	r5, #0
 8007c8c:	d14e      	bne.n	8007d2c <_strtod_l+0x38c>
 8007c8e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c90:	4308      	orrs	r0, r1
 8007c92:	f47f aebe 	bne.w	8007a12 <_strtod_l+0x72>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	f47f aed6 	bne.w	8007a48 <_strtod_l+0xa8>
 8007c9c:	2a69      	cmp	r2, #105	@ 0x69
 8007c9e:	d028      	beq.n	8007cf2 <_strtod_l+0x352>
 8007ca0:	dc25      	bgt.n	8007cee <_strtod_l+0x34e>
 8007ca2:	2a49      	cmp	r2, #73	@ 0x49
 8007ca4:	d025      	beq.n	8007cf2 <_strtod_l+0x352>
 8007ca6:	2a4e      	cmp	r2, #78	@ 0x4e
 8007ca8:	f47f aece 	bne.w	8007a48 <_strtod_l+0xa8>
 8007cac:	499b      	ldr	r1, [pc, #620]	@ (8007f1c <_strtod_l+0x57c>)
 8007cae:	a819      	add	r0, sp, #100	@ 0x64
 8007cb0:	f001 fd7e 	bl	80097b0 <__match>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f43f aec7 	beq.w	8007a48 <_strtod_l+0xa8>
 8007cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b28      	cmp	r3, #40	@ 0x28
 8007cc0:	d12e      	bne.n	8007d20 <_strtod_l+0x380>
 8007cc2:	4997      	ldr	r1, [pc, #604]	@ (8007f20 <_strtod_l+0x580>)
 8007cc4:	aa1c      	add	r2, sp, #112	@ 0x70
 8007cc6:	a819      	add	r0, sp, #100	@ 0x64
 8007cc8:	f001 fd86 	bl	80097d8 <__hexnan>
 8007ccc:	2805      	cmp	r0, #5
 8007cce:	d127      	bne.n	8007d20 <_strtod_l+0x380>
 8007cd0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007cd2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007cd6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007cda:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007cde:	e698      	b.n	8007a12 <_strtod_l+0x72>
 8007ce0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007ce2:	fb08 2101 	mla	r1, r8, r1, r2
 8007ce6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007cea:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cec:	e7b5      	b.n	8007c5a <_strtod_l+0x2ba>
 8007cee:	2a6e      	cmp	r2, #110	@ 0x6e
 8007cf0:	e7da      	b.n	8007ca8 <_strtod_l+0x308>
 8007cf2:	498c      	ldr	r1, [pc, #560]	@ (8007f24 <_strtod_l+0x584>)
 8007cf4:	a819      	add	r0, sp, #100	@ 0x64
 8007cf6:	f001 fd5b 	bl	80097b0 <__match>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f43f aea4 	beq.w	8007a48 <_strtod_l+0xa8>
 8007d00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d02:	4989      	ldr	r1, [pc, #548]	@ (8007f28 <_strtod_l+0x588>)
 8007d04:	3b01      	subs	r3, #1
 8007d06:	a819      	add	r0, sp, #100	@ 0x64
 8007d08:	9319      	str	r3, [sp, #100]	@ 0x64
 8007d0a:	f001 fd51 	bl	80097b0 <__match>
 8007d0e:	b910      	cbnz	r0, 8007d16 <_strtod_l+0x376>
 8007d10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007d12:	3301      	adds	r3, #1
 8007d14:	9319      	str	r3, [sp, #100]	@ 0x64
 8007d16:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007f38 <_strtod_l+0x598>
 8007d1a:	f04f 0a00 	mov.w	sl, #0
 8007d1e:	e678      	b.n	8007a12 <_strtod_l+0x72>
 8007d20:	4882      	ldr	r0, [pc, #520]	@ (8007f2c <_strtod_l+0x58c>)
 8007d22:	f001 fa81 	bl	8009228 <nan>
 8007d26:	ec5b ab10 	vmov	sl, fp, d0
 8007d2a:	e672      	b.n	8007a12 <_strtod_l+0x72>
 8007d2c:	eba8 0309 	sub.w	r3, r8, r9
 8007d30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	bf08      	it	eq
 8007d38:	462f      	moveq	r7, r5
 8007d3a:	2d10      	cmp	r5, #16
 8007d3c:	462c      	mov	r4, r5
 8007d3e:	bfa8      	it	ge
 8007d40:	2410      	movge	r4, #16
 8007d42:	f7f8 fbe7 	bl	8000514 <__aeabi_ui2d>
 8007d46:	2d09      	cmp	r5, #9
 8007d48:	4682      	mov	sl, r0
 8007d4a:	468b      	mov	fp, r1
 8007d4c:	dc13      	bgt.n	8007d76 <_strtod_l+0x3d6>
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f43f ae5e 	beq.w	8007a12 <_strtod_l+0x72>
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	dd78      	ble.n	8007e4c <_strtod_l+0x4ac>
 8007d5a:	2b16      	cmp	r3, #22
 8007d5c:	dc5f      	bgt.n	8007e1e <_strtod_l+0x47e>
 8007d5e:	4974      	ldr	r1, [pc, #464]	@ (8007f30 <_strtod_l+0x590>)
 8007d60:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007d64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d68:	4652      	mov	r2, sl
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	f7f8 fc4c 	bl	8000608 <__aeabi_dmul>
 8007d70:	4682      	mov	sl, r0
 8007d72:	468b      	mov	fp, r1
 8007d74:	e64d      	b.n	8007a12 <_strtod_l+0x72>
 8007d76:	4b6e      	ldr	r3, [pc, #440]	@ (8007f30 <_strtod_l+0x590>)
 8007d78:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d7c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007d80:	f7f8 fc42 	bl	8000608 <__aeabi_dmul>
 8007d84:	4682      	mov	sl, r0
 8007d86:	9808      	ldr	r0, [sp, #32]
 8007d88:	468b      	mov	fp, r1
 8007d8a:	f7f8 fbc3 	bl	8000514 <__aeabi_ui2d>
 8007d8e:	4602      	mov	r2, r0
 8007d90:	460b      	mov	r3, r1
 8007d92:	4650      	mov	r0, sl
 8007d94:	4659      	mov	r1, fp
 8007d96:	f7f8 fa81 	bl	800029c <__adddf3>
 8007d9a:	2d0f      	cmp	r5, #15
 8007d9c:	4682      	mov	sl, r0
 8007d9e:	468b      	mov	fp, r1
 8007da0:	ddd5      	ble.n	8007d4e <_strtod_l+0x3ae>
 8007da2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007da4:	1b2c      	subs	r4, r5, r4
 8007da6:	441c      	add	r4, r3
 8007da8:	2c00      	cmp	r4, #0
 8007daa:	f340 8096 	ble.w	8007eda <_strtod_l+0x53a>
 8007dae:	f014 030f 	ands.w	r3, r4, #15
 8007db2:	d00a      	beq.n	8007dca <_strtod_l+0x42a>
 8007db4:	495e      	ldr	r1, [pc, #376]	@ (8007f30 <_strtod_l+0x590>)
 8007db6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007dba:	4652      	mov	r2, sl
 8007dbc:	465b      	mov	r3, fp
 8007dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dc2:	f7f8 fc21 	bl	8000608 <__aeabi_dmul>
 8007dc6:	4682      	mov	sl, r0
 8007dc8:	468b      	mov	fp, r1
 8007dca:	f034 040f 	bics.w	r4, r4, #15
 8007dce:	d073      	beq.n	8007eb8 <_strtod_l+0x518>
 8007dd0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007dd4:	dd48      	ble.n	8007e68 <_strtod_l+0x4c8>
 8007dd6:	2400      	movs	r4, #0
 8007dd8:	46a0      	mov	r8, r4
 8007dda:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ddc:	46a1      	mov	r9, r4
 8007dde:	9a05      	ldr	r2, [sp, #20]
 8007de0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007f38 <_strtod_l+0x598>
 8007de4:	2322      	movs	r3, #34	@ 0x22
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	f04f 0a00 	mov.w	sl, #0
 8007dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f43f ae0f 	beq.w	8007a12 <_strtod_l+0x72>
 8007df4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007df6:	9805      	ldr	r0, [sp, #20]
 8007df8:	f7ff f942 	bl	8007080 <_Bfree>
 8007dfc:	9805      	ldr	r0, [sp, #20]
 8007dfe:	4649      	mov	r1, r9
 8007e00:	f7ff f93e 	bl	8007080 <_Bfree>
 8007e04:	9805      	ldr	r0, [sp, #20]
 8007e06:	4641      	mov	r1, r8
 8007e08:	f7ff f93a 	bl	8007080 <_Bfree>
 8007e0c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e0e:	9805      	ldr	r0, [sp, #20]
 8007e10:	f7ff f936 	bl	8007080 <_Bfree>
 8007e14:	9805      	ldr	r0, [sp, #20]
 8007e16:	4621      	mov	r1, r4
 8007e18:	f7ff f932 	bl	8007080 <_Bfree>
 8007e1c:	e5f9      	b.n	8007a12 <_strtod_l+0x72>
 8007e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e20:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007e24:	4293      	cmp	r3, r2
 8007e26:	dbbc      	blt.n	8007da2 <_strtod_l+0x402>
 8007e28:	4c41      	ldr	r4, [pc, #260]	@ (8007f30 <_strtod_l+0x590>)
 8007e2a:	f1c5 050f 	rsb	r5, r5, #15
 8007e2e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e3a:	f7f8 fbe5 	bl	8000608 <__aeabi_dmul>
 8007e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e40:	1b5d      	subs	r5, r3, r5
 8007e42:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007e46:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e4a:	e78f      	b.n	8007d6c <_strtod_l+0x3cc>
 8007e4c:	3316      	adds	r3, #22
 8007e4e:	dba8      	blt.n	8007da2 <_strtod_l+0x402>
 8007e50:	4b37      	ldr	r3, [pc, #220]	@ (8007f30 <_strtod_l+0x590>)
 8007e52:	eba9 0808 	sub.w	r8, r9, r8
 8007e56:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007e5a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	f7f8 fcfb 	bl	800085c <__aeabi_ddiv>
 8007e66:	e783      	b.n	8007d70 <_strtod_l+0x3d0>
 8007e68:	4b32      	ldr	r3, [pc, #200]	@ (8007f34 <_strtod_l+0x594>)
 8007e6a:	9308      	str	r3, [sp, #32]
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	1124      	asrs	r4, r4, #4
 8007e70:	4650      	mov	r0, sl
 8007e72:	4659      	mov	r1, fp
 8007e74:	461e      	mov	r6, r3
 8007e76:	2c01      	cmp	r4, #1
 8007e78:	dc21      	bgt.n	8007ebe <_strtod_l+0x51e>
 8007e7a:	b10b      	cbz	r3, 8007e80 <_strtod_l+0x4e0>
 8007e7c:	4682      	mov	sl, r0
 8007e7e:	468b      	mov	fp, r1
 8007e80:	492c      	ldr	r1, [pc, #176]	@ (8007f34 <_strtod_l+0x594>)
 8007e82:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007e86:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007e8a:	4652      	mov	r2, sl
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e92:	f7f8 fbb9 	bl	8000608 <__aeabi_dmul>
 8007e96:	4b28      	ldr	r3, [pc, #160]	@ (8007f38 <_strtod_l+0x598>)
 8007e98:	460a      	mov	r2, r1
 8007e9a:	400b      	ands	r3, r1
 8007e9c:	4927      	ldr	r1, [pc, #156]	@ (8007f3c <_strtod_l+0x59c>)
 8007e9e:	428b      	cmp	r3, r1
 8007ea0:	4682      	mov	sl, r0
 8007ea2:	d898      	bhi.n	8007dd6 <_strtod_l+0x436>
 8007ea4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007ea8:	428b      	cmp	r3, r1
 8007eaa:	bf86      	itte	hi
 8007eac:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007f40 <_strtod_l+0x5a0>
 8007eb0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007eb4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9308      	str	r3, [sp, #32]
 8007ebc:	e07a      	b.n	8007fb4 <_strtod_l+0x614>
 8007ebe:	07e2      	lsls	r2, r4, #31
 8007ec0:	d505      	bpl.n	8007ece <_strtod_l+0x52e>
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 fb9e 	bl	8000608 <__aeabi_dmul>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	9a08      	ldr	r2, [sp, #32]
 8007ed0:	3208      	adds	r2, #8
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	1064      	asrs	r4, r4, #1
 8007ed6:	9208      	str	r2, [sp, #32]
 8007ed8:	e7cd      	b.n	8007e76 <_strtod_l+0x4d6>
 8007eda:	d0ed      	beq.n	8007eb8 <_strtod_l+0x518>
 8007edc:	4264      	negs	r4, r4
 8007ede:	f014 020f 	ands.w	r2, r4, #15
 8007ee2:	d00a      	beq.n	8007efa <_strtod_l+0x55a>
 8007ee4:	4b12      	ldr	r3, [pc, #72]	@ (8007f30 <_strtod_l+0x590>)
 8007ee6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007eea:	4650      	mov	r0, sl
 8007eec:	4659      	mov	r1, fp
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	f7f8 fcb3 	bl	800085c <__aeabi_ddiv>
 8007ef6:	4682      	mov	sl, r0
 8007ef8:	468b      	mov	fp, r1
 8007efa:	1124      	asrs	r4, r4, #4
 8007efc:	d0dc      	beq.n	8007eb8 <_strtod_l+0x518>
 8007efe:	2c1f      	cmp	r4, #31
 8007f00:	dd20      	ble.n	8007f44 <_strtod_l+0x5a4>
 8007f02:	2400      	movs	r4, #0
 8007f04:	46a0      	mov	r8, r4
 8007f06:	940a      	str	r4, [sp, #40]	@ 0x28
 8007f08:	46a1      	mov	r9, r4
 8007f0a:	9a05      	ldr	r2, [sp, #20]
 8007f0c:	2322      	movs	r3, #34	@ 0x22
 8007f0e:	f04f 0a00 	mov.w	sl, #0
 8007f12:	f04f 0b00 	mov.w	fp, #0
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	e768      	b.n	8007dec <_strtod_l+0x44c>
 8007f1a:	bf00      	nop
 8007f1c:	0800a20d 	.word	0x0800a20d
 8007f20:	0800a424 	.word	0x0800a424
 8007f24:	0800a205 	.word	0x0800a205
 8007f28:	0800a23a 	.word	0x0800a23a
 8007f2c:	0800a5e8 	.word	0x0800a5e8
 8007f30:	0800a358 	.word	0x0800a358
 8007f34:	0800a330 	.word	0x0800a330
 8007f38:	7ff00000 	.word	0x7ff00000
 8007f3c:	7ca00000 	.word	0x7ca00000
 8007f40:	7fefffff 	.word	0x7fefffff
 8007f44:	f014 0310 	ands.w	r3, r4, #16
 8007f48:	bf18      	it	ne
 8007f4a:	236a      	movne	r3, #106	@ 0x6a
 8007f4c:	4ea9      	ldr	r6, [pc, #676]	@ (80081f4 <_strtod_l+0x854>)
 8007f4e:	9308      	str	r3, [sp, #32]
 8007f50:	4650      	mov	r0, sl
 8007f52:	4659      	mov	r1, fp
 8007f54:	2300      	movs	r3, #0
 8007f56:	07e2      	lsls	r2, r4, #31
 8007f58:	d504      	bpl.n	8007f64 <_strtod_l+0x5c4>
 8007f5a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f5e:	f7f8 fb53 	bl	8000608 <__aeabi_dmul>
 8007f62:	2301      	movs	r3, #1
 8007f64:	1064      	asrs	r4, r4, #1
 8007f66:	f106 0608 	add.w	r6, r6, #8
 8007f6a:	d1f4      	bne.n	8007f56 <_strtod_l+0x5b6>
 8007f6c:	b10b      	cbz	r3, 8007f72 <_strtod_l+0x5d2>
 8007f6e:	4682      	mov	sl, r0
 8007f70:	468b      	mov	fp, r1
 8007f72:	9b08      	ldr	r3, [sp, #32]
 8007f74:	b1b3      	cbz	r3, 8007fa4 <_strtod_l+0x604>
 8007f76:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007f7a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	4659      	mov	r1, fp
 8007f82:	dd0f      	ble.n	8007fa4 <_strtod_l+0x604>
 8007f84:	2b1f      	cmp	r3, #31
 8007f86:	dd55      	ble.n	8008034 <_strtod_l+0x694>
 8007f88:	2b34      	cmp	r3, #52	@ 0x34
 8007f8a:	bfde      	ittt	le
 8007f8c:	f04f 33ff 	movle.w	r3, #4294967295
 8007f90:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007f94:	4093      	lslle	r3, r2
 8007f96:	f04f 0a00 	mov.w	sl, #0
 8007f9a:	bfcc      	ite	gt
 8007f9c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007fa0:	ea03 0b01 	andle.w	fp, r3, r1
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4659      	mov	r1, fp
 8007fac:	f7f8 fd94 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d1a6      	bne.n	8007f02 <_strtod_l+0x562>
 8007fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007fba:	9805      	ldr	r0, [sp, #20]
 8007fbc:	462b      	mov	r3, r5
 8007fbe:	463a      	mov	r2, r7
 8007fc0:	f7ff f8c6 	bl	8007150 <__s2b>
 8007fc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	f43f af05 	beq.w	8007dd6 <_strtod_l+0x436>
 8007fcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	eba9 0308 	sub.w	r3, r9, r8
 8007fd4:	bfa8      	it	ge
 8007fd6:	2300      	movge	r3, #0
 8007fd8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007fda:	2400      	movs	r4, #0
 8007fdc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007fe0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007fe2:	46a0      	mov	r8, r4
 8007fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fe6:	9805      	ldr	r0, [sp, #20]
 8007fe8:	6859      	ldr	r1, [r3, #4]
 8007fea:	f7ff f809 	bl	8007000 <_Balloc>
 8007fee:	4681      	mov	r9, r0
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	f43f aef4 	beq.w	8007dde <_strtod_l+0x43e>
 8007ff6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ff8:	691a      	ldr	r2, [r3, #16]
 8007ffa:	3202      	adds	r2, #2
 8007ffc:	f103 010c 	add.w	r1, r3, #12
 8008000:	0092      	lsls	r2, r2, #2
 8008002:	300c      	adds	r0, #12
 8008004:	f001 f900 	bl	8009208 <memcpy>
 8008008:	ec4b ab10 	vmov	d0, sl, fp
 800800c:	9805      	ldr	r0, [sp, #20]
 800800e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008010:	a91b      	add	r1, sp, #108	@ 0x6c
 8008012:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008016:	f7ff fbd7 	bl	80077c8 <__d2b>
 800801a:	901a      	str	r0, [sp, #104]	@ 0x68
 800801c:	2800      	cmp	r0, #0
 800801e:	f43f aede 	beq.w	8007dde <_strtod_l+0x43e>
 8008022:	9805      	ldr	r0, [sp, #20]
 8008024:	2101      	movs	r1, #1
 8008026:	f7ff f929 	bl	800727c <__i2b>
 800802a:	4680      	mov	r8, r0
 800802c:	b948      	cbnz	r0, 8008042 <_strtod_l+0x6a2>
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	e6d4      	b.n	8007dde <_strtod_l+0x43e>
 8008034:	f04f 32ff 	mov.w	r2, #4294967295
 8008038:	fa02 f303 	lsl.w	r3, r2, r3
 800803c:	ea03 0a0a 	and.w	sl, r3, sl
 8008040:	e7b0      	b.n	8007fa4 <_strtod_l+0x604>
 8008042:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008044:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008046:	2d00      	cmp	r5, #0
 8008048:	bfab      	itete	ge
 800804a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800804c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800804e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008050:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008052:	bfac      	ite	ge
 8008054:	18ef      	addge	r7, r5, r3
 8008056:	1b5e      	sublt	r6, r3, r5
 8008058:	9b08      	ldr	r3, [sp, #32]
 800805a:	1aed      	subs	r5, r5, r3
 800805c:	4415      	add	r5, r2
 800805e:	4b66      	ldr	r3, [pc, #408]	@ (80081f8 <_strtod_l+0x858>)
 8008060:	3d01      	subs	r5, #1
 8008062:	429d      	cmp	r5, r3
 8008064:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008068:	da50      	bge.n	800810c <_strtod_l+0x76c>
 800806a:	1b5b      	subs	r3, r3, r5
 800806c:	2b1f      	cmp	r3, #31
 800806e:	eba2 0203 	sub.w	r2, r2, r3
 8008072:	f04f 0101 	mov.w	r1, #1
 8008076:	dc3d      	bgt.n	80080f4 <_strtod_l+0x754>
 8008078:	fa01 f303 	lsl.w	r3, r1, r3
 800807c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800807e:	2300      	movs	r3, #0
 8008080:	9310      	str	r3, [sp, #64]	@ 0x40
 8008082:	18bd      	adds	r5, r7, r2
 8008084:	9b08      	ldr	r3, [sp, #32]
 8008086:	42af      	cmp	r7, r5
 8008088:	4416      	add	r6, r2
 800808a:	441e      	add	r6, r3
 800808c:	463b      	mov	r3, r7
 800808e:	bfa8      	it	ge
 8008090:	462b      	movge	r3, r5
 8008092:	42b3      	cmp	r3, r6
 8008094:	bfa8      	it	ge
 8008096:	4633      	movge	r3, r6
 8008098:	2b00      	cmp	r3, #0
 800809a:	bfc2      	ittt	gt
 800809c:	1aed      	subgt	r5, r5, r3
 800809e:	1af6      	subgt	r6, r6, r3
 80080a0:	1aff      	subgt	r7, r7, r3
 80080a2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	dd16      	ble.n	80080d6 <_strtod_l+0x736>
 80080a8:	4641      	mov	r1, r8
 80080aa:	9805      	ldr	r0, [sp, #20]
 80080ac:	461a      	mov	r2, r3
 80080ae:	f7ff f9a5 	bl	80073fc <__pow5mult>
 80080b2:	4680      	mov	r8, r0
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d0ba      	beq.n	800802e <_strtod_l+0x68e>
 80080b8:	4601      	mov	r1, r0
 80080ba:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80080bc:	9805      	ldr	r0, [sp, #20]
 80080be:	f7ff f8f3 	bl	80072a8 <__multiply>
 80080c2:	900e      	str	r0, [sp, #56]	@ 0x38
 80080c4:	2800      	cmp	r0, #0
 80080c6:	f43f ae8a 	beq.w	8007dde <_strtod_l+0x43e>
 80080ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80080cc:	9805      	ldr	r0, [sp, #20]
 80080ce:	f7fe ffd7 	bl	8007080 <_Bfree>
 80080d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80080d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80080d6:	2d00      	cmp	r5, #0
 80080d8:	dc1d      	bgt.n	8008116 <_strtod_l+0x776>
 80080da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd23      	ble.n	8008128 <_strtod_l+0x788>
 80080e0:	4649      	mov	r1, r9
 80080e2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80080e4:	9805      	ldr	r0, [sp, #20]
 80080e6:	f7ff f989 	bl	80073fc <__pow5mult>
 80080ea:	4681      	mov	r9, r0
 80080ec:	b9e0      	cbnz	r0, 8008128 <_strtod_l+0x788>
 80080ee:	f04f 0900 	mov.w	r9, #0
 80080f2:	e674      	b.n	8007dde <_strtod_l+0x43e>
 80080f4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80080f8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80080fc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008100:	35e2      	adds	r5, #226	@ 0xe2
 8008102:	fa01 f305 	lsl.w	r3, r1, r5
 8008106:	9310      	str	r3, [sp, #64]	@ 0x40
 8008108:	9113      	str	r1, [sp, #76]	@ 0x4c
 800810a:	e7ba      	b.n	8008082 <_strtod_l+0x6e2>
 800810c:	2300      	movs	r3, #0
 800810e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008110:	2301      	movs	r3, #1
 8008112:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008114:	e7b5      	b.n	8008082 <_strtod_l+0x6e2>
 8008116:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008118:	9805      	ldr	r0, [sp, #20]
 800811a:	462a      	mov	r2, r5
 800811c:	f7ff f9c8 	bl	80074b0 <__lshift>
 8008120:	901a      	str	r0, [sp, #104]	@ 0x68
 8008122:	2800      	cmp	r0, #0
 8008124:	d1d9      	bne.n	80080da <_strtod_l+0x73a>
 8008126:	e65a      	b.n	8007dde <_strtod_l+0x43e>
 8008128:	2e00      	cmp	r6, #0
 800812a:	dd07      	ble.n	800813c <_strtod_l+0x79c>
 800812c:	4649      	mov	r1, r9
 800812e:	9805      	ldr	r0, [sp, #20]
 8008130:	4632      	mov	r2, r6
 8008132:	f7ff f9bd 	bl	80074b0 <__lshift>
 8008136:	4681      	mov	r9, r0
 8008138:	2800      	cmp	r0, #0
 800813a:	d0d8      	beq.n	80080ee <_strtod_l+0x74e>
 800813c:	2f00      	cmp	r7, #0
 800813e:	dd08      	ble.n	8008152 <_strtod_l+0x7b2>
 8008140:	4641      	mov	r1, r8
 8008142:	9805      	ldr	r0, [sp, #20]
 8008144:	463a      	mov	r2, r7
 8008146:	f7ff f9b3 	bl	80074b0 <__lshift>
 800814a:	4680      	mov	r8, r0
 800814c:	2800      	cmp	r0, #0
 800814e:	f43f ae46 	beq.w	8007dde <_strtod_l+0x43e>
 8008152:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008154:	9805      	ldr	r0, [sp, #20]
 8008156:	464a      	mov	r2, r9
 8008158:	f7ff fa32 	bl	80075c0 <__mdiff>
 800815c:	4604      	mov	r4, r0
 800815e:	2800      	cmp	r0, #0
 8008160:	f43f ae3d 	beq.w	8007dde <_strtod_l+0x43e>
 8008164:	68c3      	ldr	r3, [r0, #12]
 8008166:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008168:	2300      	movs	r3, #0
 800816a:	60c3      	str	r3, [r0, #12]
 800816c:	4641      	mov	r1, r8
 800816e:	f7ff fa0b 	bl	8007588 <__mcmp>
 8008172:	2800      	cmp	r0, #0
 8008174:	da46      	bge.n	8008204 <_strtod_l+0x864>
 8008176:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008178:	ea53 030a 	orrs.w	r3, r3, sl
 800817c:	d16c      	bne.n	8008258 <_strtod_l+0x8b8>
 800817e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008182:	2b00      	cmp	r3, #0
 8008184:	d168      	bne.n	8008258 <_strtod_l+0x8b8>
 8008186:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800818a:	0d1b      	lsrs	r3, r3, #20
 800818c:	051b      	lsls	r3, r3, #20
 800818e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008192:	d961      	bls.n	8008258 <_strtod_l+0x8b8>
 8008194:	6963      	ldr	r3, [r4, #20]
 8008196:	b913      	cbnz	r3, 800819e <_strtod_l+0x7fe>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	2b01      	cmp	r3, #1
 800819c:	dd5c      	ble.n	8008258 <_strtod_l+0x8b8>
 800819e:	4621      	mov	r1, r4
 80081a0:	2201      	movs	r2, #1
 80081a2:	9805      	ldr	r0, [sp, #20]
 80081a4:	f7ff f984 	bl	80074b0 <__lshift>
 80081a8:	4641      	mov	r1, r8
 80081aa:	4604      	mov	r4, r0
 80081ac:	f7ff f9ec 	bl	8007588 <__mcmp>
 80081b0:	2800      	cmp	r0, #0
 80081b2:	dd51      	ble.n	8008258 <_strtod_l+0x8b8>
 80081b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80081b8:	9a08      	ldr	r2, [sp, #32]
 80081ba:	0d1b      	lsrs	r3, r3, #20
 80081bc:	051b      	lsls	r3, r3, #20
 80081be:	2a00      	cmp	r2, #0
 80081c0:	d06b      	beq.n	800829a <_strtod_l+0x8fa>
 80081c2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80081c6:	d868      	bhi.n	800829a <_strtod_l+0x8fa>
 80081c8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80081cc:	f67f ae9d 	bls.w	8007f0a <_strtod_l+0x56a>
 80081d0:	4b0a      	ldr	r3, [pc, #40]	@ (80081fc <_strtod_l+0x85c>)
 80081d2:	4650      	mov	r0, sl
 80081d4:	4659      	mov	r1, fp
 80081d6:	2200      	movs	r2, #0
 80081d8:	f7f8 fa16 	bl	8000608 <__aeabi_dmul>
 80081dc:	4b08      	ldr	r3, [pc, #32]	@ (8008200 <_strtod_l+0x860>)
 80081de:	400b      	ands	r3, r1
 80081e0:	4682      	mov	sl, r0
 80081e2:	468b      	mov	fp, r1
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f47f ae05 	bne.w	8007df4 <_strtod_l+0x454>
 80081ea:	9a05      	ldr	r2, [sp, #20]
 80081ec:	2322      	movs	r3, #34	@ 0x22
 80081ee:	6013      	str	r3, [r2, #0]
 80081f0:	e600      	b.n	8007df4 <_strtod_l+0x454>
 80081f2:	bf00      	nop
 80081f4:	0800a450 	.word	0x0800a450
 80081f8:	fffffc02 	.word	0xfffffc02
 80081fc:	39500000 	.word	0x39500000
 8008200:	7ff00000 	.word	0x7ff00000
 8008204:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008208:	d165      	bne.n	80082d6 <_strtod_l+0x936>
 800820a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800820c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008210:	b35a      	cbz	r2, 800826a <_strtod_l+0x8ca>
 8008212:	4a9f      	ldr	r2, [pc, #636]	@ (8008490 <_strtod_l+0xaf0>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d12b      	bne.n	8008270 <_strtod_l+0x8d0>
 8008218:	9b08      	ldr	r3, [sp, #32]
 800821a:	4651      	mov	r1, sl
 800821c:	b303      	cbz	r3, 8008260 <_strtod_l+0x8c0>
 800821e:	4b9d      	ldr	r3, [pc, #628]	@ (8008494 <_strtod_l+0xaf4>)
 8008220:	465a      	mov	r2, fp
 8008222:	4013      	ands	r3, r2
 8008224:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008228:	f04f 32ff 	mov.w	r2, #4294967295
 800822c:	d81b      	bhi.n	8008266 <_strtod_l+0x8c6>
 800822e:	0d1b      	lsrs	r3, r3, #20
 8008230:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008234:	fa02 f303 	lsl.w	r3, r2, r3
 8008238:	4299      	cmp	r1, r3
 800823a:	d119      	bne.n	8008270 <_strtod_l+0x8d0>
 800823c:	4b96      	ldr	r3, [pc, #600]	@ (8008498 <_strtod_l+0xaf8>)
 800823e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008240:	429a      	cmp	r2, r3
 8008242:	d102      	bne.n	800824a <_strtod_l+0x8aa>
 8008244:	3101      	adds	r1, #1
 8008246:	f43f adca 	beq.w	8007dde <_strtod_l+0x43e>
 800824a:	4b92      	ldr	r3, [pc, #584]	@ (8008494 <_strtod_l+0xaf4>)
 800824c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800824e:	401a      	ands	r2, r3
 8008250:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008254:	f04f 0a00 	mov.w	sl, #0
 8008258:	9b08      	ldr	r3, [sp, #32]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1b8      	bne.n	80081d0 <_strtod_l+0x830>
 800825e:	e5c9      	b.n	8007df4 <_strtod_l+0x454>
 8008260:	f04f 33ff 	mov.w	r3, #4294967295
 8008264:	e7e8      	b.n	8008238 <_strtod_l+0x898>
 8008266:	4613      	mov	r3, r2
 8008268:	e7e6      	b.n	8008238 <_strtod_l+0x898>
 800826a:	ea53 030a 	orrs.w	r3, r3, sl
 800826e:	d0a1      	beq.n	80081b4 <_strtod_l+0x814>
 8008270:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008272:	b1db      	cbz	r3, 80082ac <_strtod_l+0x90c>
 8008274:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008276:	4213      	tst	r3, r2
 8008278:	d0ee      	beq.n	8008258 <_strtod_l+0x8b8>
 800827a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800827c:	9a08      	ldr	r2, [sp, #32]
 800827e:	4650      	mov	r0, sl
 8008280:	4659      	mov	r1, fp
 8008282:	b1bb      	cbz	r3, 80082b4 <_strtod_l+0x914>
 8008284:	f7ff fb6e 	bl	8007964 <sulp>
 8008288:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800828c:	ec53 2b10 	vmov	r2, r3, d0
 8008290:	f7f8 f804 	bl	800029c <__adddf3>
 8008294:	4682      	mov	sl, r0
 8008296:	468b      	mov	fp, r1
 8008298:	e7de      	b.n	8008258 <_strtod_l+0x8b8>
 800829a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800829e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80082a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80082a6:	f04f 3aff 	mov.w	sl, #4294967295
 80082aa:	e7d5      	b.n	8008258 <_strtod_l+0x8b8>
 80082ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082ae:	ea13 0f0a 	tst.w	r3, sl
 80082b2:	e7e1      	b.n	8008278 <_strtod_l+0x8d8>
 80082b4:	f7ff fb56 	bl	8007964 <sulp>
 80082b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082bc:	ec53 2b10 	vmov	r2, r3, d0
 80082c0:	f7f7 ffea 	bl	8000298 <__aeabi_dsub>
 80082c4:	2200      	movs	r2, #0
 80082c6:	2300      	movs	r3, #0
 80082c8:	4682      	mov	sl, r0
 80082ca:	468b      	mov	fp, r1
 80082cc:	f7f8 fc04 	bl	8000ad8 <__aeabi_dcmpeq>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	d0c1      	beq.n	8008258 <_strtod_l+0x8b8>
 80082d4:	e619      	b.n	8007f0a <_strtod_l+0x56a>
 80082d6:	4641      	mov	r1, r8
 80082d8:	4620      	mov	r0, r4
 80082da:	f7ff facd 	bl	8007878 <__ratio>
 80082de:	ec57 6b10 	vmov	r6, r7, d0
 80082e2:	2200      	movs	r2, #0
 80082e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80082e8:	4630      	mov	r0, r6
 80082ea:	4639      	mov	r1, r7
 80082ec:	f7f8 fc08 	bl	8000b00 <__aeabi_dcmple>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d06f      	beq.n	80083d4 <_strtod_l+0xa34>
 80082f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d17a      	bne.n	80083f0 <_strtod_l+0xa50>
 80082fa:	f1ba 0f00 	cmp.w	sl, #0
 80082fe:	d158      	bne.n	80083b2 <_strtod_l+0xa12>
 8008300:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008302:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008306:	2b00      	cmp	r3, #0
 8008308:	d15a      	bne.n	80083c0 <_strtod_l+0xa20>
 800830a:	4b64      	ldr	r3, [pc, #400]	@ (800849c <_strtod_l+0xafc>)
 800830c:	2200      	movs	r2, #0
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	f7f8 fbeb 	bl	8000aec <__aeabi_dcmplt>
 8008316:	2800      	cmp	r0, #0
 8008318:	d159      	bne.n	80083ce <_strtod_l+0xa2e>
 800831a:	4630      	mov	r0, r6
 800831c:	4639      	mov	r1, r7
 800831e:	4b60      	ldr	r3, [pc, #384]	@ (80084a0 <_strtod_l+0xb00>)
 8008320:	2200      	movs	r2, #0
 8008322:	f7f8 f971 	bl	8000608 <__aeabi_dmul>
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800832e:	9606      	str	r6, [sp, #24]
 8008330:	9307      	str	r3, [sp, #28]
 8008332:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008336:	4d57      	ldr	r5, [pc, #348]	@ (8008494 <_strtod_l+0xaf4>)
 8008338:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800833c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800833e:	401d      	ands	r5, r3
 8008340:	4b58      	ldr	r3, [pc, #352]	@ (80084a4 <_strtod_l+0xb04>)
 8008342:	429d      	cmp	r5, r3
 8008344:	f040 80b2 	bne.w	80084ac <_strtod_l+0xb0c>
 8008348:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800834a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800834e:	ec4b ab10 	vmov	d0, sl, fp
 8008352:	f7ff f9c9 	bl	80076e8 <__ulp>
 8008356:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800835a:	ec51 0b10 	vmov	r0, r1, d0
 800835e:	f7f8 f953 	bl	8000608 <__aeabi_dmul>
 8008362:	4652      	mov	r2, sl
 8008364:	465b      	mov	r3, fp
 8008366:	f7f7 ff99 	bl	800029c <__adddf3>
 800836a:	460b      	mov	r3, r1
 800836c:	4949      	ldr	r1, [pc, #292]	@ (8008494 <_strtod_l+0xaf4>)
 800836e:	4a4e      	ldr	r2, [pc, #312]	@ (80084a8 <_strtod_l+0xb08>)
 8008370:	4019      	ands	r1, r3
 8008372:	4291      	cmp	r1, r2
 8008374:	4682      	mov	sl, r0
 8008376:	d942      	bls.n	80083fe <_strtod_l+0xa5e>
 8008378:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800837a:	4b47      	ldr	r3, [pc, #284]	@ (8008498 <_strtod_l+0xaf8>)
 800837c:	429a      	cmp	r2, r3
 800837e:	d103      	bne.n	8008388 <_strtod_l+0x9e8>
 8008380:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008382:	3301      	adds	r3, #1
 8008384:	f43f ad2b 	beq.w	8007dde <_strtod_l+0x43e>
 8008388:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008498 <_strtod_l+0xaf8>
 800838c:	f04f 3aff 	mov.w	sl, #4294967295
 8008390:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008392:	9805      	ldr	r0, [sp, #20]
 8008394:	f7fe fe74 	bl	8007080 <_Bfree>
 8008398:	9805      	ldr	r0, [sp, #20]
 800839a:	4649      	mov	r1, r9
 800839c:	f7fe fe70 	bl	8007080 <_Bfree>
 80083a0:	9805      	ldr	r0, [sp, #20]
 80083a2:	4641      	mov	r1, r8
 80083a4:	f7fe fe6c 	bl	8007080 <_Bfree>
 80083a8:	9805      	ldr	r0, [sp, #20]
 80083aa:	4621      	mov	r1, r4
 80083ac:	f7fe fe68 	bl	8007080 <_Bfree>
 80083b0:	e618      	b.n	8007fe4 <_strtod_l+0x644>
 80083b2:	f1ba 0f01 	cmp.w	sl, #1
 80083b6:	d103      	bne.n	80083c0 <_strtod_l+0xa20>
 80083b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	f43f ada5 	beq.w	8007f0a <_strtod_l+0x56a>
 80083c0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008470 <_strtod_l+0xad0>
 80083c4:	4f35      	ldr	r7, [pc, #212]	@ (800849c <_strtod_l+0xafc>)
 80083c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083ca:	2600      	movs	r6, #0
 80083cc:	e7b1      	b.n	8008332 <_strtod_l+0x992>
 80083ce:	4f34      	ldr	r7, [pc, #208]	@ (80084a0 <_strtod_l+0xb00>)
 80083d0:	2600      	movs	r6, #0
 80083d2:	e7aa      	b.n	800832a <_strtod_l+0x98a>
 80083d4:	4b32      	ldr	r3, [pc, #200]	@ (80084a0 <_strtod_l+0xb00>)
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	2200      	movs	r2, #0
 80083dc:	f7f8 f914 	bl	8000608 <__aeabi_dmul>
 80083e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80083e2:	4606      	mov	r6, r0
 80083e4:	460f      	mov	r7, r1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d09f      	beq.n	800832a <_strtod_l+0x98a>
 80083ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80083ee:	e7a0      	b.n	8008332 <_strtod_l+0x992>
 80083f0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008478 <_strtod_l+0xad8>
 80083f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80083f8:	ec57 6b17 	vmov	r6, r7, d7
 80083fc:	e799      	b.n	8008332 <_strtod_l+0x992>
 80083fe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008402:	9b08      	ldr	r3, [sp, #32]
 8008404:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1c1      	bne.n	8008390 <_strtod_l+0x9f0>
 800840c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008410:	0d1b      	lsrs	r3, r3, #20
 8008412:	051b      	lsls	r3, r3, #20
 8008414:	429d      	cmp	r5, r3
 8008416:	d1bb      	bne.n	8008390 <_strtod_l+0x9f0>
 8008418:	4630      	mov	r0, r6
 800841a:	4639      	mov	r1, r7
 800841c:	f7f8 fc54 	bl	8000cc8 <__aeabi_d2lz>
 8008420:	f7f8 f8c4 	bl	80005ac <__aeabi_l2d>
 8008424:	4602      	mov	r2, r0
 8008426:	460b      	mov	r3, r1
 8008428:	4630      	mov	r0, r6
 800842a:	4639      	mov	r1, r7
 800842c:	f7f7 ff34 	bl	8000298 <__aeabi_dsub>
 8008430:	460b      	mov	r3, r1
 8008432:	4602      	mov	r2, r0
 8008434:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008438:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800843c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800843e:	ea46 060a 	orr.w	r6, r6, sl
 8008442:	431e      	orrs	r6, r3
 8008444:	d06f      	beq.n	8008526 <_strtod_l+0xb86>
 8008446:	a30e      	add	r3, pc, #56	@ (adr r3, 8008480 <_strtod_l+0xae0>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	f7f8 fb4e 	bl	8000aec <__aeabi_dcmplt>
 8008450:	2800      	cmp	r0, #0
 8008452:	f47f accf 	bne.w	8007df4 <_strtod_l+0x454>
 8008456:	a30c      	add	r3, pc, #48	@ (adr r3, 8008488 <_strtod_l+0xae8>)
 8008458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008460:	f7f8 fb62 	bl	8000b28 <__aeabi_dcmpgt>
 8008464:	2800      	cmp	r0, #0
 8008466:	d093      	beq.n	8008390 <_strtod_l+0x9f0>
 8008468:	e4c4      	b.n	8007df4 <_strtod_l+0x454>
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w
 8008470:	00000000 	.word	0x00000000
 8008474:	bff00000 	.word	0xbff00000
 8008478:	00000000 	.word	0x00000000
 800847c:	3ff00000 	.word	0x3ff00000
 8008480:	94a03595 	.word	0x94a03595
 8008484:	3fdfffff 	.word	0x3fdfffff
 8008488:	35afe535 	.word	0x35afe535
 800848c:	3fe00000 	.word	0x3fe00000
 8008490:	000fffff 	.word	0x000fffff
 8008494:	7ff00000 	.word	0x7ff00000
 8008498:	7fefffff 	.word	0x7fefffff
 800849c:	3ff00000 	.word	0x3ff00000
 80084a0:	3fe00000 	.word	0x3fe00000
 80084a4:	7fe00000 	.word	0x7fe00000
 80084a8:	7c9fffff 	.word	0x7c9fffff
 80084ac:	9b08      	ldr	r3, [sp, #32]
 80084ae:	b323      	cbz	r3, 80084fa <_strtod_l+0xb5a>
 80084b0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80084b4:	d821      	bhi.n	80084fa <_strtod_l+0xb5a>
 80084b6:	a328      	add	r3, pc, #160	@ (adr r3, 8008558 <_strtod_l+0xbb8>)
 80084b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f8 fb1e 	bl	8000b00 <__aeabi_dcmple>
 80084c4:	b1a0      	cbz	r0, 80084f0 <_strtod_l+0xb50>
 80084c6:	4639      	mov	r1, r7
 80084c8:	4630      	mov	r0, r6
 80084ca:	f7f8 fb75 	bl	8000bb8 <__aeabi_d2uiz>
 80084ce:	2801      	cmp	r0, #1
 80084d0:	bf38      	it	cc
 80084d2:	2001      	movcc	r0, #1
 80084d4:	f7f8 f81e 	bl	8000514 <__aeabi_ui2d>
 80084d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084da:	4606      	mov	r6, r0
 80084dc:	460f      	mov	r7, r1
 80084de:	b9fb      	cbnz	r3, 8008520 <_strtod_l+0xb80>
 80084e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80084e4:	9014      	str	r0, [sp, #80]	@ 0x50
 80084e6:	9315      	str	r3, [sp, #84]	@ 0x54
 80084e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80084ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80084f0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80084f2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80084f6:	1b5b      	subs	r3, r3, r5
 80084f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80084fa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80084fe:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008502:	f7ff f8f1 	bl	80076e8 <__ulp>
 8008506:	4650      	mov	r0, sl
 8008508:	ec53 2b10 	vmov	r2, r3, d0
 800850c:	4659      	mov	r1, fp
 800850e:	f7f8 f87b 	bl	8000608 <__aeabi_dmul>
 8008512:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008516:	f7f7 fec1 	bl	800029c <__adddf3>
 800851a:	4682      	mov	sl, r0
 800851c:	468b      	mov	fp, r1
 800851e:	e770      	b.n	8008402 <_strtod_l+0xa62>
 8008520:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008524:	e7e0      	b.n	80084e8 <_strtod_l+0xb48>
 8008526:	a30e      	add	r3, pc, #56	@ (adr r3, 8008560 <_strtod_l+0xbc0>)
 8008528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852c:	f7f8 fade 	bl	8000aec <__aeabi_dcmplt>
 8008530:	e798      	b.n	8008464 <_strtod_l+0xac4>
 8008532:	2300      	movs	r3, #0
 8008534:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008536:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008538:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	f7ff ba6d 	b.w	8007a1a <_strtod_l+0x7a>
 8008540:	2a65      	cmp	r2, #101	@ 0x65
 8008542:	f43f ab66 	beq.w	8007c12 <_strtod_l+0x272>
 8008546:	2a45      	cmp	r2, #69	@ 0x45
 8008548:	f43f ab63 	beq.w	8007c12 <_strtod_l+0x272>
 800854c:	2301      	movs	r3, #1
 800854e:	f7ff bb9e 	b.w	8007c8e <_strtod_l+0x2ee>
 8008552:	bf00      	nop
 8008554:	f3af 8000 	nop.w
 8008558:	ffc00000 	.word	0xffc00000
 800855c:	41dfffff 	.word	0x41dfffff
 8008560:	94a03595 	.word	0x94a03595
 8008564:	3fcfffff 	.word	0x3fcfffff

08008568 <_strtod_r>:
 8008568:	4b01      	ldr	r3, [pc, #4]	@ (8008570 <_strtod_r+0x8>)
 800856a:	f7ff ba19 	b.w	80079a0 <_strtod_l>
 800856e:	bf00      	nop
 8008570:	20000068 	.word	0x20000068

08008574 <_strtol_l.constprop.0>:
 8008574:	2b24      	cmp	r3, #36	@ 0x24
 8008576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800857a:	4686      	mov	lr, r0
 800857c:	4690      	mov	r8, r2
 800857e:	d801      	bhi.n	8008584 <_strtol_l.constprop.0+0x10>
 8008580:	2b01      	cmp	r3, #1
 8008582:	d106      	bne.n	8008592 <_strtol_l.constprop.0+0x1e>
 8008584:	f7fd fdba 	bl	80060fc <__errno>
 8008588:	2316      	movs	r3, #22
 800858a:	6003      	str	r3, [r0, #0]
 800858c:	2000      	movs	r0, #0
 800858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008592:	4834      	ldr	r0, [pc, #208]	@ (8008664 <_strtol_l.constprop.0+0xf0>)
 8008594:	460d      	mov	r5, r1
 8008596:	462a      	mov	r2, r5
 8008598:	f815 4b01 	ldrb.w	r4, [r5], #1
 800859c:	5d06      	ldrb	r6, [r0, r4]
 800859e:	f016 0608 	ands.w	r6, r6, #8
 80085a2:	d1f8      	bne.n	8008596 <_strtol_l.constprop.0+0x22>
 80085a4:	2c2d      	cmp	r4, #45	@ 0x2d
 80085a6:	d12d      	bne.n	8008604 <_strtol_l.constprop.0+0x90>
 80085a8:	782c      	ldrb	r4, [r5, #0]
 80085aa:	2601      	movs	r6, #1
 80085ac:	1c95      	adds	r5, r2, #2
 80085ae:	f033 0210 	bics.w	r2, r3, #16
 80085b2:	d109      	bne.n	80085c8 <_strtol_l.constprop.0+0x54>
 80085b4:	2c30      	cmp	r4, #48	@ 0x30
 80085b6:	d12a      	bne.n	800860e <_strtol_l.constprop.0+0x9a>
 80085b8:	782a      	ldrb	r2, [r5, #0]
 80085ba:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80085be:	2a58      	cmp	r2, #88	@ 0x58
 80085c0:	d125      	bne.n	800860e <_strtol_l.constprop.0+0x9a>
 80085c2:	786c      	ldrb	r4, [r5, #1]
 80085c4:	2310      	movs	r3, #16
 80085c6:	3502      	adds	r5, #2
 80085c8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80085cc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085d0:	2200      	movs	r2, #0
 80085d2:	fbbc f9f3 	udiv	r9, ip, r3
 80085d6:	4610      	mov	r0, r2
 80085d8:	fb03 ca19 	mls	sl, r3, r9, ip
 80085dc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80085e0:	2f09      	cmp	r7, #9
 80085e2:	d81b      	bhi.n	800861c <_strtol_l.constprop.0+0xa8>
 80085e4:	463c      	mov	r4, r7
 80085e6:	42a3      	cmp	r3, r4
 80085e8:	dd27      	ble.n	800863a <_strtol_l.constprop.0+0xc6>
 80085ea:	1c57      	adds	r7, r2, #1
 80085ec:	d007      	beq.n	80085fe <_strtol_l.constprop.0+0x8a>
 80085ee:	4581      	cmp	r9, r0
 80085f0:	d320      	bcc.n	8008634 <_strtol_l.constprop.0+0xc0>
 80085f2:	d101      	bne.n	80085f8 <_strtol_l.constprop.0+0x84>
 80085f4:	45a2      	cmp	sl, r4
 80085f6:	db1d      	blt.n	8008634 <_strtol_l.constprop.0+0xc0>
 80085f8:	fb00 4003 	mla	r0, r0, r3, r4
 80085fc:	2201      	movs	r2, #1
 80085fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008602:	e7eb      	b.n	80085dc <_strtol_l.constprop.0+0x68>
 8008604:	2c2b      	cmp	r4, #43	@ 0x2b
 8008606:	bf04      	itt	eq
 8008608:	782c      	ldrbeq	r4, [r5, #0]
 800860a:	1c95      	addeq	r5, r2, #2
 800860c:	e7cf      	b.n	80085ae <_strtol_l.constprop.0+0x3a>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1da      	bne.n	80085c8 <_strtol_l.constprop.0+0x54>
 8008612:	2c30      	cmp	r4, #48	@ 0x30
 8008614:	bf0c      	ite	eq
 8008616:	2308      	moveq	r3, #8
 8008618:	230a      	movne	r3, #10
 800861a:	e7d5      	b.n	80085c8 <_strtol_l.constprop.0+0x54>
 800861c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008620:	2f19      	cmp	r7, #25
 8008622:	d801      	bhi.n	8008628 <_strtol_l.constprop.0+0xb4>
 8008624:	3c37      	subs	r4, #55	@ 0x37
 8008626:	e7de      	b.n	80085e6 <_strtol_l.constprop.0+0x72>
 8008628:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800862c:	2f19      	cmp	r7, #25
 800862e:	d804      	bhi.n	800863a <_strtol_l.constprop.0+0xc6>
 8008630:	3c57      	subs	r4, #87	@ 0x57
 8008632:	e7d8      	b.n	80085e6 <_strtol_l.constprop.0+0x72>
 8008634:	f04f 32ff 	mov.w	r2, #4294967295
 8008638:	e7e1      	b.n	80085fe <_strtol_l.constprop.0+0x8a>
 800863a:	1c53      	adds	r3, r2, #1
 800863c:	d108      	bne.n	8008650 <_strtol_l.constprop.0+0xdc>
 800863e:	2322      	movs	r3, #34	@ 0x22
 8008640:	f8ce 3000 	str.w	r3, [lr]
 8008644:	4660      	mov	r0, ip
 8008646:	f1b8 0f00 	cmp.w	r8, #0
 800864a:	d0a0      	beq.n	800858e <_strtol_l.constprop.0+0x1a>
 800864c:	1e69      	subs	r1, r5, #1
 800864e:	e006      	b.n	800865e <_strtol_l.constprop.0+0xea>
 8008650:	b106      	cbz	r6, 8008654 <_strtol_l.constprop.0+0xe0>
 8008652:	4240      	negs	r0, r0
 8008654:	f1b8 0f00 	cmp.w	r8, #0
 8008658:	d099      	beq.n	800858e <_strtol_l.constprop.0+0x1a>
 800865a:	2a00      	cmp	r2, #0
 800865c:	d1f6      	bne.n	800864c <_strtol_l.constprop.0+0xd8>
 800865e:	f8c8 1000 	str.w	r1, [r8]
 8008662:	e794      	b.n	800858e <_strtol_l.constprop.0+0x1a>
 8008664:	0800a479 	.word	0x0800a479

08008668 <_strtol_r>:
 8008668:	f7ff bf84 	b.w	8008574 <_strtol_l.constprop.0>

0800866c <__ssputs_r>:
 800866c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008670:	688e      	ldr	r6, [r1, #8]
 8008672:	461f      	mov	r7, r3
 8008674:	42be      	cmp	r6, r7
 8008676:	680b      	ldr	r3, [r1, #0]
 8008678:	4682      	mov	sl, r0
 800867a:	460c      	mov	r4, r1
 800867c:	4690      	mov	r8, r2
 800867e:	d82d      	bhi.n	80086dc <__ssputs_r+0x70>
 8008680:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008684:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008688:	d026      	beq.n	80086d8 <__ssputs_r+0x6c>
 800868a:	6965      	ldr	r5, [r4, #20]
 800868c:	6909      	ldr	r1, [r1, #16]
 800868e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008692:	eba3 0901 	sub.w	r9, r3, r1
 8008696:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800869a:	1c7b      	adds	r3, r7, #1
 800869c:	444b      	add	r3, r9
 800869e:	106d      	asrs	r5, r5, #1
 80086a0:	429d      	cmp	r5, r3
 80086a2:	bf38      	it	cc
 80086a4:	461d      	movcc	r5, r3
 80086a6:	0553      	lsls	r3, r2, #21
 80086a8:	d527      	bpl.n	80086fa <__ssputs_r+0x8e>
 80086aa:	4629      	mov	r1, r5
 80086ac:	f7fe fc1c 	bl	8006ee8 <_malloc_r>
 80086b0:	4606      	mov	r6, r0
 80086b2:	b360      	cbz	r0, 800870e <__ssputs_r+0xa2>
 80086b4:	6921      	ldr	r1, [r4, #16]
 80086b6:	464a      	mov	r2, r9
 80086b8:	f000 fda6 	bl	8009208 <memcpy>
 80086bc:	89a3      	ldrh	r3, [r4, #12]
 80086be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80086c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086c6:	81a3      	strh	r3, [r4, #12]
 80086c8:	6126      	str	r6, [r4, #16]
 80086ca:	6165      	str	r5, [r4, #20]
 80086cc:	444e      	add	r6, r9
 80086ce:	eba5 0509 	sub.w	r5, r5, r9
 80086d2:	6026      	str	r6, [r4, #0]
 80086d4:	60a5      	str	r5, [r4, #8]
 80086d6:	463e      	mov	r6, r7
 80086d8:	42be      	cmp	r6, r7
 80086da:	d900      	bls.n	80086de <__ssputs_r+0x72>
 80086dc:	463e      	mov	r6, r7
 80086de:	6820      	ldr	r0, [r4, #0]
 80086e0:	4632      	mov	r2, r6
 80086e2:	4641      	mov	r1, r8
 80086e4:	f000 fd53 	bl	800918e <memmove>
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	1b9b      	subs	r3, r3, r6
 80086ec:	60a3      	str	r3, [r4, #8]
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	4433      	add	r3, r6
 80086f2:	6023      	str	r3, [r4, #0]
 80086f4:	2000      	movs	r0, #0
 80086f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fa:	462a      	mov	r2, r5
 80086fc:	f001 f919 	bl	8009932 <_realloc_r>
 8008700:	4606      	mov	r6, r0
 8008702:	2800      	cmp	r0, #0
 8008704:	d1e0      	bne.n	80086c8 <__ssputs_r+0x5c>
 8008706:	6921      	ldr	r1, [r4, #16]
 8008708:	4650      	mov	r0, sl
 800870a:	f7fe fb79 	bl	8006e00 <_free_r>
 800870e:	230c      	movs	r3, #12
 8008710:	f8ca 3000 	str.w	r3, [sl]
 8008714:	89a3      	ldrh	r3, [r4, #12]
 8008716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800871a:	81a3      	strh	r3, [r4, #12]
 800871c:	f04f 30ff 	mov.w	r0, #4294967295
 8008720:	e7e9      	b.n	80086f6 <__ssputs_r+0x8a>
	...

08008724 <_svfiprintf_r>:
 8008724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008728:	4698      	mov	r8, r3
 800872a:	898b      	ldrh	r3, [r1, #12]
 800872c:	061b      	lsls	r3, r3, #24
 800872e:	b09d      	sub	sp, #116	@ 0x74
 8008730:	4607      	mov	r7, r0
 8008732:	460d      	mov	r5, r1
 8008734:	4614      	mov	r4, r2
 8008736:	d510      	bpl.n	800875a <_svfiprintf_r+0x36>
 8008738:	690b      	ldr	r3, [r1, #16]
 800873a:	b973      	cbnz	r3, 800875a <_svfiprintf_r+0x36>
 800873c:	2140      	movs	r1, #64	@ 0x40
 800873e:	f7fe fbd3 	bl	8006ee8 <_malloc_r>
 8008742:	6028      	str	r0, [r5, #0]
 8008744:	6128      	str	r0, [r5, #16]
 8008746:	b930      	cbnz	r0, 8008756 <_svfiprintf_r+0x32>
 8008748:	230c      	movs	r3, #12
 800874a:	603b      	str	r3, [r7, #0]
 800874c:	f04f 30ff 	mov.w	r0, #4294967295
 8008750:	b01d      	add	sp, #116	@ 0x74
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	2340      	movs	r3, #64	@ 0x40
 8008758:	616b      	str	r3, [r5, #20]
 800875a:	2300      	movs	r3, #0
 800875c:	9309      	str	r3, [sp, #36]	@ 0x24
 800875e:	2320      	movs	r3, #32
 8008760:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008764:	f8cd 800c 	str.w	r8, [sp, #12]
 8008768:	2330      	movs	r3, #48	@ 0x30
 800876a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008908 <_svfiprintf_r+0x1e4>
 800876e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008772:	f04f 0901 	mov.w	r9, #1
 8008776:	4623      	mov	r3, r4
 8008778:	469a      	mov	sl, r3
 800877a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800877e:	b10a      	cbz	r2, 8008784 <_svfiprintf_r+0x60>
 8008780:	2a25      	cmp	r2, #37	@ 0x25
 8008782:	d1f9      	bne.n	8008778 <_svfiprintf_r+0x54>
 8008784:	ebba 0b04 	subs.w	fp, sl, r4
 8008788:	d00b      	beq.n	80087a2 <_svfiprintf_r+0x7e>
 800878a:	465b      	mov	r3, fp
 800878c:	4622      	mov	r2, r4
 800878e:	4629      	mov	r1, r5
 8008790:	4638      	mov	r0, r7
 8008792:	f7ff ff6b 	bl	800866c <__ssputs_r>
 8008796:	3001      	adds	r0, #1
 8008798:	f000 80a7 	beq.w	80088ea <_svfiprintf_r+0x1c6>
 800879c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879e:	445a      	add	r2, fp
 80087a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a2:	f89a 3000 	ldrb.w	r3, [sl]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	f000 809f 	beq.w	80088ea <_svfiprintf_r+0x1c6>
 80087ac:	2300      	movs	r3, #0
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80087b6:	f10a 0a01 	add.w	sl, sl, #1
 80087ba:	9304      	str	r3, [sp, #16]
 80087bc:	9307      	str	r3, [sp, #28]
 80087be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80087c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80087c4:	4654      	mov	r4, sl
 80087c6:	2205      	movs	r2, #5
 80087c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087cc:	484e      	ldr	r0, [pc, #312]	@ (8008908 <_svfiprintf_r+0x1e4>)
 80087ce:	f7f7 fd07 	bl	80001e0 <memchr>
 80087d2:	9a04      	ldr	r2, [sp, #16]
 80087d4:	b9d8      	cbnz	r0, 800880e <_svfiprintf_r+0xea>
 80087d6:	06d0      	lsls	r0, r2, #27
 80087d8:	bf44      	itt	mi
 80087da:	2320      	movmi	r3, #32
 80087dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087e0:	0711      	lsls	r1, r2, #28
 80087e2:	bf44      	itt	mi
 80087e4:	232b      	movmi	r3, #43	@ 0x2b
 80087e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80087ea:	f89a 3000 	ldrb.w	r3, [sl]
 80087ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80087f0:	d015      	beq.n	800881e <_svfiprintf_r+0xfa>
 80087f2:	9a07      	ldr	r2, [sp, #28]
 80087f4:	4654      	mov	r4, sl
 80087f6:	2000      	movs	r0, #0
 80087f8:	f04f 0c0a 	mov.w	ip, #10
 80087fc:	4621      	mov	r1, r4
 80087fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008802:	3b30      	subs	r3, #48	@ 0x30
 8008804:	2b09      	cmp	r3, #9
 8008806:	d94b      	bls.n	80088a0 <_svfiprintf_r+0x17c>
 8008808:	b1b0      	cbz	r0, 8008838 <_svfiprintf_r+0x114>
 800880a:	9207      	str	r2, [sp, #28]
 800880c:	e014      	b.n	8008838 <_svfiprintf_r+0x114>
 800880e:	eba0 0308 	sub.w	r3, r0, r8
 8008812:	fa09 f303 	lsl.w	r3, r9, r3
 8008816:	4313      	orrs	r3, r2
 8008818:	9304      	str	r3, [sp, #16]
 800881a:	46a2      	mov	sl, r4
 800881c:	e7d2      	b.n	80087c4 <_svfiprintf_r+0xa0>
 800881e:	9b03      	ldr	r3, [sp, #12]
 8008820:	1d19      	adds	r1, r3, #4
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	9103      	str	r1, [sp, #12]
 8008826:	2b00      	cmp	r3, #0
 8008828:	bfbb      	ittet	lt
 800882a:	425b      	neglt	r3, r3
 800882c:	f042 0202 	orrlt.w	r2, r2, #2
 8008830:	9307      	strge	r3, [sp, #28]
 8008832:	9307      	strlt	r3, [sp, #28]
 8008834:	bfb8      	it	lt
 8008836:	9204      	strlt	r2, [sp, #16]
 8008838:	7823      	ldrb	r3, [r4, #0]
 800883a:	2b2e      	cmp	r3, #46	@ 0x2e
 800883c:	d10a      	bne.n	8008854 <_svfiprintf_r+0x130>
 800883e:	7863      	ldrb	r3, [r4, #1]
 8008840:	2b2a      	cmp	r3, #42	@ 0x2a
 8008842:	d132      	bne.n	80088aa <_svfiprintf_r+0x186>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	1d1a      	adds	r2, r3, #4
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	9203      	str	r2, [sp, #12]
 800884c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008850:	3402      	adds	r4, #2
 8008852:	9305      	str	r3, [sp, #20]
 8008854:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008918 <_svfiprintf_r+0x1f4>
 8008858:	7821      	ldrb	r1, [r4, #0]
 800885a:	2203      	movs	r2, #3
 800885c:	4650      	mov	r0, sl
 800885e:	f7f7 fcbf 	bl	80001e0 <memchr>
 8008862:	b138      	cbz	r0, 8008874 <_svfiprintf_r+0x150>
 8008864:	9b04      	ldr	r3, [sp, #16]
 8008866:	eba0 000a 	sub.w	r0, r0, sl
 800886a:	2240      	movs	r2, #64	@ 0x40
 800886c:	4082      	lsls	r2, r0
 800886e:	4313      	orrs	r3, r2
 8008870:	3401      	adds	r4, #1
 8008872:	9304      	str	r3, [sp, #16]
 8008874:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008878:	4824      	ldr	r0, [pc, #144]	@ (800890c <_svfiprintf_r+0x1e8>)
 800887a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800887e:	2206      	movs	r2, #6
 8008880:	f7f7 fcae 	bl	80001e0 <memchr>
 8008884:	2800      	cmp	r0, #0
 8008886:	d036      	beq.n	80088f6 <_svfiprintf_r+0x1d2>
 8008888:	4b21      	ldr	r3, [pc, #132]	@ (8008910 <_svfiprintf_r+0x1ec>)
 800888a:	bb1b      	cbnz	r3, 80088d4 <_svfiprintf_r+0x1b0>
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	3307      	adds	r3, #7
 8008890:	f023 0307 	bic.w	r3, r3, #7
 8008894:	3308      	adds	r3, #8
 8008896:	9303      	str	r3, [sp, #12]
 8008898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800889a:	4433      	add	r3, r6
 800889c:	9309      	str	r3, [sp, #36]	@ 0x24
 800889e:	e76a      	b.n	8008776 <_svfiprintf_r+0x52>
 80088a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80088a4:	460c      	mov	r4, r1
 80088a6:	2001      	movs	r0, #1
 80088a8:	e7a8      	b.n	80087fc <_svfiprintf_r+0xd8>
 80088aa:	2300      	movs	r3, #0
 80088ac:	3401      	adds	r4, #1
 80088ae:	9305      	str	r3, [sp, #20]
 80088b0:	4619      	mov	r1, r3
 80088b2:	f04f 0c0a 	mov.w	ip, #10
 80088b6:	4620      	mov	r0, r4
 80088b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80088bc:	3a30      	subs	r2, #48	@ 0x30
 80088be:	2a09      	cmp	r2, #9
 80088c0:	d903      	bls.n	80088ca <_svfiprintf_r+0x1a6>
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0c6      	beq.n	8008854 <_svfiprintf_r+0x130>
 80088c6:	9105      	str	r1, [sp, #20]
 80088c8:	e7c4      	b.n	8008854 <_svfiprintf_r+0x130>
 80088ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80088ce:	4604      	mov	r4, r0
 80088d0:	2301      	movs	r3, #1
 80088d2:	e7f0      	b.n	80088b6 <_svfiprintf_r+0x192>
 80088d4:	ab03      	add	r3, sp, #12
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	462a      	mov	r2, r5
 80088da:	4b0e      	ldr	r3, [pc, #56]	@ (8008914 <_svfiprintf_r+0x1f0>)
 80088dc:	a904      	add	r1, sp, #16
 80088de:	4638      	mov	r0, r7
 80088e0:	f7fc fc46 	bl	8005170 <_printf_float>
 80088e4:	1c42      	adds	r2, r0, #1
 80088e6:	4606      	mov	r6, r0
 80088e8:	d1d6      	bne.n	8008898 <_svfiprintf_r+0x174>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	065b      	lsls	r3, r3, #25
 80088ee:	f53f af2d 	bmi.w	800874c <_svfiprintf_r+0x28>
 80088f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80088f4:	e72c      	b.n	8008750 <_svfiprintf_r+0x2c>
 80088f6:	ab03      	add	r3, sp, #12
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	462a      	mov	r2, r5
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <_svfiprintf_r+0x1f0>)
 80088fe:	a904      	add	r1, sp, #16
 8008900:	4638      	mov	r0, r7
 8008902:	f7fc fecd 	bl	80056a0 <_printf_i>
 8008906:	e7ed      	b.n	80088e4 <_svfiprintf_r+0x1c0>
 8008908:	0800a579 	.word	0x0800a579
 800890c:	0800a583 	.word	0x0800a583
 8008910:	08005171 	.word	0x08005171
 8008914:	0800866d 	.word	0x0800866d
 8008918:	0800a57f 	.word	0x0800a57f

0800891c <_sungetc_r>:
 800891c:	b538      	push	{r3, r4, r5, lr}
 800891e:	1c4b      	adds	r3, r1, #1
 8008920:	4614      	mov	r4, r2
 8008922:	d103      	bne.n	800892c <_sungetc_r+0x10>
 8008924:	f04f 35ff 	mov.w	r5, #4294967295
 8008928:	4628      	mov	r0, r5
 800892a:	bd38      	pop	{r3, r4, r5, pc}
 800892c:	8993      	ldrh	r3, [r2, #12]
 800892e:	f023 0320 	bic.w	r3, r3, #32
 8008932:	8193      	strh	r3, [r2, #12]
 8008934:	6853      	ldr	r3, [r2, #4]
 8008936:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008938:	b2cd      	uxtb	r5, r1
 800893a:	b18a      	cbz	r2, 8008960 <_sungetc_r+0x44>
 800893c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800893e:	429a      	cmp	r2, r3
 8008940:	dd08      	ble.n	8008954 <_sungetc_r+0x38>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	1e5a      	subs	r2, r3, #1
 8008946:	6022      	str	r2, [r4, #0]
 8008948:	f803 5c01 	strb.w	r5, [r3, #-1]
 800894c:	6863      	ldr	r3, [r4, #4]
 800894e:	3301      	adds	r3, #1
 8008950:	6063      	str	r3, [r4, #4]
 8008952:	e7e9      	b.n	8008928 <_sungetc_r+0xc>
 8008954:	4621      	mov	r1, r4
 8008956:	f000 fbe0 	bl	800911a <__submore>
 800895a:	2800      	cmp	r0, #0
 800895c:	d0f1      	beq.n	8008942 <_sungetc_r+0x26>
 800895e:	e7e1      	b.n	8008924 <_sungetc_r+0x8>
 8008960:	6921      	ldr	r1, [r4, #16]
 8008962:	6822      	ldr	r2, [r4, #0]
 8008964:	b141      	cbz	r1, 8008978 <_sungetc_r+0x5c>
 8008966:	4291      	cmp	r1, r2
 8008968:	d206      	bcs.n	8008978 <_sungetc_r+0x5c>
 800896a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800896e:	42a9      	cmp	r1, r5
 8008970:	d102      	bne.n	8008978 <_sungetc_r+0x5c>
 8008972:	3a01      	subs	r2, #1
 8008974:	6022      	str	r2, [r4, #0]
 8008976:	e7ea      	b.n	800894e <_sungetc_r+0x32>
 8008978:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800897c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008980:	6363      	str	r3, [r4, #52]	@ 0x34
 8008982:	2303      	movs	r3, #3
 8008984:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008986:	4623      	mov	r3, r4
 8008988:	f803 5f46 	strb.w	r5, [r3, #70]!
 800898c:	6023      	str	r3, [r4, #0]
 800898e:	2301      	movs	r3, #1
 8008990:	e7de      	b.n	8008950 <_sungetc_r+0x34>

08008992 <__ssrefill_r>:
 8008992:	b510      	push	{r4, lr}
 8008994:	460c      	mov	r4, r1
 8008996:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008998:	b169      	cbz	r1, 80089b6 <__ssrefill_r+0x24>
 800899a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800899e:	4299      	cmp	r1, r3
 80089a0:	d001      	beq.n	80089a6 <__ssrefill_r+0x14>
 80089a2:	f7fe fa2d 	bl	8006e00 <_free_r>
 80089a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089a8:	6063      	str	r3, [r4, #4]
 80089aa:	2000      	movs	r0, #0
 80089ac:	6360      	str	r0, [r4, #52]	@ 0x34
 80089ae:	b113      	cbz	r3, 80089b6 <__ssrefill_r+0x24>
 80089b0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80089b2:	6023      	str	r3, [r4, #0]
 80089b4:	bd10      	pop	{r4, pc}
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	2300      	movs	r3, #0
 80089bc:	6063      	str	r3, [r4, #4]
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f043 0320 	orr.w	r3, r3, #32
 80089c4:	81a3      	strh	r3, [r4, #12]
 80089c6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ca:	e7f3      	b.n	80089b4 <__ssrefill_r+0x22>

080089cc <__ssvfiscanf_r>:
 80089cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089d0:	460c      	mov	r4, r1
 80089d2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80089d6:	2100      	movs	r1, #0
 80089d8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80089dc:	49a5      	ldr	r1, [pc, #660]	@ (8008c74 <__ssvfiscanf_r+0x2a8>)
 80089de:	91a0      	str	r1, [sp, #640]	@ 0x280
 80089e0:	f10d 0804 	add.w	r8, sp, #4
 80089e4:	49a4      	ldr	r1, [pc, #656]	@ (8008c78 <__ssvfiscanf_r+0x2ac>)
 80089e6:	4fa5      	ldr	r7, [pc, #660]	@ (8008c7c <__ssvfiscanf_r+0x2b0>)
 80089e8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80089ec:	4606      	mov	r6, r0
 80089ee:	91a1      	str	r1, [sp, #644]	@ 0x284
 80089f0:	9300      	str	r3, [sp, #0]
 80089f2:	7813      	ldrb	r3, [r2, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 8158 	beq.w	8008caa <__ssvfiscanf_r+0x2de>
 80089fa:	5cf9      	ldrb	r1, [r7, r3]
 80089fc:	f011 0108 	ands.w	r1, r1, #8
 8008a00:	f102 0501 	add.w	r5, r2, #1
 8008a04:	d019      	beq.n	8008a3a <__ssvfiscanf_r+0x6e>
 8008a06:	6863      	ldr	r3, [r4, #4]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd0f      	ble.n	8008a2c <__ssvfiscanf_r+0x60>
 8008a0c:	6823      	ldr	r3, [r4, #0]
 8008a0e:	781a      	ldrb	r2, [r3, #0]
 8008a10:	5cba      	ldrb	r2, [r7, r2]
 8008a12:	0712      	lsls	r2, r2, #28
 8008a14:	d401      	bmi.n	8008a1a <__ssvfiscanf_r+0x4e>
 8008a16:	462a      	mov	r2, r5
 8008a18:	e7eb      	b.n	80089f2 <__ssvfiscanf_r+0x26>
 8008a1a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008a1c:	3201      	adds	r2, #1
 8008a1e:	9245      	str	r2, [sp, #276]	@ 0x114
 8008a20:	6862      	ldr	r2, [r4, #4]
 8008a22:	3301      	adds	r3, #1
 8008a24:	3a01      	subs	r2, #1
 8008a26:	6062      	str	r2, [r4, #4]
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	e7ec      	b.n	8008a06 <__ssvfiscanf_r+0x3a>
 8008a2c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4630      	mov	r0, r6
 8008a32:	4798      	blx	r3
 8008a34:	2800      	cmp	r0, #0
 8008a36:	d0e9      	beq.n	8008a0c <__ssvfiscanf_r+0x40>
 8008a38:	e7ed      	b.n	8008a16 <__ssvfiscanf_r+0x4a>
 8008a3a:	2b25      	cmp	r3, #37	@ 0x25
 8008a3c:	d012      	beq.n	8008a64 <__ssvfiscanf_r+0x98>
 8008a3e:	4699      	mov	r9, r3
 8008a40:	6863      	ldr	r3, [r4, #4]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f340 8093 	ble.w	8008b6e <__ssvfiscanf_r+0x1a2>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	7813      	ldrb	r3, [r2, #0]
 8008a4c:	454b      	cmp	r3, r9
 8008a4e:	f040 812c 	bne.w	8008caa <__ssvfiscanf_r+0x2de>
 8008a52:	6863      	ldr	r3, [r4, #4]
 8008a54:	3b01      	subs	r3, #1
 8008a56:	6063      	str	r3, [r4, #4]
 8008a58:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008a5a:	3201      	adds	r2, #1
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	6022      	str	r2, [r4, #0]
 8008a60:	9345      	str	r3, [sp, #276]	@ 0x114
 8008a62:	e7d8      	b.n	8008a16 <__ssvfiscanf_r+0x4a>
 8008a64:	9141      	str	r1, [sp, #260]	@ 0x104
 8008a66:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008a68:	7853      	ldrb	r3, [r2, #1]
 8008a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a6c:	bf02      	ittt	eq
 8008a6e:	2310      	moveq	r3, #16
 8008a70:	1c95      	addeq	r5, r2, #2
 8008a72:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008a74:	220a      	movs	r2, #10
 8008a76:	46a9      	mov	r9, r5
 8008a78:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008a7c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008a80:	2b09      	cmp	r3, #9
 8008a82:	d91e      	bls.n	8008ac2 <__ssvfiscanf_r+0xf6>
 8008a84:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8008c80 <__ssvfiscanf_r+0x2b4>
 8008a88:	2203      	movs	r2, #3
 8008a8a:	4650      	mov	r0, sl
 8008a8c:	f7f7 fba8 	bl	80001e0 <memchr>
 8008a90:	b138      	cbz	r0, 8008aa2 <__ssvfiscanf_r+0xd6>
 8008a92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008a94:	eba0 000a 	sub.w	r0, r0, sl
 8008a98:	2301      	movs	r3, #1
 8008a9a:	4083      	lsls	r3, r0
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008aa0:	464d      	mov	r5, r9
 8008aa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008aa6:	2b78      	cmp	r3, #120	@ 0x78
 8008aa8:	d806      	bhi.n	8008ab8 <__ssvfiscanf_r+0xec>
 8008aaa:	2b57      	cmp	r3, #87	@ 0x57
 8008aac:	d810      	bhi.n	8008ad0 <__ssvfiscanf_r+0x104>
 8008aae:	2b25      	cmp	r3, #37	@ 0x25
 8008ab0:	d0c5      	beq.n	8008a3e <__ssvfiscanf_r+0x72>
 8008ab2:	d857      	bhi.n	8008b64 <__ssvfiscanf_r+0x198>
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d065      	beq.n	8008b84 <__ssvfiscanf_r+0x1b8>
 8008ab8:	2303      	movs	r3, #3
 8008aba:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008abc:	230a      	movs	r3, #10
 8008abe:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ac0:	e078      	b.n	8008bb4 <__ssvfiscanf_r+0x1e8>
 8008ac2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008ac4:	fb02 1103 	mla	r1, r2, r3, r1
 8008ac8:	3930      	subs	r1, #48	@ 0x30
 8008aca:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008acc:	464d      	mov	r5, r9
 8008ace:	e7d2      	b.n	8008a76 <__ssvfiscanf_r+0xaa>
 8008ad0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008ad4:	2a20      	cmp	r2, #32
 8008ad6:	d8ef      	bhi.n	8008ab8 <__ssvfiscanf_r+0xec>
 8008ad8:	a101      	add	r1, pc, #4	@ (adr r1, 8008ae0 <__ssvfiscanf_r+0x114>)
 8008ada:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008b93 	.word	0x08008b93
 8008ae4:	08008ab9 	.word	0x08008ab9
 8008ae8:	08008ab9 	.word	0x08008ab9
 8008aec:	08008bed 	.word	0x08008bed
 8008af0:	08008ab9 	.word	0x08008ab9
 8008af4:	08008ab9 	.word	0x08008ab9
 8008af8:	08008ab9 	.word	0x08008ab9
 8008afc:	08008ab9 	.word	0x08008ab9
 8008b00:	08008ab9 	.word	0x08008ab9
 8008b04:	08008ab9 	.word	0x08008ab9
 8008b08:	08008ab9 	.word	0x08008ab9
 8008b0c:	08008c03 	.word	0x08008c03
 8008b10:	08008be9 	.word	0x08008be9
 8008b14:	08008b6b 	.word	0x08008b6b
 8008b18:	08008b6b 	.word	0x08008b6b
 8008b1c:	08008b6b 	.word	0x08008b6b
 8008b20:	08008ab9 	.word	0x08008ab9
 8008b24:	08008ba5 	.word	0x08008ba5
 8008b28:	08008ab9 	.word	0x08008ab9
 8008b2c:	08008ab9 	.word	0x08008ab9
 8008b30:	08008ab9 	.word	0x08008ab9
 8008b34:	08008ab9 	.word	0x08008ab9
 8008b38:	08008c13 	.word	0x08008c13
 8008b3c:	08008bad 	.word	0x08008bad
 8008b40:	08008b8b 	.word	0x08008b8b
 8008b44:	08008ab9 	.word	0x08008ab9
 8008b48:	08008ab9 	.word	0x08008ab9
 8008b4c:	08008c0f 	.word	0x08008c0f
 8008b50:	08008ab9 	.word	0x08008ab9
 8008b54:	08008be9 	.word	0x08008be9
 8008b58:	08008ab9 	.word	0x08008ab9
 8008b5c:	08008ab9 	.word	0x08008ab9
 8008b60:	08008b93 	.word	0x08008b93
 8008b64:	3b45      	subs	r3, #69	@ 0x45
 8008b66:	2b02      	cmp	r3, #2
 8008b68:	d8a6      	bhi.n	8008ab8 <__ssvfiscanf_r+0xec>
 8008b6a:	2305      	movs	r3, #5
 8008b6c:	e021      	b.n	8008bb2 <__ssvfiscanf_r+0x1e6>
 8008b6e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008b70:	4621      	mov	r1, r4
 8008b72:	4630      	mov	r0, r6
 8008b74:	4798      	blx	r3
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f af66 	beq.w	8008a48 <__ssvfiscanf_r+0x7c>
 8008b7c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f040 808b 	bne.w	8008c9a <__ssvfiscanf_r+0x2ce>
 8008b84:	f04f 30ff 	mov.w	r0, #4294967295
 8008b88:	e08b      	b.n	8008ca2 <__ssvfiscanf_r+0x2d6>
 8008b8a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008b8c:	f042 0220 	orr.w	r2, r2, #32
 8008b90:	9241      	str	r2, [sp, #260]	@ 0x104
 8008b92:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008b98:	9241      	str	r2, [sp, #260]	@ 0x104
 8008b9a:	2210      	movs	r2, #16
 8008b9c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b9e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008ba0:	d902      	bls.n	8008ba8 <__ssvfiscanf_r+0x1dc>
 8008ba2:	e005      	b.n	8008bb0 <__ssvfiscanf_r+0x1e4>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ba8:	2303      	movs	r3, #3
 8008baa:	e002      	b.n	8008bb2 <__ssvfiscanf_r+0x1e6>
 8008bac:	2308      	movs	r3, #8
 8008bae:	9342      	str	r3, [sp, #264]	@ 0x108
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008bb4:	6863      	ldr	r3, [r4, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dd39      	ble.n	8008c2e <__ssvfiscanf_r+0x262>
 8008bba:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008bbc:	0659      	lsls	r1, r3, #25
 8008bbe:	d404      	bmi.n	8008bca <__ssvfiscanf_r+0x1fe>
 8008bc0:	6823      	ldr	r3, [r4, #0]
 8008bc2:	781a      	ldrb	r2, [r3, #0]
 8008bc4:	5cba      	ldrb	r2, [r7, r2]
 8008bc6:	0712      	lsls	r2, r2, #28
 8008bc8:	d438      	bmi.n	8008c3c <__ssvfiscanf_r+0x270>
 8008bca:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	dc47      	bgt.n	8008c60 <__ssvfiscanf_r+0x294>
 8008bd0:	466b      	mov	r3, sp
 8008bd2:	4622      	mov	r2, r4
 8008bd4:	a941      	add	r1, sp, #260	@ 0x104
 8008bd6:	4630      	mov	r0, r6
 8008bd8:	f000 f86c 	bl	8008cb4 <_scanf_chars>
 8008bdc:	2801      	cmp	r0, #1
 8008bde:	d064      	beq.n	8008caa <__ssvfiscanf_r+0x2de>
 8008be0:	2802      	cmp	r0, #2
 8008be2:	f47f af18 	bne.w	8008a16 <__ssvfiscanf_r+0x4a>
 8008be6:	e7c9      	b.n	8008b7c <__ssvfiscanf_r+0x1b0>
 8008be8:	220a      	movs	r2, #10
 8008bea:	e7d7      	b.n	8008b9c <__ssvfiscanf_r+0x1d0>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4640      	mov	r0, r8
 8008bf0:	f000 fa5a 	bl	80090a8 <__sccl>
 8008bf4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008bf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bfa:	9341      	str	r3, [sp, #260]	@ 0x104
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7d7      	b.n	8008bb2 <__ssvfiscanf_r+0x1e6>
 8008c02:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c08:	9341      	str	r3, [sp, #260]	@ 0x104
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	e7d1      	b.n	8008bb2 <__ssvfiscanf_r+0x1e6>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e7cf      	b.n	8008bb2 <__ssvfiscanf_r+0x1e6>
 8008c12:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008c14:	06c3      	lsls	r3, r0, #27
 8008c16:	f53f aefe 	bmi.w	8008a16 <__ssvfiscanf_r+0x4a>
 8008c1a:	9b00      	ldr	r3, [sp, #0]
 8008c1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008c1e:	1d19      	adds	r1, r3, #4
 8008c20:	9100      	str	r1, [sp, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	07c0      	lsls	r0, r0, #31
 8008c26:	bf4c      	ite	mi
 8008c28:	801a      	strhmi	r2, [r3, #0]
 8008c2a:	601a      	strpl	r2, [r3, #0]
 8008c2c:	e6f3      	b.n	8008a16 <__ssvfiscanf_r+0x4a>
 8008c2e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008c30:	4621      	mov	r1, r4
 8008c32:	4630      	mov	r0, r6
 8008c34:	4798      	blx	r3
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d0bf      	beq.n	8008bba <__ssvfiscanf_r+0x1ee>
 8008c3a:	e79f      	b.n	8008b7c <__ssvfiscanf_r+0x1b0>
 8008c3c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008c3e:	3201      	adds	r2, #1
 8008c40:	9245      	str	r2, [sp, #276]	@ 0x114
 8008c42:	6862      	ldr	r2, [r4, #4]
 8008c44:	3a01      	subs	r2, #1
 8008c46:	2a00      	cmp	r2, #0
 8008c48:	6062      	str	r2, [r4, #4]
 8008c4a:	dd02      	ble.n	8008c52 <__ssvfiscanf_r+0x286>
 8008c4c:	3301      	adds	r3, #1
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	e7b6      	b.n	8008bc0 <__ssvfiscanf_r+0x1f4>
 8008c52:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008c54:	4621      	mov	r1, r4
 8008c56:	4630      	mov	r0, r6
 8008c58:	4798      	blx	r3
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	d0b0      	beq.n	8008bc0 <__ssvfiscanf_r+0x1f4>
 8008c5e:	e78d      	b.n	8008b7c <__ssvfiscanf_r+0x1b0>
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	dc0f      	bgt.n	8008c84 <__ssvfiscanf_r+0x2b8>
 8008c64:	466b      	mov	r3, sp
 8008c66:	4622      	mov	r2, r4
 8008c68:	a941      	add	r1, sp, #260	@ 0x104
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f87c 	bl	8008d68 <_scanf_i>
 8008c70:	e7b4      	b.n	8008bdc <__ssvfiscanf_r+0x210>
 8008c72:	bf00      	nop
 8008c74:	0800891d 	.word	0x0800891d
 8008c78:	08008993 	.word	0x08008993
 8008c7c:	0800a479 	.word	0x0800a479
 8008c80:	0800a57f 	.word	0x0800a57f
 8008c84:	4b0a      	ldr	r3, [pc, #40]	@ (8008cb0 <__ssvfiscanf_r+0x2e4>)
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	f43f aec5 	beq.w	8008a16 <__ssvfiscanf_r+0x4a>
 8008c8c:	466b      	mov	r3, sp
 8008c8e:	4622      	mov	r2, r4
 8008c90:	a941      	add	r1, sp, #260	@ 0x104
 8008c92:	4630      	mov	r0, r6
 8008c94:	f7fc fe24 	bl	80058e0 <_scanf_float>
 8008c98:	e7a0      	b.n	8008bdc <__ssvfiscanf_r+0x210>
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	065b      	lsls	r3, r3, #25
 8008c9e:	f53f af71 	bmi.w	8008b84 <__ssvfiscanf_r+0x1b8>
 8008ca2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008caa:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008cac:	e7f9      	b.n	8008ca2 <__ssvfiscanf_r+0x2d6>
 8008cae:	bf00      	nop
 8008cb0:	080058e1 	.word	0x080058e1

08008cb4 <_scanf_chars>:
 8008cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008cb8:	4615      	mov	r5, r2
 8008cba:	688a      	ldr	r2, [r1, #8]
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b932      	cbnz	r2, 8008cd0 <_scanf_chars+0x1c>
 8008cc2:	698a      	ldr	r2, [r1, #24]
 8008cc4:	2a00      	cmp	r2, #0
 8008cc6:	bf14      	ite	ne
 8008cc8:	f04f 32ff 	movne.w	r2, #4294967295
 8008ccc:	2201      	moveq	r2, #1
 8008cce:	608a      	str	r2, [r1, #8]
 8008cd0:	6822      	ldr	r2, [r4, #0]
 8008cd2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008d64 <_scanf_chars+0xb0>
 8008cd6:	06d1      	lsls	r1, r2, #27
 8008cd8:	bf5f      	itttt	pl
 8008cda:	681a      	ldrpl	r2, [r3, #0]
 8008cdc:	1d11      	addpl	r1, r2, #4
 8008cde:	6019      	strpl	r1, [r3, #0]
 8008ce0:	6816      	ldrpl	r6, [r2, #0]
 8008ce2:	2700      	movs	r7, #0
 8008ce4:	69a0      	ldr	r0, [r4, #24]
 8008ce6:	b188      	cbz	r0, 8008d0c <_scanf_chars+0x58>
 8008ce8:	2801      	cmp	r0, #1
 8008cea:	d107      	bne.n	8008cfc <_scanf_chars+0x48>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	781a      	ldrb	r2, [r3, #0]
 8008cf0:	6963      	ldr	r3, [r4, #20]
 8008cf2:	5c9b      	ldrb	r3, [r3, r2]
 8008cf4:	b953      	cbnz	r3, 8008d0c <_scanf_chars+0x58>
 8008cf6:	2f00      	cmp	r7, #0
 8008cf8:	d031      	beq.n	8008d5e <_scanf_chars+0xaa>
 8008cfa:	e022      	b.n	8008d42 <_scanf_chars+0x8e>
 8008cfc:	2802      	cmp	r0, #2
 8008cfe:	d120      	bne.n	8008d42 <_scanf_chars+0x8e>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	781b      	ldrb	r3, [r3, #0]
 8008d04:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008d08:	071b      	lsls	r3, r3, #28
 8008d0a:	d41a      	bmi.n	8008d42 <_scanf_chars+0x8e>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	06da      	lsls	r2, r3, #27
 8008d10:	bf5e      	ittt	pl
 8008d12:	682b      	ldrpl	r3, [r5, #0]
 8008d14:	781b      	ldrbpl	r3, [r3, #0]
 8008d16:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008d1a:	682a      	ldr	r2, [r5, #0]
 8008d1c:	686b      	ldr	r3, [r5, #4]
 8008d1e:	3201      	adds	r2, #1
 8008d20:	602a      	str	r2, [r5, #0]
 8008d22:	68a2      	ldr	r2, [r4, #8]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	3a01      	subs	r2, #1
 8008d28:	606b      	str	r3, [r5, #4]
 8008d2a:	3701      	adds	r7, #1
 8008d2c:	60a2      	str	r2, [r4, #8]
 8008d2e:	b142      	cbz	r2, 8008d42 <_scanf_chars+0x8e>
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	dcd7      	bgt.n	8008ce4 <_scanf_chars+0x30>
 8008d34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008d38:	4629      	mov	r1, r5
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4798      	blx	r3
 8008d3e:	2800      	cmp	r0, #0
 8008d40:	d0d0      	beq.n	8008ce4 <_scanf_chars+0x30>
 8008d42:	6823      	ldr	r3, [r4, #0]
 8008d44:	f013 0310 	ands.w	r3, r3, #16
 8008d48:	d105      	bne.n	8008d56 <_scanf_chars+0xa2>
 8008d4a:	68e2      	ldr	r2, [r4, #12]
 8008d4c:	3201      	adds	r2, #1
 8008d4e:	60e2      	str	r2, [r4, #12]
 8008d50:	69a2      	ldr	r2, [r4, #24]
 8008d52:	b102      	cbz	r2, 8008d56 <_scanf_chars+0xa2>
 8008d54:	7033      	strb	r3, [r6, #0]
 8008d56:	6923      	ldr	r3, [r4, #16]
 8008d58:	443b      	add	r3, r7
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d62:	bf00      	nop
 8008d64:	0800a479 	.word	0x0800a479

08008d68 <_scanf_i>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	4698      	mov	r8, r3
 8008d6e:	4b74      	ldr	r3, [pc, #464]	@ (8008f40 <_scanf_i+0x1d8>)
 8008d70:	460c      	mov	r4, r1
 8008d72:	4682      	mov	sl, r0
 8008d74:	4616      	mov	r6, r2
 8008d76:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	ab03      	add	r3, sp, #12
 8008d7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008d82:	4b70      	ldr	r3, [pc, #448]	@ (8008f44 <_scanf_i+0x1dc>)
 8008d84:	69a1      	ldr	r1, [r4, #24]
 8008d86:	4a70      	ldr	r2, [pc, #448]	@ (8008f48 <_scanf_i+0x1e0>)
 8008d88:	2903      	cmp	r1, #3
 8008d8a:	bf08      	it	eq
 8008d8c:	461a      	moveq	r2, r3
 8008d8e:	68a3      	ldr	r3, [r4, #8]
 8008d90:	9201      	str	r2, [sp, #4]
 8008d92:	1e5a      	subs	r2, r3, #1
 8008d94:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008d98:	bf88      	it	hi
 8008d9a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008d9e:	4627      	mov	r7, r4
 8008da0:	bf82      	ittt	hi
 8008da2:	eb03 0905 	addhi.w	r9, r3, r5
 8008da6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008daa:	60a3      	strhi	r3, [r4, #8]
 8008dac:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008db0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008db4:	bf98      	it	ls
 8008db6:	f04f 0900 	movls.w	r9, #0
 8008dba:	6023      	str	r3, [r4, #0]
 8008dbc:	463d      	mov	r5, r7
 8008dbe:	f04f 0b00 	mov.w	fp, #0
 8008dc2:	6831      	ldr	r1, [r6, #0]
 8008dc4:	ab03      	add	r3, sp, #12
 8008dc6:	7809      	ldrb	r1, [r1, #0]
 8008dc8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008dcc:	2202      	movs	r2, #2
 8008dce:	f7f7 fa07 	bl	80001e0 <memchr>
 8008dd2:	b328      	cbz	r0, 8008e20 <_scanf_i+0xb8>
 8008dd4:	f1bb 0f01 	cmp.w	fp, #1
 8008dd8:	d159      	bne.n	8008e8e <_scanf_i+0x126>
 8008dda:	6862      	ldr	r2, [r4, #4]
 8008ddc:	b92a      	cbnz	r2, 8008dea <_scanf_i+0x82>
 8008dde:	6822      	ldr	r2, [r4, #0]
 8008de0:	2108      	movs	r1, #8
 8008de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008de6:	6061      	str	r1, [r4, #4]
 8008de8:	6022      	str	r2, [r4, #0]
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	1e51      	subs	r1, r2, #1
 8008df6:	60a1      	str	r1, [r4, #8]
 8008df8:	b192      	cbz	r2, 8008e20 <_scanf_i+0xb8>
 8008dfa:	6832      	ldr	r2, [r6, #0]
 8008dfc:	1c51      	adds	r1, r2, #1
 8008dfe:	6031      	str	r1, [r6, #0]
 8008e00:	7812      	ldrb	r2, [r2, #0]
 8008e02:	f805 2b01 	strb.w	r2, [r5], #1
 8008e06:	6872      	ldr	r2, [r6, #4]
 8008e08:	3a01      	subs	r2, #1
 8008e0a:	2a00      	cmp	r2, #0
 8008e0c:	6072      	str	r2, [r6, #4]
 8008e0e:	dc07      	bgt.n	8008e20 <_scanf_i+0xb8>
 8008e10:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008e14:	4631      	mov	r1, r6
 8008e16:	4650      	mov	r0, sl
 8008e18:	4790      	blx	r2
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	f040 8085 	bne.w	8008f2a <_scanf_i+0x1c2>
 8008e20:	f10b 0b01 	add.w	fp, fp, #1
 8008e24:	f1bb 0f03 	cmp.w	fp, #3
 8008e28:	d1cb      	bne.n	8008dc2 <_scanf_i+0x5a>
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_scanf_i+0xca>
 8008e2e:	230a      	movs	r3, #10
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	6863      	ldr	r3, [r4, #4]
 8008e34:	4945      	ldr	r1, [pc, #276]	@ (8008f4c <_scanf_i+0x1e4>)
 8008e36:	6960      	ldr	r0, [r4, #20]
 8008e38:	1ac9      	subs	r1, r1, r3
 8008e3a:	f000 f935 	bl	80090a8 <__sccl>
 8008e3e:	f04f 0b00 	mov.w	fp, #0
 8008e42:	68a3      	ldr	r3, [r4, #8]
 8008e44:	6822      	ldr	r2, [r4, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d03d      	beq.n	8008ec6 <_scanf_i+0x15e>
 8008e4a:	6831      	ldr	r1, [r6, #0]
 8008e4c:	6960      	ldr	r0, [r4, #20]
 8008e4e:	f891 c000 	ldrb.w	ip, [r1]
 8008e52:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d035      	beq.n	8008ec6 <_scanf_i+0x15e>
 8008e5a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008e5e:	d124      	bne.n	8008eaa <_scanf_i+0x142>
 8008e60:	0510      	lsls	r0, r2, #20
 8008e62:	d522      	bpl.n	8008eaa <_scanf_i+0x142>
 8008e64:	f10b 0b01 	add.w	fp, fp, #1
 8008e68:	f1b9 0f00 	cmp.w	r9, #0
 8008e6c:	d003      	beq.n	8008e76 <_scanf_i+0x10e>
 8008e6e:	3301      	adds	r3, #1
 8008e70:	f109 39ff 	add.w	r9, r9, #4294967295
 8008e74:	60a3      	str	r3, [r4, #8]
 8008e76:	6873      	ldr	r3, [r6, #4]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	6073      	str	r3, [r6, #4]
 8008e7e:	dd1b      	ble.n	8008eb8 <_scanf_i+0x150>
 8008e80:	6833      	ldr	r3, [r6, #0]
 8008e82:	3301      	adds	r3, #1
 8008e84:	6033      	str	r3, [r6, #0]
 8008e86:	68a3      	ldr	r3, [r4, #8]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	60a3      	str	r3, [r4, #8]
 8008e8c:	e7d9      	b.n	8008e42 <_scanf_i+0xda>
 8008e8e:	f1bb 0f02 	cmp.w	fp, #2
 8008e92:	d1ae      	bne.n	8008df2 <_scanf_i+0x8a>
 8008e94:	6822      	ldr	r2, [r4, #0]
 8008e96:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008e9a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008e9e:	d1bf      	bne.n	8008e20 <_scanf_i+0xb8>
 8008ea0:	2110      	movs	r1, #16
 8008ea2:	6061      	str	r1, [r4, #4]
 8008ea4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008ea8:	e7a2      	b.n	8008df0 <_scanf_i+0x88>
 8008eaa:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008eae:	6022      	str	r2, [r4, #0]
 8008eb0:	780b      	ldrb	r3, [r1, #0]
 8008eb2:	f805 3b01 	strb.w	r3, [r5], #1
 8008eb6:	e7de      	b.n	8008e76 <_scanf_i+0x10e>
 8008eb8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4650      	mov	r0, sl
 8008ec0:	4798      	blx	r3
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d0df      	beq.n	8008e86 <_scanf_i+0x11e>
 8008ec6:	6823      	ldr	r3, [r4, #0]
 8008ec8:	05d9      	lsls	r1, r3, #23
 8008eca:	d50d      	bpl.n	8008ee8 <_scanf_i+0x180>
 8008ecc:	42bd      	cmp	r5, r7
 8008ece:	d909      	bls.n	8008ee4 <_scanf_i+0x17c>
 8008ed0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4650      	mov	r0, sl
 8008edc:	4798      	blx	r3
 8008ede:	f105 39ff 	add.w	r9, r5, #4294967295
 8008ee2:	464d      	mov	r5, r9
 8008ee4:	42bd      	cmp	r5, r7
 8008ee6:	d028      	beq.n	8008f3a <_scanf_i+0x1d2>
 8008ee8:	6822      	ldr	r2, [r4, #0]
 8008eea:	f012 0210 	ands.w	r2, r2, #16
 8008eee:	d113      	bne.n	8008f18 <_scanf_i+0x1b0>
 8008ef0:	702a      	strb	r2, [r5, #0]
 8008ef2:	6863      	ldr	r3, [r4, #4]
 8008ef4:	9e01      	ldr	r6, [sp, #4]
 8008ef6:	4639      	mov	r1, r7
 8008ef8:	4650      	mov	r0, sl
 8008efa:	47b0      	blx	r6
 8008efc:	f8d8 3000 	ldr.w	r3, [r8]
 8008f00:	6821      	ldr	r1, [r4, #0]
 8008f02:	1d1a      	adds	r2, r3, #4
 8008f04:	f8c8 2000 	str.w	r2, [r8]
 8008f08:	f011 0f20 	tst.w	r1, #32
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	d00f      	beq.n	8008f30 <_scanf_i+0x1c8>
 8008f10:	6018      	str	r0, [r3, #0]
 8008f12:	68e3      	ldr	r3, [r4, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60e3      	str	r3, [r4, #12]
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	1bed      	subs	r5, r5, r7
 8008f1c:	445d      	add	r5, fp
 8008f1e:	442b      	add	r3, r5
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	2000      	movs	r0, #0
 8008f24:	b007      	add	sp, #28
 8008f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f2a:	f04f 0b00 	mov.w	fp, #0
 8008f2e:	e7ca      	b.n	8008ec6 <_scanf_i+0x15e>
 8008f30:	07ca      	lsls	r2, r1, #31
 8008f32:	bf4c      	ite	mi
 8008f34:	8018      	strhmi	r0, [r3, #0]
 8008f36:	6018      	strpl	r0, [r3, #0]
 8008f38:	e7eb      	b.n	8008f12 <_scanf_i+0x1aa>
 8008f3a:	2001      	movs	r0, #1
 8008f3c:	e7f2      	b.n	8008f24 <_scanf_i+0x1bc>
 8008f3e:	bf00      	nop
 8008f40:	0800a1d4 	.word	0x0800a1d4
 8008f44:	08008669 	.word	0x08008669
 8008f48:	08009a6d 	.word	0x08009a6d
 8008f4c:	0800a59a 	.word	0x0800a59a

08008f50 <__sflush_r>:
 8008f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	0716      	lsls	r6, r2, #28
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	460c      	mov	r4, r1
 8008f5e:	d454      	bmi.n	800900a <__sflush_r+0xba>
 8008f60:	684b      	ldr	r3, [r1, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	dc02      	bgt.n	8008f6c <__sflush_r+0x1c>
 8008f66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	dd48      	ble.n	8008ffe <__sflush_r+0xae>
 8008f6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f6e:	2e00      	cmp	r6, #0
 8008f70:	d045      	beq.n	8008ffe <__sflush_r+0xae>
 8008f72:	2300      	movs	r3, #0
 8008f74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f78:	682f      	ldr	r7, [r5, #0]
 8008f7a:	6a21      	ldr	r1, [r4, #32]
 8008f7c:	602b      	str	r3, [r5, #0]
 8008f7e:	d030      	beq.n	8008fe2 <__sflush_r+0x92>
 8008f80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f82:	89a3      	ldrh	r3, [r4, #12]
 8008f84:	0759      	lsls	r1, r3, #29
 8008f86:	d505      	bpl.n	8008f94 <__sflush_r+0x44>
 8008f88:	6863      	ldr	r3, [r4, #4]
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f8e:	b10b      	cbz	r3, 8008f94 <__sflush_r+0x44>
 8008f90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	2300      	movs	r3, #0
 8008f96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f98:	6a21      	ldr	r1, [r4, #32]
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	47b0      	blx	r6
 8008f9e:	1c43      	adds	r3, r0, #1
 8008fa0:	89a3      	ldrh	r3, [r4, #12]
 8008fa2:	d106      	bne.n	8008fb2 <__sflush_r+0x62>
 8008fa4:	6829      	ldr	r1, [r5, #0]
 8008fa6:	291d      	cmp	r1, #29
 8008fa8:	d82b      	bhi.n	8009002 <__sflush_r+0xb2>
 8008faa:	4a2a      	ldr	r2, [pc, #168]	@ (8009054 <__sflush_r+0x104>)
 8008fac:	410a      	asrs	r2, r1
 8008fae:	07d6      	lsls	r6, r2, #31
 8008fb0:	d427      	bmi.n	8009002 <__sflush_r+0xb2>
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	6062      	str	r2, [r4, #4]
 8008fb6:	04d9      	lsls	r1, r3, #19
 8008fb8:	6922      	ldr	r2, [r4, #16]
 8008fba:	6022      	str	r2, [r4, #0]
 8008fbc:	d504      	bpl.n	8008fc8 <__sflush_r+0x78>
 8008fbe:	1c42      	adds	r2, r0, #1
 8008fc0:	d101      	bne.n	8008fc6 <__sflush_r+0x76>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b903      	cbnz	r3, 8008fc8 <__sflush_r+0x78>
 8008fc6:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fc8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fca:	602f      	str	r7, [r5, #0]
 8008fcc:	b1b9      	cbz	r1, 8008ffe <__sflush_r+0xae>
 8008fce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fd2:	4299      	cmp	r1, r3
 8008fd4:	d002      	beq.n	8008fdc <__sflush_r+0x8c>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	f7fd ff12 	bl	8006e00 <_free_r>
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fe0:	e00d      	b.n	8008ffe <__sflush_r+0xae>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b0      	blx	r6
 8008fe8:	4602      	mov	r2, r0
 8008fea:	1c50      	adds	r0, r2, #1
 8008fec:	d1c9      	bne.n	8008f82 <__sflush_r+0x32>
 8008fee:	682b      	ldr	r3, [r5, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0c6      	beq.n	8008f82 <__sflush_r+0x32>
 8008ff4:	2b1d      	cmp	r3, #29
 8008ff6:	d001      	beq.n	8008ffc <__sflush_r+0xac>
 8008ff8:	2b16      	cmp	r3, #22
 8008ffa:	d11e      	bne.n	800903a <__sflush_r+0xea>
 8008ffc:	602f      	str	r7, [r5, #0]
 8008ffe:	2000      	movs	r0, #0
 8009000:	e022      	b.n	8009048 <__sflush_r+0xf8>
 8009002:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009006:	b21b      	sxth	r3, r3
 8009008:	e01b      	b.n	8009042 <__sflush_r+0xf2>
 800900a:	690f      	ldr	r7, [r1, #16]
 800900c:	2f00      	cmp	r7, #0
 800900e:	d0f6      	beq.n	8008ffe <__sflush_r+0xae>
 8009010:	0793      	lsls	r3, r2, #30
 8009012:	680e      	ldr	r6, [r1, #0]
 8009014:	bf08      	it	eq
 8009016:	694b      	ldreq	r3, [r1, #20]
 8009018:	600f      	str	r7, [r1, #0]
 800901a:	bf18      	it	ne
 800901c:	2300      	movne	r3, #0
 800901e:	eba6 0807 	sub.w	r8, r6, r7
 8009022:	608b      	str	r3, [r1, #8]
 8009024:	f1b8 0f00 	cmp.w	r8, #0
 8009028:	dde9      	ble.n	8008ffe <__sflush_r+0xae>
 800902a:	6a21      	ldr	r1, [r4, #32]
 800902c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800902e:	4643      	mov	r3, r8
 8009030:	463a      	mov	r2, r7
 8009032:	4628      	mov	r0, r5
 8009034:	47b0      	blx	r6
 8009036:	2800      	cmp	r0, #0
 8009038:	dc08      	bgt.n	800904c <__sflush_r+0xfc>
 800903a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800903e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009042:	81a3      	strh	r3, [r4, #12]
 8009044:	f04f 30ff 	mov.w	r0, #4294967295
 8009048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800904c:	4407      	add	r7, r0
 800904e:	eba8 0800 	sub.w	r8, r8, r0
 8009052:	e7e7      	b.n	8009024 <__sflush_r+0xd4>
 8009054:	dfbffffe 	.word	0xdfbffffe

08009058 <_fflush_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	690b      	ldr	r3, [r1, #16]
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	b913      	cbnz	r3, 8009068 <_fflush_r+0x10>
 8009062:	2500      	movs	r5, #0
 8009064:	4628      	mov	r0, r5
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	b118      	cbz	r0, 8009072 <_fflush_r+0x1a>
 800906a:	6a03      	ldr	r3, [r0, #32]
 800906c:	b90b      	cbnz	r3, 8009072 <_fflush_r+0x1a>
 800906e:	f7fc fed7 	bl	8005e20 <__sinit>
 8009072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d0f3      	beq.n	8009062 <_fflush_r+0xa>
 800907a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800907c:	07d0      	lsls	r0, r2, #31
 800907e:	d404      	bmi.n	800908a <_fflush_r+0x32>
 8009080:	0599      	lsls	r1, r3, #22
 8009082:	d402      	bmi.n	800908a <_fflush_r+0x32>
 8009084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009086:	f7fd f864 	bl	8006152 <__retarget_lock_acquire_recursive>
 800908a:	4628      	mov	r0, r5
 800908c:	4621      	mov	r1, r4
 800908e:	f7ff ff5f 	bl	8008f50 <__sflush_r>
 8009092:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009094:	07da      	lsls	r2, r3, #31
 8009096:	4605      	mov	r5, r0
 8009098:	d4e4      	bmi.n	8009064 <_fflush_r+0xc>
 800909a:	89a3      	ldrh	r3, [r4, #12]
 800909c:	059b      	lsls	r3, r3, #22
 800909e:	d4e1      	bmi.n	8009064 <_fflush_r+0xc>
 80090a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80090a2:	f7fd f857 	bl	8006154 <__retarget_lock_release_recursive>
 80090a6:	e7dd      	b.n	8009064 <_fflush_r+0xc>

080090a8 <__sccl>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	780b      	ldrb	r3, [r1, #0]
 80090ac:	4604      	mov	r4, r0
 80090ae:	2b5e      	cmp	r3, #94	@ 0x5e
 80090b0:	bf0b      	itete	eq
 80090b2:	784b      	ldrbeq	r3, [r1, #1]
 80090b4:	1c4a      	addne	r2, r1, #1
 80090b6:	1c8a      	addeq	r2, r1, #2
 80090b8:	2100      	movne	r1, #0
 80090ba:	bf08      	it	eq
 80090bc:	2101      	moveq	r1, #1
 80090be:	3801      	subs	r0, #1
 80090c0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80090c4:	f800 1f01 	strb.w	r1, [r0, #1]!
 80090c8:	42a8      	cmp	r0, r5
 80090ca:	d1fb      	bne.n	80090c4 <__sccl+0x1c>
 80090cc:	b90b      	cbnz	r3, 80090d2 <__sccl+0x2a>
 80090ce:	1e50      	subs	r0, r2, #1
 80090d0:	bd70      	pop	{r4, r5, r6, pc}
 80090d2:	f081 0101 	eor.w	r1, r1, #1
 80090d6:	54e1      	strb	r1, [r4, r3]
 80090d8:	4610      	mov	r0, r2
 80090da:	4602      	mov	r2, r0
 80090dc:	f812 5b01 	ldrb.w	r5, [r2], #1
 80090e0:	2d2d      	cmp	r5, #45	@ 0x2d
 80090e2:	d005      	beq.n	80090f0 <__sccl+0x48>
 80090e4:	2d5d      	cmp	r5, #93	@ 0x5d
 80090e6:	d016      	beq.n	8009116 <__sccl+0x6e>
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	d0f1      	beq.n	80090d0 <__sccl+0x28>
 80090ec:	462b      	mov	r3, r5
 80090ee:	e7f2      	b.n	80090d6 <__sccl+0x2e>
 80090f0:	7846      	ldrb	r6, [r0, #1]
 80090f2:	2e5d      	cmp	r6, #93	@ 0x5d
 80090f4:	d0fa      	beq.n	80090ec <__sccl+0x44>
 80090f6:	42b3      	cmp	r3, r6
 80090f8:	dcf8      	bgt.n	80090ec <__sccl+0x44>
 80090fa:	3002      	adds	r0, #2
 80090fc:	461a      	mov	r2, r3
 80090fe:	3201      	adds	r2, #1
 8009100:	4296      	cmp	r6, r2
 8009102:	54a1      	strb	r1, [r4, r2]
 8009104:	dcfb      	bgt.n	80090fe <__sccl+0x56>
 8009106:	1af2      	subs	r2, r6, r3
 8009108:	3a01      	subs	r2, #1
 800910a:	1c5d      	adds	r5, r3, #1
 800910c:	42b3      	cmp	r3, r6
 800910e:	bfa8      	it	ge
 8009110:	2200      	movge	r2, #0
 8009112:	18ab      	adds	r3, r5, r2
 8009114:	e7e1      	b.n	80090da <__sccl+0x32>
 8009116:	4610      	mov	r0, r2
 8009118:	e7da      	b.n	80090d0 <__sccl+0x28>

0800911a <__submore>:
 800911a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911e:	460c      	mov	r4, r1
 8009120:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009122:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009126:	4299      	cmp	r1, r3
 8009128:	d11d      	bne.n	8009166 <__submore+0x4c>
 800912a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800912e:	f7fd fedb 	bl	8006ee8 <_malloc_r>
 8009132:	b918      	cbnz	r0, 800913c <__submore+0x22>
 8009134:	f04f 30ff 	mov.w	r0, #4294967295
 8009138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009140:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009142:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009146:	6360      	str	r0, [r4, #52]	@ 0x34
 8009148:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800914c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8009150:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8009154:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8009158:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800915c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8009160:	6020      	str	r0, [r4, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	e7e8      	b.n	8009138 <__submore+0x1e>
 8009166:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8009168:	0077      	lsls	r7, r6, #1
 800916a:	463a      	mov	r2, r7
 800916c:	f000 fbe1 	bl	8009932 <_realloc_r>
 8009170:	4605      	mov	r5, r0
 8009172:	2800      	cmp	r0, #0
 8009174:	d0de      	beq.n	8009134 <__submore+0x1a>
 8009176:	eb00 0806 	add.w	r8, r0, r6
 800917a:	4601      	mov	r1, r0
 800917c:	4632      	mov	r2, r6
 800917e:	4640      	mov	r0, r8
 8009180:	f000 f842 	bl	8009208 <memcpy>
 8009184:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8009188:	f8c4 8000 	str.w	r8, [r4]
 800918c:	e7e9      	b.n	8009162 <__submore+0x48>

0800918e <memmove>:
 800918e:	4288      	cmp	r0, r1
 8009190:	b510      	push	{r4, lr}
 8009192:	eb01 0402 	add.w	r4, r1, r2
 8009196:	d902      	bls.n	800919e <memmove+0x10>
 8009198:	4284      	cmp	r4, r0
 800919a:	4623      	mov	r3, r4
 800919c:	d807      	bhi.n	80091ae <memmove+0x20>
 800919e:	1e43      	subs	r3, r0, #1
 80091a0:	42a1      	cmp	r1, r4
 80091a2:	d008      	beq.n	80091b6 <memmove+0x28>
 80091a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091a8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ac:	e7f8      	b.n	80091a0 <memmove+0x12>
 80091ae:	4402      	add	r2, r0
 80091b0:	4601      	mov	r1, r0
 80091b2:	428a      	cmp	r2, r1
 80091b4:	d100      	bne.n	80091b8 <memmove+0x2a>
 80091b6:	bd10      	pop	{r4, pc}
 80091b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091bc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091c0:	e7f7      	b.n	80091b2 <memmove+0x24>

080091c2 <strncmp>:
 80091c2:	b510      	push	{r4, lr}
 80091c4:	b16a      	cbz	r2, 80091e2 <strncmp+0x20>
 80091c6:	3901      	subs	r1, #1
 80091c8:	1884      	adds	r4, r0, r2
 80091ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d103      	bne.n	80091de <strncmp+0x1c>
 80091d6:	42a0      	cmp	r0, r4
 80091d8:	d001      	beq.n	80091de <strncmp+0x1c>
 80091da:	2a00      	cmp	r2, #0
 80091dc:	d1f5      	bne.n	80091ca <strncmp+0x8>
 80091de:	1ad0      	subs	r0, r2, r3
 80091e0:	bd10      	pop	{r4, pc}
 80091e2:	4610      	mov	r0, r2
 80091e4:	e7fc      	b.n	80091e0 <strncmp+0x1e>
	...

080091e8 <_sbrk_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	4d06      	ldr	r5, [pc, #24]	@ (8009204 <_sbrk_r+0x1c>)
 80091ec:	2300      	movs	r3, #0
 80091ee:	4604      	mov	r4, r0
 80091f0:	4608      	mov	r0, r1
 80091f2:	602b      	str	r3, [r5, #0]
 80091f4:	f7f8 fe04 	bl	8001e00 <_sbrk>
 80091f8:	1c43      	adds	r3, r0, #1
 80091fa:	d102      	bne.n	8009202 <_sbrk_r+0x1a>
 80091fc:	682b      	ldr	r3, [r5, #0]
 80091fe:	b103      	cbz	r3, 8009202 <_sbrk_r+0x1a>
 8009200:	6023      	str	r3, [r4, #0]
 8009202:	bd38      	pop	{r3, r4, r5, pc}
 8009204:	20000790 	.word	0x20000790

08009208 <memcpy>:
 8009208:	440a      	add	r2, r1
 800920a:	4291      	cmp	r1, r2
 800920c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009210:	d100      	bne.n	8009214 <memcpy+0xc>
 8009212:	4770      	bx	lr
 8009214:	b510      	push	{r4, lr}
 8009216:	f811 4b01 	ldrb.w	r4, [r1], #1
 800921a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800921e:	4291      	cmp	r1, r2
 8009220:	d1f9      	bne.n	8009216 <memcpy+0xe>
 8009222:	bd10      	pop	{r4, pc}
 8009224:	0000      	movs	r0, r0
	...

08009228 <nan>:
 8009228:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009230 <nan+0x8>
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	00000000 	.word	0x00000000
 8009234:	7ff80000 	.word	0x7ff80000

08009238 <__assert_func>:
 8009238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800923a:	4614      	mov	r4, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4b09      	ldr	r3, [pc, #36]	@ (8009264 <__assert_func+0x2c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4605      	mov	r5, r0
 8009244:	68d8      	ldr	r0, [r3, #12]
 8009246:	b954      	cbnz	r4, 800925e <__assert_func+0x26>
 8009248:	4b07      	ldr	r3, [pc, #28]	@ (8009268 <__assert_func+0x30>)
 800924a:	461c      	mov	r4, r3
 800924c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009250:	9100      	str	r1, [sp, #0]
 8009252:	462b      	mov	r3, r5
 8009254:	4905      	ldr	r1, [pc, #20]	@ (800926c <__assert_func+0x34>)
 8009256:	f000 fc19 	bl	8009a8c <fiprintf>
 800925a:	f000 fc29 	bl	8009ab0 <abort>
 800925e:	4b04      	ldr	r3, [pc, #16]	@ (8009270 <__assert_func+0x38>)
 8009260:	e7f4      	b.n	800924c <__assert_func+0x14>
 8009262:	bf00      	nop
 8009264:	20000018 	.word	0x20000018
 8009268:	0800a5e8 	.word	0x0800a5e8
 800926c:	0800a5ba 	.word	0x0800a5ba
 8009270:	0800a5ad 	.word	0x0800a5ad

08009274 <_calloc_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	fba1 5402 	umull	r5, r4, r1, r2
 800927a:	b93c      	cbnz	r4, 800928c <_calloc_r+0x18>
 800927c:	4629      	mov	r1, r5
 800927e:	f7fd fe33 	bl	8006ee8 <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b928      	cbnz	r0, 8009292 <_calloc_r+0x1e>
 8009286:	2600      	movs	r6, #0
 8009288:	4630      	mov	r0, r6
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	220c      	movs	r2, #12
 800928e:	6002      	str	r2, [r0, #0]
 8009290:	e7f9      	b.n	8009286 <_calloc_r+0x12>
 8009292:	462a      	mov	r2, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7fc febc 	bl	8006012 <memset>
 800929a:	e7f5      	b.n	8009288 <_calloc_r+0x14>

0800929c <rshift>:
 800929c:	6903      	ldr	r3, [r0, #16]
 800929e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80092a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80092a6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80092aa:	f100 0414 	add.w	r4, r0, #20
 80092ae:	dd45      	ble.n	800933c <rshift+0xa0>
 80092b0:	f011 011f 	ands.w	r1, r1, #31
 80092b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80092b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80092bc:	d10c      	bne.n	80092d8 <rshift+0x3c>
 80092be:	f100 0710 	add.w	r7, r0, #16
 80092c2:	4629      	mov	r1, r5
 80092c4:	42b1      	cmp	r1, r6
 80092c6:	d334      	bcc.n	8009332 <rshift+0x96>
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	1eea      	subs	r2, r5, #3
 80092ce:	4296      	cmp	r6, r2
 80092d0:	bf38      	it	cc
 80092d2:	2300      	movcc	r3, #0
 80092d4:	4423      	add	r3, r4
 80092d6:	e015      	b.n	8009304 <rshift+0x68>
 80092d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80092dc:	f1c1 0820 	rsb	r8, r1, #32
 80092e0:	40cf      	lsrs	r7, r1
 80092e2:	f105 0e04 	add.w	lr, r5, #4
 80092e6:	46a1      	mov	r9, r4
 80092e8:	4576      	cmp	r6, lr
 80092ea:	46f4      	mov	ip, lr
 80092ec:	d815      	bhi.n	800931a <rshift+0x7e>
 80092ee:	1a9a      	subs	r2, r3, r2
 80092f0:	0092      	lsls	r2, r2, #2
 80092f2:	3a04      	subs	r2, #4
 80092f4:	3501      	adds	r5, #1
 80092f6:	42ae      	cmp	r6, r5
 80092f8:	bf38      	it	cc
 80092fa:	2200      	movcc	r2, #0
 80092fc:	18a3      	adds	r3, r4, r2
 80092fe:	50a7      	str	r7, [r4, r2]
 8009300:	b107      	cbz	r7, 8009304 <rshift+0x68>
 8009302:	3304      	adds	r3, #4
 8009304:	1b1a      	subs	r2, r3, r4
 8009306:	42a3      	cmp	r3, r4
 8009308:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800930c:	bf08      	it	eq
 800930e:	2300      	moveq	r3, #0
 8009310:	6102      	str	r2, [r0, #16]
 8009312:	bf08      	it	eq
 8009314:	6143      	streq	r3, [r0, #20]
 8009316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800931a:	f8dc c000 	ldr.w	ip, [ip]
 800931e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009322:	ea4c 0707 	orr.w	r7, ip, r7
 8009326:	f849 7b04 	str.w	r7, [r9], #4
 800932a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800932e:	40cf      	lsrs	r7, r1
 8009330:	e7da      	b.n	80092e8 <rshift+0x4c>
 8009332:	f851 cb04 	ldr.w	ip, [r1], #4
 8009336:	f847 cf04 	str.w	ip, [r7, #4]!
 800933a:	e7c3      	b.n	80092c4 <rshift+0x28>
 800933c:	4623      	mov	r3, r4
 800933e:	e7e1      	b.n	8009304 <rshift+0x68>

08009340 <__hexdig_fun>:
 8009340:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009344:	2b09      	cmp	r3, #9
 8009346:	d802      	bhi.n	800934e <__hexdig_fun+0xe>
 8009348:	3820      	subs	r0, #32
 800934a:	b2c0      	uxtb	r0, r0
 800934c:	4770      	bx	lr
 800934e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009352:	2b05      	cmp	r3, #5
 8009354:	d801      	bhi.n	800935a <__hexdig_fun+0x1a>
 8009356:	3847      	subs	r0, #71	@ 0x47
 8009358:	e7f7      	b.n	800934a <__hexdig_fun+0xa>
 800935a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800935e:	2b05      	cmp	r3, #5
 8009360:	d801      	bhi.n	8009366 <__hexdig_fun+0x26>
 8009362:	3827      	subs	r0, #39	@ 0x27
 8009364:	e7f1      	b.n	800934a <__hexdig_fun+0xa>
 8009366:	2000      	movs	r0, #0
 8009368:	4770      	bx	lr
	...

0800936c <__gethex>:
 800936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009370:	b085      	sub	sp, #20
 8009372:	468a      	mov	sl, r1
 8009374:	9302      	str	r3, [sp, #8]
 8009376:	680b      	ldr	r3, [r1, #0]
 8009378:	9001      	str	r0, [sp, #4]
 800937a:	4690      	mov	r8, r2
 800937c:	1c9c      	adds	r4, r3, #2
 800937e:	46a1      	mov	r9, r4
 8009380:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009384:	2830      	cmp	r0, #48	@ 0x30
 8009386:	d0fa      	beq.n	800937e <__gethex+0x12>
 8009388:	eba9 0303 	sub.w	r3, r9, r3
 800938c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009390:	f7ff ffd6 	bl	8009340 <__hexdig_fun>
 8009394:	4605      	mov	r5, r0
 8009396:	2800      	cmp	r0, #0
 8009398:	d168      	bne.n	800946c <__gethex+0x100>
 800939a:	49a0      	ldr	r1, [pc, #640]	@ (800961c <__gethex+0x2b0>)
 800939c:	2201      	movs	r2, #1
 800939e:	4648      	mov	r0, r9
 80093a0:	f7ff ff0f 	bl	80091c2 <strncmp>
 80093a4:	4607      	mov	r7, r0
 80093a6:	2800      	cmp	r0, #0
 80093a8:	d167      	bne.n	800947a <__gethex+0x10e>
 80093aa:	f899 0001 	ldrb.w	r0, [r9, #1]
 80093ae:	4626      	mov	r6, r4
 80093b0:	f7ff ffc6 	bl	8009340 <__hexdig_fun>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d062      	beq.n	800947e <__gethex+0x112>
 80093b8:	4623      	mov	r3, r4
 80093ba:	7818      	ldrb	r0, [r3, #0]
 80093bc:	2830      	cmp	r0, #48	@ 0x30
 80093be:	4699      	mov	r9, r3
 80093c0:	f103 0301 	add.w	r3, r3, #1
 80093c4:	d0f9      	beq.n	80093ba <__gethex+0x4e>
 80093c6:	f7ff ffbb 	bl	8009340 <__hexdig_fun>
 80093ca:	fab0 f580 	clz	r5, r0
 80093ce:	096d      	lsrs	r5, r5, #5
 80093d0:	f04f 0b01 	mov.w	fp, #1
 80093d4:	464a      	mov	r2, r9
 80093d6:	4616      	mov	r6, r2
 80093d8:	3201      	adds	r2, #1
 80093da:	7830      	ldrb	r0, [r6, #0]
 80093dc:	f7ff ffb0 	bl	8009340 <__hexdig_fun>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d1f8      	bne.n	80093d6 <__gethex+0x6a>
 80093e4:	498d      	ldr	r1, [pc, #564]	@ (800961c <__gethex+0x2b0>)
 80093e6:	2201      	movs	r2, #1
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7ff feea 	bl	80091c2 <strncmp>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	d13f      	bne.n	8009472 <__gethex+0x106>
 80093f2:	b944      	cbnz	r4, 8009406 <__gethex+0x9a>
 80093f4:	1c74      	adds	r4, r6, #1
 80093f6:	4622      	mov	r2, r4
 80093f8:	4616      	mov	r6, r2
 80093fa:	3201      	adds	r2, #1
 80093fc:	7830      	ldrb	r0, [r6, #0]
 80093fe:	f7ff ff9f 	bl	8009340 <__hexdig_fun>
 8009402:	2800      	cmp	r0, #0
 8009404:	d1f8      	bne.n	80093f8 <__gethex+0x8c>
 8009406:	1ba4      	subs	r4, r4, r6
 8009408:	00a7      	lsls	r7, r4, #2
 800940a:	7833      	ldrb	r3, [r6, #0]
 800940c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009410:	2b50      	cmp	r3, #80	@ 0x50
 8009412:	d13e      	bne.n	8009492 <__gethex+0x126>
 8009414:	7873      	ldrb	r3, [r6, #1]
 8009416:	2b2b      	cmp	r3, #43	@ 0x2b
 8009418:	d033      	beq.n	8009482 <__gethex+0x116>
 800941a:	2b2d      	cmp	r3, #45	@ 0x2d
 800941c:	d034      	beq.n	8009488 <__gethex+0x11c>
 800941e:	1c71      	adds	r1, r6, #1
 8009420:	2400      	movs	r4, #0
 8009422:	7808      	ldrb	r0, [r1, #0]
 8009424:	f7ff ff8c 	bl	8009340 <__hexdig_fun>
 8009428:	1e43      	subs	r3, r0, #1
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b18      	cmp	r3, #24
 800942e:	d830      	bhi.n	8009492 <__gethex+0x126>
 8009430:	f1a0 0210 	sub.w	r2, r0, #16
 8009434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009438:	f7ff ff82 	bl	8009340 <__hexdig_fun>
 800943c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009440:	fa5f fc8c 	uxtb.w	ip, ip
 8009444:	f1bc 0f18 	cmp.w	ip, #24
 8009448:	f04f 030a 	mov.w	r3, #10
 800944c:	d91e      	bls.n	800948c <__gethex+0x120>
 800944e:	b104      	cbz	r4, 8009452 <__gethex+0xe6>
 8009450:	4252      	negs	r2, r2
 8009452:	4417      	add	r7, r2
 8009454:	f8ca 1000 	str.w	r1, [sl]
 8009458:	b1ed      	cbz	r5, 8009496 <__gethex+0x12a>
 800945a:	f1bb 0f00 	cmp.w	fp, #0
 800945e:	bf0c      	ite	eq
 8009460:	2506      	moveq	r5, #6
 8009462:	2500      	movne	r5, #0
 8009464:	4628      	mov	r0, r5
 8009466:	b005      	add	sp, #20
 8009468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800946c:	2500      	movs	r5, #0
 800946e:	462c      	mov	r4, r5
 8009470:	e7b0      	b.n	80093d4 <__gethex+0x68>
 8009472:	2c00      	cmp	r4, #0
 8009474:	d1c7      	bne.n	8009406 <__gethex+0x9a>
 8009476:	4627      	mov	r7, r4
 8009478:	e7c7      	b.n	800940a <__gethex+0x9e>
 800947a:	464e      	mov	r6, r9
 800947c:	462f      	mov	r7, r5
 800947e:	2501      	movs	r5, #1
 8009480:	e7c3      	b.n	800940a <__gethex+0x9e>
 8009482:	2400      	movs	r4, #0
 8009484:	1cb1      	adds	r1, r6, #2
 8009486:	e7cc      	b.n	8009422 <__gethex+0xb6>
 8009488:	2401      	movs	r4, #1
 800948a:	e7fb      	b.n	8009484 <__gethex+0x118>
 800948c:	fb03 0002 	mla	r0, r3, r2, r0
 8009490:	e7ce      	b.n	8009430 <__gethex+0xc4>
 8009492:	4631      	mov	r1, r6
 8009494:	e7de      	b.n	8009454 <__gethex+0xe8>
 8009496:	eba6 0309 	sub.w	r3, r6, r9
 800949a:	3b01      	subs	r3, #1
 800949c:	4629      	mov	r1, r5
 800949e:	2b07      	cmp	r3, #7
 80094a0:	dc0a      	bgt.n	80094b8 <__gethex+0x14c>
 80094a2:	9801      	ldr	r0, [sp, #4]
 80094a4:	f7fd fdac 	bl	8007000 <_Balloc>
 80094a8:	4604      	mov	r4, r0
 80094aa:	b940      	cbnz	r0, 80094be <__gethex+0x152>
 80094ac:	4b5c      	ldr	r3, [pc, #368]	@ (8009620 <__gethex+0x2b4>)
 80094ae:	4602      	mov	r2, r0
 80094b0:	21e4      	movs	r1, #228	@ 0xe4
 80094b2:	485c      	ldr	r0, [pc, #368]	@ (8009624 <__gethex+0x2b8>)
 80094b4:	f7ff fec0 	bl	8009238 <__assert_func>
 80094b8:	3101      	adds	r1, #1
 80094ba:	105b      	asrs	r3, r3, #1
 80094bc:	e7ef      	b.n	800949e <__gethex+0x132>
 80094be:	f100 0a14 	add.w	sl, r0, #20
 80094c2:	2300      	movs	r3, #0
 80094c4:	4655      	mov	r5, sl
 80094c6:	469b      	mov	fp, r3
 80094c8:	45b1      	cmp	r9, r6
 80094ca:	d337      	bcc.n	800953c <__gethex+0x1d0>
 80094cc:	f845 bb04 	str.w	fp, [r5], #4
 80094d0:	eba5 050a 	sub.w	r5, r5, sl
 80094d4:	10ad      	asrs	r5, r5, #2
 80094d6:	6125      	str	r5, [r4, #16]
 80094d8:	4658      	mov	r0, fp
 80094da:	f7fd fe83 	bl	80071e4 <__hi0bits>
 80094de:	016d      	lsls	r5, r5, #5
 80094e0:	f8d8 6000 	ldr.w	r6, [r8]
 80094e4:	1a2d      	subs	r5, r5, r0
 80094e6:	42b5      	cmp	r5, r6
 80094e8:	dd54      	ble.n	8009594 <__gethex+0x228>
 80094ea:	1bad      	subs	r5, r5, r6
 80094ec:	4629      	mov	r1, r5
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7fe fa17 	bl	8007922 <__any_on>
 80094f4:	4681      	mov	r9, r0
 80094f6:	b178      	cbz	r0, 8009518 <__gethex+0x1ac>
 80094f8:	1e6b      	subs	r3, r5, #1
 80094fa:	1159      	asrs	r1, r3, #5
 80094fc:	f003 021f 	and.w	r2, r3, #31
 8009500:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009504:	f04f 0901 	mov.w	r9, #1
 8009508:	fa09 f202 	lsl.w	r2, r9, r2
 800950c:	420a      	tst	r2, r1
 800950e:	d003      	beq.n	8009518 <__gethex+0x1ac>
 8009510:	454b      	cmp	r3, r9
 8009512:	dc36      	bgt.n	8009582 <__gethex+0x216>
 8009514:	f04f 0902 	mov.w	r9, #2
 8009518:	4629      	mov	r1, r5
 800951a:	4620      	mov	r0, r4
 800951c:	f7ff febe 	bl	800929c <rshift>
 8009520:	442f      	add	r7, r5
 8009522:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009526:	42bb      	cmp	r3, r7
 8009528:	da42      	bge.n	80095b0 <__gethex+0x244>
 800952a:	9801      	ldr	r0, [sp, #4]
 800952c:	4621      	mov	r1, r4
 800952e:	f7fd fda7 	bl	8007080 <_Bfree>
 8009532:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009534:	2300      	movs	r3, #0
 8009536:	6013      	str	r3, [r2, #0]
 8009538:	25a3      	movs	r5, #163	@ 0xa3
 800953a:	e793      	b.n	8009464 <__gethex+0xf8>
 800953c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009540:	2a2e      	cmp	r2, #46	@ 0x2e
 8009542:	d012      	beq.n	800956a <__gethex+0x1fe>
 8009544:	2b20      	cmp	r3, #32
 8009546:	d104      	bne.n	8009552 <__gethex+0x1e6>
 8009548:	f845 bb04 	str.w	fp, [r5], #4
 800954c:	f04f 0b00 	mov.w	fp, #0
 8009550:	465b      	mov	r3, fp
 8009552:	7830      	ldrb	r0, [r6, #0]
 8009554:	9303      	str	r3, [sp, #12]
 8009556:	f7ff fef3 	bl	8009340 <__hexdig_fun>
 800955a:	9b03      	ldr	r3, [sp, #12]
 800955c:	f000 000f 	and.w	r0, r0, #15
 8009560:	4098      	lsls	r0, r3
 8009562:	ea4b 0b00 	orr.w	fp, fp, r0
 8009566:	3304      	adds	r3, #4
 8009568:	e7ae      	b.n	80094c8 <__gethex+0x15c>
 800956a:	45b1      	cmp	r9, r6
 800956c:	d8ea      	bhi.n	8009544 <__gethex+0x1d8>
 800956e:	492b      	ldr	r1, [pc, #172]	@ (800961c <__gethex+0x2b0>)
 8009570:	9303      	str	r3, [sp, #12]
 8009572:	2201      	movs	r2, #1
 8009574:	4630      	mov	r0, r6
 8009576:	f7ff fe24 	bl	80091c2 <strncmp>
 800957a:	9b03      	ldr	r3, [sp, #12]
 800957c:	2800      	cmp	r0, #0
 800957e:	d1e1      	bne.n	8009544 <__gethex+0x1d8>
 8009580:	e7a2      	b.n	80094c8 <__gethex+0x15c>
 8009582:	1ea9      	subs	r1, r5, #2
 8009584:	4620      	mov	r0, r4
 8009586:	f7fe f9cc 	bl	8007922 <__any_on>
 800958a:	2800      	cmp	r0, #0
 800958c:	d0c2      	beq.n	8009514 <__gethex+0x1a8>
 800958e:	f04f 0903 	mov.w	r9, #3
 8009592:	e7c1      	b.n	8009518 <__gethex+0x1ac>
 8009594:	da09      	bge.n	80095aa <__gethex+0x23e>
 8009596:	1b75      	subs	r5, r6, r5
 8009598:	4621      	mov	r1, r4
 800959a:	9801      	ldr	r0, [sp, #4]
 800959c:	462a      	mov	r2, r5
 800959e:	f7fd ff87 	bl	80074b0 <__lshift>
 80095a2:	1b7f      	subs	r7, r7, r5
 80095a4:	4604      	mov	r4, r0
 80095a6:	f100 0a14 	add.w	sl, r0, #20
 80095aa:	f04f 0900 	mov.w	r9, #0
 80095ae:	e7b8      	b.n	8009522 <__gethex+0x1b6>
 80095b0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80095b4:	42bd      	cmp	r5, r7
 80095b6:	dd6f      	ble.n	8009698 <__gethex+0x32c>
 80095b8:	1bed      	subs	r5, r5, r7
 80095ba:	42ae      	cmp	r6, r5
 80095bc:	dc34      	bgt.n	8009628 <__gethex+0x2bc>
 80095be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d022      	beq.n	800960c <__gethex+0x2a0>
 80095c6:	2b03      	cmp	r3, #3
 80095c8:	d024      	beq.n	8009614 <__gethex+0x2a8>
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d115      	bne.n	80095fa <__gethex+0x28e>
 80095ce:	42ae      	cmp	r6, r5
 80095d0:	d113      	bne.n	80095fa <__gethex+0x28e>
 80095d2:	2e01      	cmp	r6, #1
 80095d4:	d10b      	bne.n	80095ee <__gethex+0x282>
 80095d6:	9a02      	ldr	r2, [sp, #8]
 80095d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	2301      	movs	r3, #1
 80095e0:	6123      	str	r3, [r4, #16]
 80095e2:	f8ca 3000 	str.w	r3, [sl]
 80095e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80095e8:	2562      	movs	r5, #98	@ 0x62
 80095ea:	601c      	str	r4, [r3, #0]
 80095ec:	e73a      	b.n	8009464 <__gethex+0xf8>
 80095ee:	1e71      	subs	r1, r6, #1
 80095f0:	4620      	mov	r0, r4
 80095f2:	f7fe f996 	bl	8007922 <__any_on>
 80095f6:	2800      	cmp	r0, #0
 80095f8:	d1ed      	bne.n	80095d6 <__gethex+0x26a>
 80095fa:	9801      	ldr	r0, [sp, #4]
 80095fc:	4621      	mov	r1, r4
 80095fe:	f7fd fd3f 	bl	8007080 <_Bfree>
 8009602:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009604:	2300      	movs	r3, #0
 8009606:	6013      	str	r3, [r2, #0]
 8009608:	2550      	movs	r5, #80	@ 0x50
 800960a:	e72b      	b.n	8009464 <__gethex+0xf8>
 800960c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1f3      	bne.n	80095fa <__gethex+0x28e>
 8009612:	e7e0      	b.n	80095d6 <__gethex+0x26a>
 8009614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1dd      	bne.n	80095d6 <__gethex+0x26a>
 800961a:	e7ee      	b.n	80095fa <__gethex+0x28e>
 800961c:	0800a420 	.word	0x0800a420
 8009620:	0800a2b3 	.word	0x0800a2b3
 8009624:	0800a5e9 	.word	0x0800a5e9
 8009628:	1e6f      	subs	r7, r5, #1
 800962a:	f1b9 0f00 	cmp.w	r9, #0
 800962e:	d130      	bne.n	8009692 <__gethex+0x326>
 8009630:	b127      	cbz	r7, 800963c <__gethex+0x2d0>
 8009632:	4639      	mov	r1, r7
 8009634:	4620      	mov	r0, r4
 8009636:	f7fe f974 	bl	8007922 <__any_on>
 800963a:	4681      	mov	r9, r0
 800963c:	117a      	asrs	r2, r7, #5
 800963e:	2301      	movs	r3, #1
 8009640:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009644:	f007 071f 	and.w	r7, r7, #31
 8009648:	40bb      	lsls	r3, r7
 800964a:	4213      	tst	r3, r2
 800964c:	4629      	mov	r1, r5
 800964e:	4620      	mov	r0, r4
 8009650:	bf18      	it	ne
 8009652:	f049 0902 	orrne.w	r9, r9, #2
 8009656:	f7ff fe21 	bl	800929c <rshift>
 800965a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800965e:	1b76      	subs	r6, r6, r5
 8009660:	2502      	movs	r5, #2
 8009662:	f1b9 0f00 	cmp.w	r9, #0
 8009666:	d047      	beq.n	80096f8 <__gethex+0x38c>
 8009668:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800966c:	2b02      	cmp	r3, #2
 800966e:	d015      	beq.n	800969c <__gethex+0x330>
 8009670:	2b03      	cmp	r3, #3
 8009672:	d017      	beq.n	80096a4 <__gethex+0x338>
 8009674:	2b01      	cmp	r3, #1
 8009676:	d109      	bne.n	800968c <__gethex+0x320>
 8009678:	f019 0f02 	tst.w	r9, #2
 800967c:	d006      	beq.n	800968c <__gethex+0x320>
 800967e:	f8da 3000 	ldr.w	r3, [sl]
 8009682:	ea49 0903 	orr.w	r9, r9, r3
 8009686:	f019 0f01 	tst.w	r9, #1
 800968a:	d10e      	bne.n	80096aa <__gethex+0x33e>
 800968c:	f045 0510 	orr.w	r5, r5, #16
 8009690:	e032      	b.n	80096f8 <__gethex+0x38c>
 8009692:	f04f 0901 	mov.w	r9, #1
 8009696:	e7d1      	b.n	800963c <__gethex+0x2d0>
 8009698:	2501      	movs	r5, #1
 800969a:	e7e2      	b.n	8009662 <__gethex+0x2f6>
 800969c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800969e:	f1c3 0301 	rsb	r3, r3, #1
 80096a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80096a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0f0      	beq.n	800968c <__gethex+0x320>
 80096aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096ae:	f104 0314 	add.w	r3, r4, #20
 80096b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80096b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80096ba:	f04f 0c00 	mov.w	ip, #0
 80096be:	4618      	mov	r0, r3
 80096c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80096c8:	d01b      	beq.n	8009702 <__gethex+0x396>
 80096ca:	3201      	adds	r2, #1
 80096cc:	6002      	str	r2, [r0, #0]
 80096ce:	2d02      	cmp	r5, #2
 80096d0:	f104 0314 	add.w	r3, r4, #20
 80096d4:	d13c      	bne.n	8009750 <__gethex+0x3e4>
 80096d6:	f8d8 2000 	ldr.w	r2, [r8]
 80096da:	3a01      	subs	r2, #1
 80096dc:	42b2      	cmp	r2, r6
 80096de:	d109      	bne.n	80096f4 <__gethex+0x388>
 80096e0:	1171      	asrs	r1, r6, #5
 80096e2:	2201      	movs	r2, #1
 80096e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80096e8:	f006 061f 	and.w	r6, r6, #31
 80096ec:	fa02 f606 	lsl.w	r6, r2, r6
 80096f0:	421e      	tst	r6, r3
 80096f2:	d13a      	bne.n	800976a <__gethex+0x3fe>
 80096f4:	f045 0520 	orr.w	r5, r5, #32
 80096f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096fa:	601c      	str	r4, [r3, #0]
 80096fc:	9b02      	ldr	r3, [sp, #8]
 80096fe:	601f      	str	r7, [r3, #0]
 8009700:	e6b0      	b.n	8009464 <__gethex+0xf8>
 8009702:	4299      	cmp	r1, r3
 8009704:	f843 cc04 	str.w	ip, [r3, #-4]
 8009708:	d8d9      	bhi.n	80096be <__gethex+0x352>
 800970a:	68a3      	ldr	r3, [r4, #8]
 800970c:	459b      	cmp	fp, r3
 800970e:	db17      	blt.n	8009740 <__gethex+0x3d4>
 8009710:	6861      	ldr	r1, [r4, #4]
 8009712:	9801      	ldr	r0, [sp, #4]
 8009714:	3101      	adds	r1, #1
 8009716:	f7fd fc73 	bl	8007000 <_Balloc>
 800971a:	4681      	mov	r9, r0
 800971c:	b918      	cbnz	r0, 8009726 <__gethex+0x3ba>
 800971e:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <__gethex+0x41c>)
 8009720:	4602      	mov	r2, r0
 8009722:	2184      	movs	r1, #132	@ 0x84
 8009724:	e6c5      	b.n	80094b2 <__gethex+0x146>
 8009726:	6922      	ldr	r2, [r4, #16]
 8009728:	3202      	adds	r2, #2
 800972a:	f104 010c 	add.w	r1, r4, #12
 800972e:	0092      	lsls	r2, r2, #2
 8009730:	300c      	adds	r0, #12
 8009732:	f7ff fd69 	bl	8009208 <memcpy>
 8009736:	4621      	mov	r1, r4
 8009738:	9801      	ldr	r0, [sp, #4]
 800973a:	f7fd fca1 	bl	8007080 <_Bfree>
 800973e:	464c      	mov	r4, r9
 8009740:	6923      	ldr	r3, [r4, #16]
 8009742:	1c5a      	adds	r2, r3, #1
 8009744:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009748:	6122      	str	r2, [r4, #16]
 800974a:	2201      	movs	r2, #1
 800974c:	615a      	str	r2, [r3, #20]
 800974e:	e7be      	b.n	80096ce <__gethex+0x362>
 8009750:	6922      	ldr	r2, [r4, #16]
 8009752:	455a      	cmp	r2, fp
 8009754:	dd0b      	ble.n	800976e <__gethex+0x402>
 8009756:	2101      	movs	r1, #1
 8009758:	4620      	mov	r0, r4
 800975a:	f7ff fd9f 	bl	800929c <rshift>
 800975e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009762:	3701      	adds	r7, #1
 8009764:	42bb      	cmp	r3, r7
 8009766:	f6ff aee0 	blt.w	800952a <__gethex+0x1be>
 800976a:	2501      	movs	r5, #1
 800976c:	e7c2      	b.n	80096f4 <__gethex+0x388>
 800976e:	f016 061f 	ands.w	r6, r6, #31
 8009772:	d0fa      	beq.n	800976a <__gethex+0x3fe>
 8009774:	4453      	add	r3, sl
 8009776:	f1c6 0620 	rsb	r6, r6, #32
 800977a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800977e:	f7fd fd31 	bl	80071e4 <__hi0bits>
 8009782:	42b0      	cmp	r0, r6
 8009784:	dbe7      	blt.n	8009756 <__gethex+0x3ea>
 8009786:	e7f0      	b.n	800976a <__gethex+0x3fe>
 8009788:	0800a2b3 	.word	0x0800a2b3

0800978c <L_shift>:
 800978c:	f1c2 0208 	rsb	r2, r2, #8
 8009790:	0092      	lsls	r2, r2, #2
 8009792:	b570      	push	{r4, r5, r6, lr}
 8009794:	f1c2 0620 	rsb	r6, r2, #32
 8009798:	6843      	ldr	r3, [r0, #4]
 800979a:	6804      	ldr	r4, [r0, #0]
 800979c:	fa03 f506 	lsl.w	r5, r3, r6
 80097a0:	432c      	orrs	r4, r5
 80097a2:	40d3      	lsrs	r3, r2
 80097a4:	6004      	str	r4, [r0, #0]
 80097a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80097aa:	4288      	cmp	r0, r1
 80097ac:	d3f4      	bcc.n	8009798 <L_shift+0xc>
 80097ae:	bd70      	pop	{r4, r5, r6, pc}

080097b0 <__match>:
 80097b0:	b530      	push	{r4, r5, lr}
 80097b2:	6803      	ldr	r3, [r0, #0]
 80097b4:	3301      	adds	r3, #1
 80097b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097ba:	b914      	cbnz	r4, 80097c2 <__match+0x12>
 80097bc:	6003      	str	r3, [r0, #0]
 80097be:	2001      	movs	r0, #1
 80097c0:	bd30      	pop	{r4, r5, pc}
 80097c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80097ca:	2d19      	cmp	r5, #25
 80097cc:	bf98      	it	ls
 80097ce:	3220      	addls	r2, #32
 80097d0:	42a2      	cmp	r2, r4
 80097d2:	d0f0      	beq.n	80097b6 <__match+0x6>
 80097d4:	2000      	movs	r0, #0
 80097d6:	e7f3      	b.n	80097c0 <__match+0x10>

080097d8 <__hexnan>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	680b      	ldr	r3, [r1, #0]
 80097de:	6801      	ldr	r1, [r0, #0]
 80097e0:	115e      	asrs	r6, r3, #5
 80097e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097e6:	f013 031f 	ands.w	r3, r3, #31
 80097ea:	b087      	sub	sp, #28
 80097ec:	bf18      	it	ne
 80097ee:	3604      	addne	r6, #4
 80097f0:	2500      	movs	r5, #0
 80097f2:	1f37      	subs	r7, r6, #4
 80097f4:	4682      	mov	sl, r0
 80097f6:	4690      	mov	r8, r2
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80097fe:	46b9      	mov	r9, r7
 8009800:	463c      	mov	r4, r7
 8009802:	9502      	str	r5, [sp, #8]
 8009804:	46ab      	mov	fp, r5
 8009806:	784a      	ldrb	r2, [r1, #1]
 8009808:	1c4b      	adds	r3, r1, #1
 800980a:	9303      	str	r3, [sp, #12]
 800980c:	b342      	cbz	r2, 8009860 <__hexnan+0x88>
 800980e:	4610      	mov	r0, r2
 8009810:	9105      	str	r1, [sp, #20]
 8009812:	9204      	str	r2, [sp, #16]
 8009814:	f7ff fd94 	bl	8009340 <__hexdig_fun>
 8009818:	2800      	cmp	r0, #0
 800981a:	d151      	bne.n	80098c0 <__hexnan+0xe8>
 800981c:	9a04      	ldr	r2, [sp, #16]
 800981e:	9905      	ldr	r1, [sp, #20]
 8009820:	2a20      	cmp	r2, #32
 8009822:	d818      	bhi.n	8009856 <__hexnan+0x7e>
 8009824:	9b02      	ldr	r3, [sp, #8]
 8009826:	459b      	cmp	fp, r3
 8009828:	dd13      	ble.n	8009852 <__hexnan+0x7a>
 800982a:	454c      	cmp	r4, r9
 800982c:	d206      	bcs.n	800983c <__hexnan+0x64>
 800982e:	2d07      	cmp	r5, #7
 8009830:	dc04      	bgt.n	800983c <__hexnan+0x64>
 8009832:	462a      	mov	r2, r5
 8009834:	4649      	mov	r1, r9
 8009836:	4620      	mov	r0, r4
 8009838:	f7ff ffa8 	bl	800978c <L_shift>
 800983c:	4544      	cmp	r4, r8
 800983e:	d952      	bls.n	80098e6 <__hexnan+0x10e>
 8009840:	2300      	movs	r3, #0
 8009842:	f1a4 0904 	sub.w	r9, r4, #4
 8009846:	f844 3c04 	str.w	r3, [r4, #-4]
 800984a:	f8cd b008 	str.w	fp, [sp, #8]
 800984e:	464c      	mov	r4, r9
 8009850:	461d      	mov	r5, r3
 8009852:	9903      	ldr	r1, [sp, #12]
 8009854:	e7d7      	b.n	8009806 <__hexnan+0x2e>
 8009856:	2a29      	cmp	r2, #41	@ 0x29
 8009858:	d157      	bne.n	800990a <__hexnan+0x132>
 800985a:	3102      	adds	r1, #2
 800985c:	f8ca 1000 	str.w	r1, [sl]
 8009860:	f1bb 0f00 	cmp.w	fp, #0
 8009864:	d051      	beq.n	800990a <__hexnan+0x132>
 8009866:	454c      	cmp	r4, r9
 8009868:	d206      	bcs.n	8009878 <__hexnan+0xa0>
 800986a:	2d07      	cmp	r5, #7
 800986c:	dc04      	bgt.n	8009878 <__hexnan+0xa0>
 800986e:	462a      	mov	r2, r5
 8009870:	4649      	mov	r1, r9
 8009872:	4620      	mov	r0, r4
 8009874:	f7ff ff8a 	bl	800978c <L_shift>
 8009878:	4544      	cmp	r4, r8
 800987a:	d936      	bls.n	80098ea <__hexnan+0x112>
 800987c:	f1a8 0204 	sub.w	r2, r8, #4
 8009880:	4623      	mov	r3, r4
 8009882:	f853 1b04 	ldr.w	r1, [r3], #4
 8009886:	f842 1f04 	str.w	r1, [r2, #4]!
 800988a:	429f      	cmp	r7, r3
 800988c:	d2f9      	bcs.n	8009882 <__hexnan+0xaa>
 800988e:	1b3b      	subs	r3, r7, r4
 8009890:	f023 0303 	bic.w	r3, r3, #3
 8009894:	3304      	adds	r3, #4
 8009896:	3401      	adds	r4, #1
 8009898:	3e03      	subs	r6, #3
 800989a:	42b4      	cmp	r4, r6
 800989c:	bf88      	it	hi
 800989e:	2304      	movhi	r3, #4
 80098a0:	4443      	add	r3, r8
 80098a2:	2200      	movs	r2, #0
 80098a4:	f843 2b04 	str.w	r2, [r3], #4
 80098a8:	429f      	cmp	r7, r3
 80098aa:	d2fb      	bcs.n	80098a4 <__hexnan+0xcc>
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	b91b      	cbnz	r3, 80098b8 <__hexnan+0xe0>
 80098b0:	4547      	cmp	r7, r8
 80098b2:	d128      	bne.n	8009906 <__hexnan+0x12e>
 80098b4:	2301      	movs	r3, #1
 80098b6:	603b      	str	r3, [r7, #0]
 80098b8:	2005      	movs	r0, #5
 80098ba:	b007      	add	sp, #28
 80098bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c0:	3501      	adds	r5, #1
 80098c2:	2d08      	cmp	r5, #8
 80098c4:	f10b 0b01 	add.w	fp, fp, #1
 80098c8:	dd06      	ble.n	80098d8 <__hexnan+0x100>
 80098ca:	4544      	cmp	r4, r8
 80098cc:	d9c1      	bls.n	8009852 <__hexnan+0x7a>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80098d4:	2501      	movs	r5, #1
 80098d6:	3c04      	subs	r4, #4
 80098d8:	6822      	ldr	r2, [r4, #0]
 80098da:	f000 000f 	and.w	r0, r0, #15
 80098de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098e2:	6020      	str	r0, [r4, #0]
 80098e4:	e7b5      	b.n	8009852 <__hexnan+0x7a>
 80098e6:	2508      	movs	r5, #8
 80098e8:	e7b3      	b.n	8009852 <__hexnan+0x7a>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d0dd      	beq.n	80098ac <__hexnan+0xd4>
 80098f0:	f1c3 0320 	rsb	r3, r3, #32
 80098f4:	f04f 32ff 	mov.w	r2, #4294967295
 80098f8:	40da      	lsrs	r2, r3
 80098fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098fe:	4013      	ands	r3, r2
 8009900:	f846 3c04 	str.w	r3, [r6, #-4]
 8009904:	e7d2      	b.n	80098ac <__hexnan+0xd4>
 8009906:	3f04      	subs	r7, #4
 8009908:	e7d0      	b.n	80098ac <__hexnan+0xd4>
 800990a:	2004      	movs	r0, #4
 800990c:	e7d5      	b.n	80098ba <__hexnan+0xe2>

0800990e <__ascii_mbtowc>:
 800990e:	b082      	sub	sp, #8
 8009910:	b901      	cbnz	r1, 8009914 <__ascii_mbtowc+0x6>
 8009912:	a901      	add	r1, sp, #4
 8009914:	b142      	cbz	r2, 8009928 <__ascii_mbtowc+0x1a>
 8009916:	b14b      	cbz	r3, 800992c <__ascii_mbtowc+0x1e>
 8009918:	7813      	ldrb	r3, [r2, #0]
 800991a:	600b      	str	r3, [r1, #0]
 800991c:	7812      	ldrb	r2, [r2, #0]
 800991e:	1e10      	subs	r0, r2, #0
 8009920:	bf18      	it	ne
 8009922:	2001      	movne	r0, #1
 8009924:	b002      	add	sp, #8
 8009926:	4770      	bx	lr
 8009928:	4610      	mov	r0, r2
 800992a:	e7fb      	b.n	8009924 <__ascii_mbtowc+0x16>
 800992c:	f06f 0001 	mvn.w	r0, #1
 8009930:	e7f8      	b.n	8009924 <__ascii_mbtowc+0x16>

08009932 <_realloc_r>:
 8009932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009936:	4680      	mov	r8, r0
 8009938:	4615      	mov	r5, r2
 800993a:	460c      	mov	r4, r1
 800993c:	b921      	cbnz	r1, 8009948 <_realloc_r+0x16>
 800993e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009942:	4611      	mov	r1, r2
 8009944:	f7fd bad0 	b.w	8006ee8 <_malloc_r>
 8009948:	b92a      	cbnz	r2, 8009956 <_realloc_r+0x24>
 800994a:	f7fd fa59 	bl	8006e00 <_free_r>
 800994e:	2400      	movs	r4, #0
 8009950:	4620      	mov	r0, r4
 8009952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009956:	f000 f8b2 	bl	8009abe <_malloc_usable_size_r>
 800995a:	4285      	cmp	r5, r0
 800995c:	4606      	mov	r6, r0
 800995e:	d802      	bhi.n	8009966 <_realloc_r+0x34>
 8009960:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009964:	d8f4      	bhi.n	8009950 <_realloc_r+0x1e>
 8009966:	4629      	mov	r1, r5
 8009968:	4640      	mov	r0, r8
 800996a:	f7fd fabd 	bl	8006ee8 <_malloc_r>
 800996e:	4607      	mov	r7, r0
 8009970:	2800      	cmp	r0, #0
 8009972:	d0ec      	beq.n	800994e <_realloc_r+0x1c>
 8009974:	42b5      	cmp	r5, r6
 8009976:	462a      	mov	r2, r5
 8009978:	4621      	mov	r1, r4
 800997a:	bf28      	it	cs
 800997c:	4632      	movcs	r2, r6
 800997e:	f7ff fc43 	bl	8009208 <memcpy>
 8009982:	4621      	mov	r1, r4
 8009984:	4640      	mov	r0, r8
 8009986:	f7fd fa3b 	bl	8006e00 <_free_r>
 800998a:	463c      	mov	r4, r7
 800998c:	e7e0      	b.n	8009950 <_realloc_r+0x1e>
	...

08009990 <_strtoul_l.constprop.0>:
 8009990:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009994:	4e34      	ldr	r6, [pc, #208]	@ (8009a68 <_strtoul_l.constprop.0+0xd8>)
 8009996:	4686      	mov	lr, r0
 8009998:	460d      	mov	r5, r1
 800999a:	4628      	mov	r0, r5
 800999c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80099a0:	5d37      	ldrb	r7, [r6, r4]
 80099a2:	f017 0708 	ands.w	r7, r7, #8
 80099a6:	d1f8      	bne.n	800999a <_strtoul_l.constprop.0+0xa>
 80099a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80099aa:	d12f      	bne.n	8009a0c <_strtoul_l.constprop.0+0x7c>
 80099ac:	782c      	ldrb	r4, [r5, #0]
 80099ae:	2701      	movs	r7, #1
 80099b0:	1c85      	adds	r5, r0, #2
 80099b2:	f033 0010 	bics.w	r0, r3, #16
 80099b6:	d109      	bne.n	80099cc <_strtoul_l.constprop.0+0x3c>
 80099b8:	2c30      	cmp	r4, #48	@ 0x30
 80099ba:	d12c      	bne.n	8009a16 <_strtoul_l.constprop.0+0x86>
 80099bc:	7828      	ldrb	r0, [r5, #0]
 80099be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80099c2:	2858      	cmp	r0, #88	@ 0x58
 80099c4:	d127      	bne.n	8009a16 <_strtoul_l.constprop.0+0x86>
 80099c6:	786c      	ldrb	r4, [r5, #1]
 80099c8:	2310      	movs	r3, #16
 80099ca:	3502      	adds	r5, #2
 80099cc:	f04f 38ff 	mov.w	r8, #4294967295
 80099d0:	2600      	movs	r6, #0
 80099d2:	fbb8 f8f3 	udiv	r8, r8, r3
 80099d6:	fb03 f908 	mul.w	r9, r3, r8
 80099da:	ea6f 0909 	mvn.w	r9, r9
 80099de:	4630      	mov	r0, r6
 80099e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80099e4:	f1bc 0f09 	cmp.w	ip, #9
 80099e8:	d81c      	bhi.n	8009a24 <_strtoul_l.constprop.0+0x94>
 80099ea:	4664      	mov	r4, ip
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	dd2a      	ble.n	8009a46 <_strtoul_l.constprop.0+0xb6>
 80099f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80099f4:	d007      	beq.n	8009a06 <_strtoul_l.constprop.0+0x76>
 80099f6:	4580      	cmp	r8, r0
 80099f8:	d322      	bcc.n	8009a40 <_strtoul_l.constprop.0+0xb0>
 80099fa:	d101      	bne.n	8009a00 <_strtoul_l.constprop.0+0x70>
 80099fc:	45a1      	cmp	r9, r4
 80099fe:	db1f      	blt.n	8009a40 <_strtoul_l.constprop.0+0xb0>
 8009a00:	fb00 4003 	mla	r0, r0, r3, r4
 8009a04:	2601      	movs	r6, #1
 8009a06:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a0a:	e7e9      	b.n	80099e0 <_strtoul_l.constprop.0+0x50>
 8009a0c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009a0e:	bf04      	itt	eq
 8009a10:	782c      	ldrbeq	r4, [r5, #0]
 8009a12:	1c85      	addeq	r5, r0, #2
 8009a14:	e7cd      	b.n	80099b2 <_strtoul_l.constprop.0+0x22>
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d1d8      	bne.n	80099cc <_strtoul_l.constprop.0+0x3c>
 8009a1a:	2c30      	cmp	r4, #48	@ 0x30
 8009a1c:	bf0c      	ite	eq
 8009a1e:	2308      	moveq	r3, #8
 8009a20:	230a      	movne	r3, #10
 8009a22:	e7d3      	b.n	80099cc <_strtoul_l.constprop.0+0x3c>
 8009a24:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8009a28:	f1bc 0f19 	cmp.w	ip, #25
 8009a2c:	d801      	bhi.n	8009a32 <_strtoul_l.constprop.0+0xa2>
 8009a2e:	3c37      	subs	r4, #55	@ 0x37
 8009a30:	e7dc      	b.n	80099ec <_strtoul_l.constprop.0+0x5c>
 8009a32:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8009a36:	f1bc 0f19 	cmp.w	ip, #25
 8009a3a:	d804      	bhi.n	8009a46 <_strtoul_l.constprop.0+0xb6>
 8009a3c:	3c57      	subs	r4, #87	@ 0x57
 8009a3e:	e7d5      	b.n	80099ec <_strtoul_l.constprop.0+0x5c>
 8009a40:	f04f 36ff 	mov.w	r6, #4294967295
 8009a44:	e7df      	b.n	8009a06 <_strtoul_l.constprop.0+0x76>
 8009a46:	1c73      	adds	r3, r6, #1
 8009a48:	d106      	bne.n	8009a58 <_strtoul_l.constprop.0+0xc8>
 8009a4a:	2322      	movs	r3, #34	@ 0x22
 8009a4c:	f8ce 3000 	str.w	r3, [lr]
 8009a50:	4630      	mov	r0, r6
 8009a52:	b932      	cbnz	r2, 8009a62 <_strtoul_l.constprop.0+0xd2>
 8009a54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a58:	b107      	cbz	r7, 8009a5c <_strtoul_l.constprop.0+0xcc>
 8009a5a:	4240      	negs	r0, r0
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	d0f9      	beq.n	8009a54 <_strtoul_l.constprop.0+0xc4>
 8009a60:	b106      	cbz	r6, 8009a64 <_strtoul_l.constprop.0+0xd4>
 8009a62:	1e69      	subs	r1, r5, #1
 8009a64:	6011      	str	r1, [r2, #0]
 8009a66:	e7f5      	b.n	8009a54 <_strtoul_l.constprop.0+0xc4>
 8009a68:	0800a479 	.word	0x0800a479

08009a6c <_strtoul_r>:
 8009a6c:	f7ff bf90 	b.w	8009990 <_strtoul_l.constprop.0>

08009a70 <__ascii_wctomb>:
 8009a70:	4603      	mov	r3, r0
 8009a72:	4608      	mov	r0, r1
 8009a74:	b141      	cbz	r1, 8009a88 <__ascii_wctomb+0x18>
 8009a76:	2aff      	cmp	r2, #255	@ 0xff
 8009a78:	d904      	bls.n	8009a84 <__ascii_wctomb+0x14>
 8009a7a:	228a      	movs	r2, #138	@ 0x8a
 8009a7c:	601a      	str	r2, [r3, #0]
 8009a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a82:	4770      	bx	lr
 8009a84:	700a      	strb	r2, [r1, #0]
 8009a86:	2001      	movs	r0, #1
 8009a88:	4770      	bx	lr
	...

08009a8c <fiprintf>:
 8009a8c:	b40e      	push	{r1, r2, r3}
 8009a8e:	b503      	push	{r0, r1, lr}
 8009a90:	4601      	mov	r1, r0
 8009a92:	ab03      	add	r3, sp, #12
 8009a94:	4805      	ldr	r0, [pc, #20]	@ (8009aac <fiprintf+0x20>)
 8009a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	9301      	str	r3, [sp, #4]
 8009a9e:	f000 f83f 	bl	8009b20 <_vfiprintf_r>
 8009aa2:	b002      	add	sp, #8
 8009aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa8:	b003      	add	sp, #12
 8009aaa:	4770      	bx	lr
 8009aac:	20000018 	.word	0x20000018

08009ab0 <abort>:
 8009ab0:	b508      	push	{r3, lr}
 8009ab2:	2006      	movs	r0, #6
 8009ab4:	f000 fa08 	bl	8009ec8 <raise>
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f7f8 f929 	bl	8001d10 <_exit>

08009abe <_malloc_usable_size_r>:
 8009abe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ac2:	1f18      	subs	r0, r3, #4
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	bfbc      	itt	lt
 8009ac8:	580b      	ldrlt	r3, [r1, r0]
 8009aca:	18c0      	addlt	r0, r0, r3
 8009acc:	4770      	bx	lr

08009ace <__sfputc_r>:
 8009ace:	6893      	ldr	r3, [r2, #8]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	b410      	push	{r4}
 8009ad6:	6093      	str	r3, [r2, #8]
 8009ad8:	da08      	bge.n	8009aec <__sfputc_r+0x1e>
 8009ada:	6994      	ldr	r4, [r2, #24]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	db01      	blt.n	8009ae4 <__sfputc_r+0x16>
 8009ae0:	290a      	cmp	r1, #10
 8009ae2:	d103      	bne.n	8009aec <__sfputc_r+0x1e>
 8009ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae8:	f000 b932 	b.w	8009d50 <__swbuf_r>
 8009aec:	6813      	ldr	r3, [r2, #0]
 8009aee:	1c58      	adds	r0, r3, #1
 8009af0:	6010      	str	r0, [r2, #0]
 8009af2:	7019      	strb	r1, [r3, #0]
 8009af4:	4608      	mov	r0, r1
 8009af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <__sfputs_r>:
 8009afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afe:	4606      	mov	r6, r0
 8009b00:	460f      	mov	r7, r1
 8009b02:	4614      	mov	r4, r2
 8009b04:	18d5      	adds	r5, r2, r3
 8009b06:	42ac      	cmp	r4, r5
 8009b08:	d101      	bne.n	8009b0e <__sfputs_r+0x12>
 8009b0a:	2000      	movs	r0, #0
 8009b0c:	e007      	b.n	8009b1e <__sfputs_r+0x22>
 8009b0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b12:	463a      	mov	r2, r7
 8009b14:	4630      	mov	r0, r6
 8009b16:	f7ff ffda 	bl	8009ace <__sfputc_r>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	d1f3      	bne.n	8009b06 <__sfputs_r+0xa>
 8009b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b20 <_vfiprintf_r>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	460d      	mov	r5, r1
 8009b26:	b09d      	sub	sp, #116	@ 0x74
 8009b28:	4614      	mov	r4, r2
 8009b2a:	4698      	mov	r8, r3
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	b118      	cbz	r0, 8009b38 <_vfiprintf_r+0x18>
 8009b30:	6a03      	ldr	r3, [r0, #32]
 8009b32:	b90b      	cbnz	r3, 8009b38 <_vfiprintf_r+0x18>
 8009b34:	f7fc f974 	bl	8005e20 <__sinit>
 8009b38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b3a:	07d9      	lsls	r1, r3, #31
 8009b3c:	d405      	bmi.n	8009b4a <_vfiprintf_r+0x2a>
 8009b3e:	89ab      	ldrh	r3, [r5, #12]
 8009b40:	059a      	lsls	r2, r3, #22
 8009b42:	d402      	bmi.n	8009b4a <_vfiprintf_r+0x2a>
 8009b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b46:	f7fc fb04 	bl	8006152 <__retarget_lock_acquire_recursive>
 8009b4a:	89ab      	ldrh	r3, [r5, #12]
 8009b4c:	071b      	lsls	r3, r3, #28
 8009b4e:	d501      	bpl.n	8009b54 <_vfiprintf_r+0x34>
 8009b50:	692b      	ldr	r3, [r5, #16]
 8009b52:	b99b      	cbnz	r3, 8009b7c <_vfiprintf_r+0x5c>
 8009b54:	4629      	mov	r1, r5
 8009b56:	4630      	mov	r0, r6
 8009b58:	f000 f938 	bl	8009dcc <__swsetup_r>
 8009b5c:	b170      	cbz	r0, 8009b7c <_vfiprintf_r+0x5c>
 8009b5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b60:	07dc      	lsls	r4, r3, #31
 8009b62:	d504      	bpl.n	8009b6e <_vfiprintf_r+0x4e>
 8009b64:	f04f 30ff 	mov.w	r0, #4294967295
 8009b68:	b01d      	add	sp, #116	@ 0x74
 8009b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6e:	89ab      	ldrh	r3, [r5, #12]
 8009b70:	0598      	lsls	r0, r3, #22
 8009b72:	d4f7      	bmi.n	8009b64 <_vfiprintf_r+0x44>
 8009b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b76:	f7fc faed 	bl	8006154 <__retarget_lock_release_recursive>
 8009b7a:	e7f3      	b.n	8009b64 <_vfiprintf_r+0x44>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b80:	2320      	movs	r3, #32
 8009b82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b86:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b8a:	2330      	movs	r3, #48	@ 0x30
 8009b8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009d3c <_vfiprintf_r+0x21c>
 8009b90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b94:	f04f 0901 	mov.w	r9, #1
 8009b98:	4623      	mov	r3, r4
 8009b9a:	469a      	mov	sl, r3
 8009b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ba0:	b10a      	cbz	r2, 8009ba6 <_vfiprintf_r+0x86>
 8009ba2:	2a25      	cmp	r2, #37	@ 0x25
 8009ba4:	d1f9      	bne.n	8009b9a <_vfiprintf_r+0x7a>
 8009ba6:	ebba 0b04 	subs.w	fp, sl, r4
 8009baa:	d00b      	beq.n	8009bc4 <_vfiprintf_r+0xa4>
 8009bac:	465b      	mov	r3, fp
 8009bae:	4622      	mov	r2, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	4630      	mov	r0, r6
 8009bb4:	f7ff ffa2 	bl	8009afc <__sfputs_r>
 8009bb8:	3001      	adds	r0, #1
 8009bba:	f000 80a7 	beq.w	8009d0c <_vfiprintf_r+0x1ec>
 8009bbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bc0:	445a      	add	r2, fp
 8009bc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bc4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 809f 	beq.w	8009d0c <_vfiprintf_r+0x1ec>
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009bd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bd8:	f10a 0a01 	add.w	sl, sl, #1
 8009bdc:	9304      	str	r3, [sp, #16]
 8009bde:	9307      	str	r3, [sp, #28]
 8009be0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009be4:	931a      	str	r3, [sp, #104]	@ 0x68
 8009be6:	4654      	mov	r4, sl
 8009be8:	2205      	movs	r2, #5
 8009bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bee:	4853      	ldr	r0, [pc, #332]	@ (8009d3c <_vfiprintf_r+0x21c>)
 8009bf0:	f7f6 faf6 	bl	80001e0 <memchr>
 8009bf4:	9a04      	ldr	r2, [sp, #16]
 8009bf6:	b9d8      	cbnz	r0, 8009c30 <_vfiprintf_r+0x110>
 8009bf8:	06d1      	lsls	r1, r2, #27
 8009bfa:	bf44      	itt	mi
 8009bfc:	2320      	movmi	r3, #32
 8009bfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c02:	0713      	lsls	r3, r2, #28
 8009c04:	bf44      	itt	mi
 8009c06:	232b      	movmi	r3, #43	@ 0x2b
 8009c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c12:	d015      	beq.n	8009c40 <_vfiprintf_r+0x120>
 8009c14:	9a07      	ldr	r2, [sp, #28]
 8009c16:	4654      	mov	r4, sl
 8009c18:	2000      	movs	r0, #0
 8009c1a:	f04f 0c0a 	mov.w	ip, #10
 8009c1e:	4621      	mov	r1, r4
 8009c20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c24:	3b30      	subs	r3, #48	@ 0x30
 8009c26:	2b09      	cmp	r3, #9
 8009c28:	d94b      	bls.n	8009cc2 <_vfiprintf_r+0x1a2>
 8009c2a:	b1b0      	cbz	r0, 8009c5a <_vfiprintf_r+0x13a>
 8009c2c:	9207      	str	r2, [sp, #28]
 8009c2e:	e014      	b.n	8009c5a <_vfiprintf_r+0x13a>
 8009c30:	eba0 0308 	sub.w	r3, r0, r8
 8009c34:	fa09 f303 	lsl.w	r3, r9, r3
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	9304      	str	r3, [sp, #16]
 8009c3c:	46a2      	mov	sl, r4
 8009c3e:	e7d2      	b.n	8009be6 <_vfiprintf_r+0xc6>
 8009c40:	9b03      	ldr	r3, [sp, #12]
 8009c42:	1d19      	adds	r1, r3, #4
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	9103      	str	r1, [sp, #12]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	bfbb      	ittet	lt
 8009c4c:	425b      	neglt	r3, r3
 8009c4e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c52:	9307      	strge	r3, [sp, #28]
 8009c54:	9307      	strlt	r3, [sp, #28]
 8009c56:	bfb8      	it	lt
 8009c58:	9204      	strlt	r2, [sp, #16]
 8009c5a:	7823      	ldrb	r3, [r4, #0]
 8009c5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c5e:	d10a      	bne.n	8009c76 <_vfiprintf_r+0x156>
 8009c60:	7863      	ldrb	r3, [r4, #1]
 8009c62:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c64:	d132      	bne.n	8009ccc <_vfiprintf_r+0x1ac>
 8009c66:	9b03      	ldr	r3, [sp, #12]
 8009c68:	1d1a      	adds	r2, r3, #4
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	9203      	str	r2, [sp, #12]
 8009c6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c72:	3402      	adds	r4, #2
 8009c74:	9305      	str	r3, [sp, #20]
 8009c76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009d4c <_vfiprintf_r+0x22c>
 8009c7a:	7821      	ldrb	r1, [r4, #0]
 8009c7c:	2203      	movs	r2, #3
 8009c7e:	4650      	mov	r0, sl
 8009c80:	f7f6 faae 	bl	80001e0 <memchr>
 8009c84:	b138      	cbz	r0, 8009c96 <_vfiprintf_r+0x176>
 8009c86:	9b04      	ldr	r3, [sp, #16]
 8009c88:	eba0 000a 	sub.w	r0, r0, sl
 8009c8c:	2240      	movs	r2, #64	@ 0x40
 8009c8e:	4082      	lsls	r2, r0
 8009c90:	4313      	orrs	r3, r2
 8009c92:	3401      	adds	r4, #1
 8009c94:	9304      	str	r3, [sp, #16]
 8009c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c9a:	4829      	ldr	r0, [pc, #164]	@ (8009d40 <_vfiprintf_r+0x220>)
 8009c9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ca0:	2206      	movs	r2, #6
 8009ca2:	f7f6 fa9d 	bl	80001e0 <memchr>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d03f      	beq.n	8009d2a <_vfiprintf_r+0x20a>
 8009caa:	4b26      	ldr	r3, [pc, #152]	@ (8009d44 <_vfiprintf_r+0x224>)
 8009cac:	bb1b      	cbnz	r3, 8009cf6 <_vfiprintf_r+0x1d6>
 8009cae:	9b03      	ldr	r3, [sp, #12]
 8009cb0:	3307      	adds	r3, #7
 8009cb2:	f023 0307 	bic.w	r3, r3, #7
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	9303      	str	r3, [sp, #12]
 8009cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cbc:	443b      	add	r3, r7
 8009cbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc0:	e76a      	b.n	8009b98 <_vfiprintf_r+0x78>
 8009cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cc6:	460c      	mov	r4, r1
 8009cc8:	2001      	movs	r0, #1
 8009cca:	e7a8      	b.n	8009c1e <_vfiprintf_r+0xfe>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	3401      	adds	r4, #1
 8009cd0:	9305      	str	r3, [sp, #20]
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	f04f 0c0a 	mov.w	ip, #10
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cde:	3a30      	subs	r2, #48	@ 0x30
 8009ce0:	2a09      	cmp	r2, #9
 8009ce2:	d903      	bls.n	8009cec <_vfiprintf_r+0x1cc>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d0c6      	beq.n	8009c76 <_vfiprintf_r+0x156>
 8009ce8:	9105      	str	r1, [sp, #20]
 8009cea:	e7c4      	b.n	8009c76 <_vfiprintf_r+0x156>
 8009cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	e7f0      	b.n	8009cd8 <_vfiprintf_r+0x1b8>
 8009cf6:	ab03      	add	r3, sp, #12
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	4b12      	ldr	r3, [pc, #72]	@ (8009d48 <_vfiprintf_r+0x228>)
 8009cfe:	a904      	add	r1, sp, #16
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7fb fa35 	bl	8005170 <_printf_float>
 8009d06:	4607      	mov	r7, r0
 8009d08:	1c78      	adds	r0, r7, #1
 8009d0a:	d1d6      	bne.n	8009cba <_vfiprintf_r+0x19a>
 8009d0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d0e:	07d9      	lsls	r1, r3, #31
 8009d10:	d405      	bmi.n	8009d1e <_vfiprintf_r+0x1fe>
 8009d12:	89ab      	ldrh	r3, [r5, #12]
 8009d14:	059a      	lsls	r2, r3, #22
 8009d16:	d402      	bmi.n	8009d1e <_vfiprintf_r+0x1fe>
 8009d18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d1a:	f7fc fa1b 	bl	8006154 <__retarget_lock_release_recursive>
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	065b      	lsls	r3, r3, #25
 8009d22:	f53f af1f 	bmi.w	8009b64 <_vfiprintf_r+0x44>
 8009d26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d28:	e71e      	b.n	8009b68 <_vfiprintf_r+0x48>
 8009d2a:	ab03      	add	r3, sp, #12
 8009d2c:	9300      	str	r3, [sp, #0]
 8009d2e:	462a      	mov	r2, r5
 8009d30:	4b05      	ldr	r3, [pc, #20]	@ (8009d48 <_vfiprintf_r+0x228>)
 8009d32:	a904      	add	r1, sp, #16
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7fb fcb3 	bl	80056a0 <_printf_i>
 8009d3a:	e7e4      	b.n	8009d06 <_vfiprintf_r+0x1e6>
 8009d3c:	0800a579 	.word	0x0800a579
 8009d40:	0800a583 	.word	0x0800a583
 8009d44:	08005171 	.word	0x08005171
 8009d48:	08009afd 	.word	0x08009afd
 8009d4c:	0800a57f 	.word	0x0800a57f

08009d50 <__swbuf_r>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	460e      	mov	r6, r1
 8009d54:	4614      	mov	r4, r2
 8009d56:	4605      	mov	r5, r0
 8009d58:	b118      	cbz	r0, 8009d62 <__swbuf_r+0x12>
 8009d5a:	6a03      	ldr	r3, [r0, #32]
 8009d5c:	b90b      	cbnz	r3, 8009d62 <__swbuf_r+0x12>
 8009d5e:	f7fc f85f 	bl	8005e20 <__sinit>
 8009d62:	69a3      	ldr	r3, [r4, #24]
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	071a      	lsls	r2, r3, #28
 8009d6a:	d501      	bpl.n	8009d70 <__swbuf_r+0x20>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	b943      	cbnz	r3, 8009d82 <__swbuf_r+0x32>
 8009d70:	4621      	mov	r1, r4
 8009d72:	4628      	mov	r0, r5
 8009d74:	f000 f82a 	bl	8009dcc <__swsetup_r>
 8009d78:	b118      	cbz	r0, 8009d82 <__swbuf_r+0x32>
 8009d7a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d7e:	4638      	mov	r0, r7
 8009d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d82:	6823      	ldr	r3, [r4, #0]
 8009d84:	6922      	ldr	r2, [r4, #16]
 8009d86:	1a98      	subs	r0, r3, r2
 8009d88:	6963      	ldr	r3, [r4, #20]
 8009d8a:	b2f6      	uxtb	r6, r6
 8009d8c:	4283      	cmp	r3, r0
 8009d8e:	4637      	mov	r7, r6
 8009d90:	dc05      	bgt.n	8009d9e <__swbuf_r+0x4e>
 8009d92:	4621      	mov	r1, r4
 8009d94:	4628      	mov	r0, r5
 8009d96:	f7ff f95f 	bl	8009058 <_fflush_r>
 8009d9a:	2800      	cmp	r0, #0
 8009d9c:	d1ed      	bne.n	8009d7a <__swbuf_r+0x2a>
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	3b01      	subs	r3, #1
 8009da2:	60a3      	str	r3, [r4, #8]
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	6022      	str	r2, [r4, #0]
 8009daa:	701e      	strb	r6, [r3, #0]
 8009dac:	6962      	ldr	r2, [r4, #20]
 8009dae:	1c43      	adds	r3, r0, #1
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d004      	beq.n	8009dbe <__swbuf_r+0x6e>
 8009db4:	89a3      	ldrh	r3, [r4, #12]
 8009db6:	07db      	lsls	r3, r3, #31
 8009db8:	d5e1      	bpl.n	8009d7e <__swbuf_r+0x2e>
 8009dba:	2e0a      	cmp	r6, #10
 8009dbc:	d1df      	bne.n	8009d7e <__swbuf_r+0x2e>
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f7ff f949 	bl	8009058 <_fflush_r>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d0d9      	beq.n	8009d7e <__swbuf_r+0x2e>
 8009dca:	e7d6      	b.n	8009d7a <__swbuf_r+0x2a>

08009dcc <__swsetup_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4b29      	ldr	r3, [pc, #164]	@ (8009e74 <__swsetup_r+0xa8>)
 8009dd0:	4605      	mov	r5, r0
 8009dd2:	6818      	ldr	r0, [r3, #0]
 8009dd4:	460c      	mov	r4, r1
 8009dd6:	b118      	cbz	r0, 8009de0 <__swsetup_r+0x14>
 8009dd8:	6a03      	ldr	r3, [r0, #32]
 8009dda:	b90b      	cbnz	r3, 8009de0 <__swsetup_r+0x14>
 8009ddc:	f7fc f820 	bl	8005e20 <__sinit>
 8009de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009de4:	0719      	lsls	r1, r3, #28
 8009de6:	d422      	bmi.n	8009e2e <__swsetup_r+0x62>
 8009de8:	06da      	lsls	r2, r3, #27
 8009dea:	d407      	bmi.n	8009dfc <__swsetup_r+0x30>
 8009dec:	2209      	movs	r2, #9
 8009dee:	602a      	str	r2, [r5, #0]
 8009df0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009df4:	81a3      	strh	r3, [r4, #12]
 8009df6:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfa:	e033      	b.n	8009e64 <__swsetup_r+0x98>
 8009dfc:	0758      	lsls	r0, r3, #29
 8009dfe:	d512      	bpl.n	8009e26 <__swsetup_r+0x5a>
 8009e00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e02:	b141      	cbz	r1, 8009e16 <__swsetup_r+0x4a>
 8009e04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e08:	4299      	cmp	r1, r3
 8009e0a:	d002      	beq.n	8009e12 <__swsetup_r+0x46>
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	f7fc fff7 	bl	8006e00 <_free_r>
 8009e12:	2300      	movs	r3, #0
 8009e14:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e16:	89a3      	ldrh	r3, [r4, #12]
 8009e18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e1c:	81a3      	strh	r3, [r4, #12]
 8009e1e:	2300      	movs	r3, #0
 8009e20:	6063      	str	r3, [r4, #4]
 8009e22:	6923      	ldr	r3, [r4, #16]
 8009e24:	6023      	str	r3, [r4, #0]
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f043 0308 	orr.w	r3, r3, #8
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	6923      	ldr	r3, [r4, #16]
 8009e30:	b94b      	cbnz	r3, 8009e46 <__swsetup_r+0x7a>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e3c:	d003      	beq.n	8009e46 <__swsetup_r+0x7a>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f000 f883 	bl	8009f4c <__smakebuf_r>
 8009e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e4a:	f013 0201 	ands.w	r2, r3, #1
 8009e4e:	d00a      	beq.n	8009e66 <__swsetup_r+0x9a>
 8009e50:	2200      	movs	r2, #0
 8009e52:	60a2      	str	r2, [r4, #8]
 8009e54:	6962      	ldr	r2, [r4, #20]
 8009e56:	4252      	negs	r2, r2
 8009e58:	61a2      	str	r2, [r4, #24]
 8009e5a:	6922      	ldr	r2, [r4, #16]
 8009e5c:	b942      	cbnz	r2, 8009e70 <__swsetup_r+0xa4>
 8009e5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e62:	d1c5      	bne.n	8009df0 <__swsetup_r+0x24>
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	0799      	lsls	r1, r3, #30
 8009e68:	bf58      	it	pl
 8009e6a:	6962      	ldrpl	r2, [r4, #20]
 8009e6c:	60a2      	str	r2, [r4, #8]
 8009e6e:	e7f4      	b.n	8009e5a <__swsetup_r+0x8e>
 8009e70:	2000      	movs	r0, #0
 8009e72:	e7f7      	b.n	8009e64 <__swsetup_r+0x98>
 8009e74:	20000018 	.word	0x20000018

08009e78 <_raise_r>:
 8009e78:	291f      	cmp	r1, #31
 8009e7a:	b538      	push	{r3, r4, r5, lr}
 8009e7c:	4605      	mov	r5, r0
 8009e7e:	460c      	mov	r4, r1
 8009e80:	d904      	bls.n	8009e8c <_raise_r+0x14>
 8009e82:	2316      	movs	r3, #22
 8009e84:	6003      	str	r3, [r0, #0]
 8009e86:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009e8e:	b112      	cbz	r2, 8009e96 <_raise_r+0x1e>
 8009e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e94:	b94b      	cbnz	r3, 8009eaa <_raise_r+0x32>
 8009e96:	4628      	mov	r0, r5
 8009e98:	f000 f830 	bl	8009efc <_getpid_r>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4601      	mov	r1, r0
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ea6:	f000 b817 	b.w	8009ed8 <_kill_r>
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d00a      	beq.n	8009ec4 <_raise_r+0x4c>
 8009eae:	1c59      	adds	r1, r3, #1
 8009eb0:	d103      	bne.n	8009eba <_raise_r+0x42>
 8009eb2:	2316      	movs	r3, #22
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	2001      	movs	r0, #1
 8009eb8:	e7e7      	b.n	8009e8a <_raise_r+0x12>
 8009eba:	2100      	movs	r1, #0
 8009ebc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	4798      	blx	r3
 8009ec4:	2000      	movs	r0, #0
 8009ec6:	e7e0      	b.n	8009e8a <_raise_r+0x12>

08009ec8 <raise>:
 8009ec8:	4b02      	ldr	r3, [pc, #8]	@ (8009ed4 <raise+0xc>)
 8009eca:	4601      	mov	r1, r0
 8009ecc:	6818      	ldr	r0, [r3, #0]
 8009ece:	f7ff bfd3 	b.w	8009e78 <_raise_r>
 8009ed2:	bf00      	nop
 8009ed4:	20000018 	.word	0x20000018

08009ed8 <_kill_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	@ (8009ef8 <_kill_r+0x20>)
 8009edc:	2300      	movs	r3, #0
 8009ede:	4604      	mov	r4, r0
 8009ee0:	4608      	mov	r0, r1
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f7f7 ff03 	bl	8001cf0 <_kill>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	d102      	bne.n	8009ef4 <_kill_r+0x1c>
 8009eee:	682b      	ldr	r3, [r5, #0]
 8009ef0:	b103      	cbz	r3, 8009ef4 <_kill_r+0x1c>
 8009ef2:	6023      	str	r3, [r4, #0]
 8009ef4:	bd38      	pop	{r3, r4, r5, pc}
 8009ef6:	bf00      	nop
 8009ef8:	20000790 	.word	0x20000790

08009efc <_getpid_r>:
 8009efc:	f7f7 bef0 	b.w	8001ce0 <_getpid>

08009f00 <__swhatbuf_r>:
 8009f00:	b570      	push	{r4, r5, r6, lr}
 8009f02:	460c      	mov	r4, r1
 8009f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	b096      	sub	sp, #88	@ 0x58
 8009f0c:	4615      	mov	r5, r2
 8009f0e:	461e      	mov	r6, r3
 8009f10:	da0d      	bge.n	8009f2e <__swhatbuf_r+0x2e>
 8009f12:	89a3      	ldrh	r3, [r4, #12]
 8009f14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f18:	f04f 0100 	mov.w	r1, #0
 8009f1c:	bf14      	ite	ne
 8009f1e:	2340      	movne	r3, #64	@ 0x40
 8009f20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f24:	2000      	movs	r0, #0
 8009f26:	6031      	str	r1, [r6, #0]
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	b016      	add	sp, #88	@ 0x58
 8009f2c:	bd70      	pop	{r4, r5, r6, pc}
 8009f2e:	466a      	mov	r2, sp
 8009f30:	f000 f848 	bl	8009fc4 <_fstat_r>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	dbec      	blt.n	8009f12 <__swhatbuf_r+0x12>
 8009f38:	9901      	ldr	r1, [sp, #4]
 8009f3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f42:	4259      	negs	r1, r3
 8009f44:	4159      	adcs	r1, r3
 8009f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f4a:	e7eb      	b.n	8009f24 <__swhatbuf_r+0x24>

08009f4c <__smakebuf_r>:
 8009f4c:	898b      	ldrh	r3, [r1, #12]
 8009f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f50:	079d      	lsls	r5, r3, #30
 8009f52:	4606      	mov	r6, r0
 8009f54:	460c      	mov	r4, r1
 8009f56:	d507      	bpl.n	8009f68 <__smakebuf_r+0x1c>
 8009f58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	6123      	str	r3, [r4, #16]
 8009f60:	2301      	movs	r3, #1
 8009f62:	6163      	str	r3, [r4, #20]
 8009f64:	b003      	add	sp, #12
 8009f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f68:	ab01      	add	r3, sp, #4
 8009f6a:	466a      	mov	r2, sp
 8009f6c:	f7ff ffc8 	bl	8009f00 <__swhatbuf_r>
 8009f70:	9f00      	ldr	r7, [sp, #0]
 8009f72:	4605      	mov	r5, r0
 8009f74:	4639      	mov	r1, r7
 8009f76:	4630      	mov	r0, r6
 8009f78:	f7fc ffb6 	bl	8006ee8 <_malloc_r>
 8009f7c:	b948      	cbnz	r0, 8009f92 <__smakebuf_r+0x46>
 8009f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f82:	059a      	lsls	r2, r3, #22
 8009f84:	d4ee      	bmi.n	8009f64 <__smakebuf_r+0x18>
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	f043 0302 	orr.w	r3, r3, #2
 8009f8e:	81a3      	strh	r3, [r4, #12]
 8009f90:	e7e2      	b.n	8009f58 <__smakebuf_r+0xc>
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	6020      	str	r0, [r4, #0]
 8009f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	9b01      	ldr	r3, [sp, #4]
 8009f9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fa2:	b15b      	cbz	r3, 8009fbc <__smakebuf_r+0x70>
 8009fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fa8:	4630      	mov	r0, r6
 8009faa:	f000 f81d 	bl	8009fe8 <_isatty_r>
 8009fae:	b128      	cbz	r0, 8009fbc <__smakebuf_r+0x70>
 8009fb0:	89a3      	ldrh	r3, [r4, #12]
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	f043 0301 	orr.w	r3, r3, #1
 8009fba:	81a3      	strh	r3, [r4, #12]
 8009fbc:	89a3      	ldrh	r3, [r4, #12]
 8009fbe:	431d      	orrs	r5, r3
 8009fc0:	81a5      	strh	r5, [r4, #12]
 8009fc2:	e7cf      	b.n	8009f64 <__smakebuf_r+0x18>

08009fc4 <_fstat_r>:
 8009fc4:	b538      	push	{r3, r4, r5, lr}
 8009fc6:	4d07      	ldr	r5, [pc, #28]	@ (8009fe4 <_fstat_r+0x20>)
 8009fc8:	2300      	movs	r3, #0
 8009fca:	4604      	mov	r4, r0
 8009fcc:	4608      	mov	r0, r1
 8009fce:	4611      	mov	r1, r2
 8009fd0:	602b      	str	r3, [r5, #0]
 8009fd2:	f7f7 feed 	bl	8001db0 <_fstat>
 8009fd6:	1c43      	adds	r3, r0, #1
 8009fd8:	d102      	bne.n	8009fe0 <_fstat_r+0x1c>
 8009fda:	682b      	ldr	r3, [r5, #0]
 8009fdc:	b103      	cbz	r3, 8009fe0 <_fstat_r+0x1c>
 8009fde:	6023      	str	r3, [r4, #0]
 8009fe0:	bd38      	pop	{r3, r4, r5, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000790 	.word	0x20000790

08009fe8 <_isatty_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	4d06      	ldr	r5, [pc, #24]	@ (800a004 <_isatty_r+0x1c>)
 8009fec:	2300      	movs	r3, #0
 8009fee:	4604      	mov	r4, r0
 8009ff0:	4608      	mov	r0, r1
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	f7f7 feec 	bl	8001dd0 <_isatty>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_isatty_r+0x1a>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_isatty_r+0x1a>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20000790 	.word	0x20000790

0800a008 <_init>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr

0800a014 <_fini>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr
